
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function null_to_empty(value) {
        return value == null ? '' : value;
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text$1(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text$1(' ');
    }
    function empty$1() {
        return text$1('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                else
                    this.e = element(target.nodeName);
                this.t = target;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init$1(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule$1(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire$1 (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var _nodeResolve_empty = {};

    var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _nodeResolve_empty
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

    var bn = createCommonjsModule$1(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
    });

    const version$p = "logger/5.6.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            let url = "";
            switch (code) {
                case ErrorCode.NUMERIC_FAULT: {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch (fault) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
                case ErrorCode.CALL_EXCEPTION:
                case ErrorCode.INSUFFICIENT_FUNDS:
                case ErrorCode.MISSING_NEW:
                case ErrorCode.NONCE_EXPIRED:
                case ErrorCode.REPLACEMENT_UNDERPRICED:
                case ErrorCode.TRANSACTION_REPLACED:
                case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                    url = code;
                    break;
            }
            if (url) {
                message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
            }
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$p);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    const version$o = "bytes/5.6.1";

    const logger$J = new Logger(version$o);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
    }
    function isInteger(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$J.throwArgumentError("invalid arrayify value", "value", value);
    }
    function concat(items) {
        const objects = items.map(item => arrayify(item));
        const length = objects.reduce((accum, item) => (accum + item.length), 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger$J.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    const HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$J.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger$J.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                let v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger$J.throwArgumentError("invalid hexlify value", "value", value);
    }
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger$J.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    function hexConcat(items) {
        let result = "0x";
        items.forEach((item) => {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    function hexValue(value) {
        const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        let offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger$J.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger$J.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    function splitSignature(signature) {
        const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0,
            yParityAndS: "0x",
            compact: "0x"
        };
        if (isBytesLike(signature)) {
            let bytes = arrayify(signature);
            // Get the r, s and v
            if (bytes.length === 64) {
                // EIP-2098; pull the v from the top bit of s and clear it
                result.v = 27 + (bytes[32] >> 7);
                bytes[32] &= 0x7f;
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
            }
            else if (bytes.length === 65) {
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
                result.v = bytes[64];
            }
            else {
                logger$J.throwArgumentError("invalid signature string", "signature", signature);
            }
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger$J.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                const vs = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs);
                // Set or check the recid
                const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger$J.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs[0] &= 0x7f;
                const s = hexlify(vs);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger$J.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger$J.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger$J.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger$J.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger$J.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger$J.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger$J.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger$J.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
    }
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }

    const version$n = "bignumber/5.6.2";

    var BN = bn.BN;
    const logger$I = new Logger(version$n);
    const _constructorGuard$4 = {};
    const MAX_SAFE = 0x1fffffffffffff;
    function isBigNumberish(value) {
        return (value != null) && (BigNumber.isBigNumber(value) ||
            (typeof (value) === "number" && (value % 1) === 0) ||
            (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            (typeof (value) === "bigint") ||
            isBytes(value));
    }
    // Only warn about passing 10 into radix once
    let _warnedToStringRadix = false;
    class BigNumber {
        constructor(constructorGuard, hex) {
            if (constructorGuard !== _constructorGuard$4) {
                logger$I.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        fromTwos(value) {
            return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
            return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        }
        add(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
            const o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault$1("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault$1("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
        }
        or(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault$1("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
            if (this.isNegative() || value < 0) {
                throwFault$1("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
            return toBN(this).eq(toBN(other));
        }
        lt(other) {
            return toBN(this).lt(toBN(other));
        }
        lte(other) {
            return toBN(this).lte(toBN(other));
        }
        gt(other) {
            return toBN(this).gt(toBN(other));
        }
        gte(other) {
            return toBN(this).gte(toBN(other));
        }
        isNegative() {
            return (this._hex[0] === "-");
        }
        isZero() {
            return toBN(this).isZero();
        }
        toNumber() {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault$1("overflow", "toNumber", this.toString());
            }
            return null;
        }
        toBigInt() {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger$I.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        }
        toString() {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger$I.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger$I.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger$I.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        }
        toHexString() {
            return this._hex;
        }
        toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard$4, toHex$1(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard$4, toHex$1(new BN(value)));
                }
                return logger$I.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault$1("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault$1("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if (isBytes(anyValue)) {
                return BigNumber.from(hexlify(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    const hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    let hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$I.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
            return !!(value && value._isBigNumber);
        }
    }
    // Normalize the hex string
    function toHex$1(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$1(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$I.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$1(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$1(value));
    }
    function toBN(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
        }
        return new BN(hex.substring(2), 16);
    }
    function throwFault$1(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$I.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN(value, 36)).toString(16);
    }
    // value should have no prefix
    function _base16To36(value) {
        return (new BN(value, 16)).toString(36);
    }

    const logger$H = new Logger(version$n);
    const _constructorGuard$3 = {};
    const Zero$2 = BigNumber.from(0);
    const NegativeOne$2 = BigNumber.from(-1);
    function throwFault(message, fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value !== undefined) {
            params.value = value;
        }
        return logger$H.throwError(message, Logger.errors.NUMERIC_FAULT, params);
    }
    // Constant to pull zeros from for multipliers
    let zeros = "0";
    while (zeros.length < 256) {
        zeros += zeros;
    }
    // Returns a string "1" followed by decimal "0"s
    function getMultiplier(decimals) {
        if (typeof (decimals) !== "number") {
            try {
                decimals = BigNumber.from(decimals).toNumber();
            }
            catch (e) { }
        }
        if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
            return ("1" + zeros.substring(0, decimals));
        }
        return logger$H.throwArgumentError("invalid decimal size", "decimals", decimals);
    }
    function formatFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        // Make sure wei is a big number (convert as necessary)
        value = BigNumber.from(value);
        const negative = value.lt(Zero$2);
        if (negative) {
            value = value.mul(NegativeOne$2);
        }
        let fraction = value.mod(multiplier).toString();
        while (fraction.length < multiplier.length - 1) {
            fraction = "0" + fraction;
        }
        // Strip training 0
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
        const whole = value.div(multiplier).toString();
        if (multiplier.length === 1) {
            value = whole;
        }
        else {
            value = whole + "." + fraction;
        }
        if (negative) {
            value = "-" + value;
        }
        return value;
    }
    function parseFixed(value, decimals) {
        if (decimals == null) {
            decimals = 0;
        }
        const multiplier = getMultiplier(decimals);
        if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
            logger$H.throwArgumentError("invalid decimal value", "value", value);
        }
        // Is it negative?
        const negative = (value.substring(0, 1) === "-");
        if (negative) {
            value = value.substring(1);
        }
        if (value === ".") {
            logger$H.throwArgumentError("missing value", "value", value);
        }
        // Split it into a whole and fractional part
        const comps = value.split(".");
        if (comps.length > 2) {
            logger$H.throwArgumentError("too many decimal points", "value", value);
        }
        let whole = comps[0], fraction = comps[1];
        if (!whole) {
            whole = "0";
        }
        if (!fraction) {
            fraction = "0";
        }
        // Trim trailing zeros
        while (fraction[fraction.length - 1] === "0") {
            fraction = fraction.substring(0, fraction.length - 1);
        }
        // Check the fraction doesn't exceed our decimals size
        if (fraction.length > multiplier.length - 1) {
            throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
        }
        // If decimals is 0, we have an empty string for fraction
        if (fraction === "") {
            fraction = "0";
        }
        // Fully pad the string with zeros to get to wei
        while (fraction.length < multiplier.length - 1) {
            fraction += "0";
        }
        const wholeValue = BigNumber.from(whole);
        const fractionValue = BigNumber.from(fraction);
        let wei = (wholeValue.mul(multiplier)).add(fractionValue);
        if (negative) {
            wei = wei.mul(NegativeOne$2);
        }
        return wei;
    }
    class FixedFormat {
        constructor(constructorGuard, signed, width, decimals) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.signed = signed;
            this.width = width;
            this.decimals = decimals;
            this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
            this._multiplier = getMultiplier(decimals);
            Object.freeze(this);
        }
        static from(value) {
            if (value instanceof FixedFormat) {
                return value;
            }
            if (typeof (value) === "number") {
                value = `fixed128x${value}`;
            }
            let signed = true;
            let width = 128;
            let decimals = 18;
            if (typeof (value) === "string") {
                if (value === "fixed") ;
                else if (value === "ufixed") {
                    signed = false;
                }
                else {
                    const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                    if (!match) {
                        logger$H.throwArgumentError("invalid fixed format", "format", value);
                    }
                    signed = (match[1] !== "u");
                    width = parseInt(match[2]);
                    decimals = parseInt(match[3]);
                }
            }
            else if (value) {
                const check = (key, type, defaultValue) => {
                    if (value[key] == null) {
                        return defaultValue;
                    }
                    if (typeof (value[key]) !== type) {
                        logger$H.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                    }
                    return value[key];
                };
                signed = check("signed", "boolean", signed);
                width = check("width", "number", width);
                decimals = check("decimals", "number", decimals);
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
            }
            if (decimals > 80) {
                logger$H.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
            }
            return new FixedFormat(_constructorGuard$3, signed, width, decimals);
        }
    }
    class FixedNumber {
        constructor(constructorGuard, hex, value, format) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$H.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new FixedFormat"
                });
            }
            this.format = format;
            this._hex = hex;
            this._value = value;
            this._isFixedNumber = true;
            Object.freeze(this);
        }
        _checkFormat(other) {
            if (this.format.name !== other.format.name) {
                logger$H.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
            }
        }
        addUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
        }
        subUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
        }
        mulUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
        }
        divUnsafe(other) {
            this._checkFormat(other);
            const a = parseFixed(this._value, this.format.decimals);
            const b = parseFixed(other._value, other.format.decimals);
            return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
        }
        floor() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (this.isNegative() && hasFraction) {
                result = result.subUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        ceiling() {
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            let result = FixedNumber.from(comps[0], this.format);
            const hasFraction = !comps[1].match(/^(0*)$/);
            if (!this.isNegative() && hasFraction) {
                result = result.addUnsafe(ONE.toFormat(result.format));
            }
            return result;
        }
        // @TODO: Support other rounding algorithms
        round(decimals) {
            if (decimals == null) {
                decimals = 0;
            }
            // If we are already in range, we're done
            const comps = this.toString().split(".");
            if (comps.length === 1) {
                comps.push("0");
            }
            if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                logger$H.throwArgumentError("invalid decimal count", "decimals", decimals);
            }
            if (comps[1].length <= decimals) {
                return this;
            }
            const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
            const bump = BUMP.toFormat(this.format);
            return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
        }
        isZero() {
            return (this._value === "0.0" || this._value === "0");
        }
        isNegative() {
            return (this._value[0] === "-");
        }
        toString() { return this._value; }
        toHexString(width) {
            if (width == null) {
                return this._hex;
            }
            if (width % 8) {
                logger$H.throwArgumentError("invalid byte width", "width", width);
            }
            const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
            return hexZeroPad(hex, width / 8);
        }
        toUnsafeFloat() { return parseFloat(this.toString()); }
        toFormat(format) {
            return FixedNumber.fromString(this._value, format);
        }
        static fromValue(value, decimals, format) {
            // If decimals looks more like a format, and there is no format, shift the parameters
            if (format == null && decimals != null && !isBigNumberish(decimals)) {
                format = decimals;
                decimals = null;
            }
            if (decimals == null) {
                decimals = 0;
            }
            if (format == null) {
                format = "fixed";
            }
            return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
        }
        static fromString(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            const numeric = parseFixed(value, fixedFormat.decimals);
            if (!fixedFormat.signed && numeric.lt(Zero$2)) {
                throwFault("unsigned value cannot be negative", "overflow", "value", value);
            }
            let hex = null;
            if (fixedFormat.signed) {
                hex = numeric.toTwos(fixedFormat.width).toHexString();
            }
            else {
                hex = numeric.toHexString();
                hex = hexZeroPad(hex, fixedFormat.width / 8);
            }
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static fromBytes(value, format) {
            if (format == null) {
                format = "fixed";
            }
            const fixedFormat = FixedFormat.from(format);
            if (arrayify(value).length > fixedFormat.width / 8) {
                throw new Error("overflow");
            }
            let numeric = BigNumber.from(value);
            if (fixedFormat.signed) {
                numeric = numeric.fromTwos(fixedFormat.width);
            }
            const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
            const decimal = formatFixed(numeric, fixedFormat.decimals);
            return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
        }
        static from(value, format) {
            if (typeof (value) === "string") {
                return FixedNumber.fromString(value, format);
            }
            if (isBytes(value)) {
                return FixedNumber.fromBytes(value, format);
            }
            try {
                return FixedNumber.fromValue(value, 0, format);
            }
            catch (error) {
                // Allow NUMERIC_FAULT to bubble up
                if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                    throw error;
                }
            }
            return logger$H.throwArgumentError("invalid FixedNumber value", "value", value);
        }
        static isFixedNumber(value) {
            return !!(value && value._isFixedNumber);
        }
    }
    const ONE = FixedNumber.from(1);
    const BUMP = FixedNumber.from("0.5");

    const version$m = "properties/5.6.0";

    var __awaiter$u = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$G = new Logger(version$m);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    function resolveProperties(object) {
        return __awaiter$u(this, void 0, void 0, function* () {
            const promises = Object.keys(object).map((key) => {
                const value = object[key];
                return Promise.resolve(value).then((v) => ({ key: key, value: v }));
            });
            const results = yield Promise.all(promises);
            return results.reduce((accum, result) => {
                accum[(result.key)] = result.value;
                return accum;
            }, {});
        });
    }
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$G.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
            if (!properties[key]) {
                logger$G.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    function shallowCopy(object) {
        const result = {};
        for (const key in object) {
            result[key] = object[key];
        }
        return result;
    }
    const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
                let value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
                const value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$G.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    class Description {
        constructor(info) {
            for (const key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
    }

    const version$l = "abi/5.6.4";

    const logger$F = new Logger(version$l);
    const _constructorGuard$2 = {};
    let ModifiersBytes = { calldata: true, memory: true, storage: true };
    let ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger$F.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
            logger$F.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger$F.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (let key in params) {
            defineReadOnly(object, key, params[key]);
        }
    }
    const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    class ParamType {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                let result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.components) {
                    result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        static from(value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        }
        static fromObject(value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard$2, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        }
        static fromString(value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
            return !!(value != null && value._isParamType);
        }
    }
    function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
    }
    class Fragment {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$F.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        static from(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        }
        static fromObject(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "error":
                    return ErrorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger$F.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
                return ErrorFragment.fromString(value.substring(5).trim());
            }
            return logger$F.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
            return !!(value && value._isFragment);
        }
    }
    class EventFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        }
        static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger$F.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
                logger$F.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger$F.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        }
        static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
        }
    }
    function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger$F.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "nonpayable":
                    params.payable = false;
                    params.stateMutability = "nonpayable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger$F.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger$F.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger$F.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger$F.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    class ConstructorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            if (format === FormatTypes.sighash) {
                logger$F.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger$F.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
                logger$F.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger$F.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
        }
    }
    class FunctionFragment extends ConstructorFragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                    outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger$F.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
                logger$F.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                let returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger$F.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
        }
    }
    //export class StructFragment extends Fragment {
    //}
    function checkForbidden(fragment) {
        const sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
            logger$F.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
        }
        return fragment;
    }
    class ErrorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$F.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "error ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ErrorFragment.isErrorFragment(value)) {
                return value;
            }
            if (value.type !== "error") {
                logger$F.throwArgumentError("invalid error object", "value", value);
            }
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
        }
        static fromString(value) {
            let params = { type: "error" };
            let parens = value.match(regexParen);
            if (!parens) {
                logger$F.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
            return (value && value._isFragment && value.type === "error");
        }
    }
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger$F.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
    }
    const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger$F.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }

    const logger$E = new Logger(version$l);
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    class Coder {
        constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        _throwError(message, value) {
            logger$E.throwArgumentError(message, this.localName, value);
        }
    }
    class Writer {
        constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        get data() {
            return hexConcat(this._data);
        }
        get length() { return this._dataLength; }
        _writeData(data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        }
        appendWriter(writer) {
            return this._writeData(concat(writer._data));
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
            let bytes = arrayify(value);
            const paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = concat([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        }
        _getValue(value) {
            let bytes = arrayify(BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$E.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
            return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
            const offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return (value) => {
                this._data[offset] = this._getValue(value);
            };
        }
    }
    class Reader {
        constructor(data, wordSize, coerceFunc, allowLoose) {
            defineReadOnly(this, "_data", arrayify(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            defineReadOnly(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        get data() { return hexlify(this._data); }
        get consumed() { return this._offset; }
        // The default Coerce function
        static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        }
        coerce(name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        }
        _peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger$E.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        }
        readBytes(length, loose) {
            let bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        readValue() {
            return BigNumber.from(this.readBytes(this.wordSize));
        }
    }

    /**
     * [js-sha3]{@link https://github.com/emn178/js-sha3}
     *
     * @version 0.8.0
     * @author Chen, Yi-Cyuan [emn178@gmail.com]
     * @copyright Chen, Yi-Cyuan 2015-2018
     * @license MIT
     */

    var sha3 = createCommonjsModule$1(function (module) {
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    function keccak256$1(data) {
        return '0x' + sha3.keccak_256(arrayify(data));
    }

    const version$k = "rlp/5.6.1";

    const logger$D = new Logger(version$k);
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        if (!isBytesLike(object)) {
            logger$D.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call(arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$3(object) {
        return hexlify(_encode(object));
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$D.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$D.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                logger$D.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlify(data[offset]) };
    }
    function decode$3(data) {
        const bytes = arrayify(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$D.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }

    var index$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        encode: encode$3,
        decode: decode$3
    });

    const version$j = "address/5.6.1";

    const logger$C = new Logger(version$j);
    function getChecksumAddress(address) {
        if (!isHexString(address, 20)) {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = arrayify(keccak256$1(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    const MAX_SAFE_INTEGER = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        let result = null;
        if (typeof (address) !== "string") {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$C.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$C.throwArgumentError("bad icap checksum", "address", address);
            }
            result = _base36To16(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$C.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getIcapAddress(address) {
        let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
            base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
    }
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        let from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger$C.throwArgumentError("missing from address", "transaction", transaction);
        }
        const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
        return getAddress(hexDataSlice(keccak256$1(encode$3([from, nonce])), 12));
    }
    function getCreate2Address(from, salt, initCodeHash) {
        if (hexDataLength(salt) !== 32) {
            logger$C.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if (hexDataLength(initCodeHash) !== 32) {
            logger$C.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress(hexDataSlice(keccak256$1(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
    }

    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        defaultValue() {
            return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
            try {
                value = getAddress(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
        }
    }

    // Clones the functionality of an existing Coder, but without a localName
    class AnonymousCoder extends Coder {
        constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
        }
        defaultValue() {
            return this.coder.defaultValue();
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    const logger$B = new Logger(version$l);
    function pack$1(writer, coders, values) {
        let arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
                const name = coder.localName;
                if (!name) {
                    logger$B.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique[name]) {
                    logger$B.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique[name] = true;
                return values[name];
            });
        }
        else {
            logger$B.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger$B.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readValue();
                let offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            const value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
        }
        return Object.freeze(values);
    }
    class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
        }
        defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        }
        encode(writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$B.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack$1(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger$B.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        }
    }

    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        defaultValue() {
            return false;
        }
        encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        }
    }

    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        defaultValue() {
            return "0x";
        }
        encode(writer, value) {
            value = arrayify(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        }
    }
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(super.decode(reader)));
        }
    }

    // @TODO: Merge this with bytes
    class FixedBytesCoder extends Coder {
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
        }
        defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        }
        encode(writer, value) {
            let data = arrayify(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
        }
    }

    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        defaultValue() {
            return null;
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        }
        decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        }
    }

    const AddressZero = "0x0000000000000000000000000000000000000000";

    const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
    const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
    const One$1 = ( /*#__PURE__*/BigNumber.from(1));
    const Two = ( /*#__PURE__*/BigNumber.from(2));
    const WeiPerEther = ( /*#__PURE__*/BigNumber.from("1000000000000000000"));
    const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));
    const MinInt256 = ( /*#__PURE__*/BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000"));
    const MaxInt256 = ( /*#__PURE__*/BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

    const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

    // NFKC (composed)             // (decomposed)
    const EtherSymbol = "\u039e"; // "\uD835\uDF63";

    var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AddressZero: AddressZero,
        NegativeOne: NegativeOne$1,
        Zero: Zero$1,
        One: One$1,
        Two: Two,
        WeiPerEther: WeiPerEther,
        MaxUint256: MaxUint256$1,
        MinInt256: MinInt256,
        MaxInt256: MaxInt256,
        HashZero: HashZero,
        EtherSymbol: EtherSymbol
    });

    class NumberCoder extends Coder {
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
        }
        defaultValue() {
            return 0;
        }
        encode(writer, value) {
            let v = BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
            if (this.signed) {
                let bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        }
        decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        }
    }

    const version$i = "strings/5.6.1";

    const logger$A = new Logger(version$i);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger$A.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    // Common error handing strategies
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        bytes = arrayify(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
            logger$A.checkNormalize();
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return arrayify(result);
    }
    function escapeChar(value) {
        const hex = ("0000" + value.toString(16));
        return "\\u" + hex.substring(hex.length - 4);
    }
    function _toEscapedUtf8String(bytes, onError) {
        return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
            if (codePoint < 256) {
                switch (codePoint) {
                    case 8: return "\\b";
                    case 9: return "\\t";
                    case 10: return "\\n";
                    case 13: return "\\r";
                    case 34: return "\\\"";
                    case 92: return "\\\\";
                }
                if (codePoint >= 32 && codePoint < 127) {
                    return String.fromCharCode(codePoint);
                }
            }
            if (codePoint <= 0xffff) {
                return escapeChar(codePoint);
            }
            codePoint -= 0x10000;
            return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
        }).join("") + '"';
    }
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }

    function formatBytes32String(text) {
        // Get the bytes
        const bytes = toUtf8Bytes(text);
        // Check we have room for null-termination
        if (bytes.length > 31) {
            throw new Error("bytes32 string must be less than 32 bytes");
        }
        // Zero-pad (implicitly null-terminates)
        return hexlify(concat([bytes, HashZero]).slice(0, 32));
    }
    function parseBytes32String(bytes) {
        const data = arrayify(bytes);
        // Must be 32 bytes with a null-termination
        if (data.length !== 32) {
            throw new Error("invalid bytes32 - not 32 bytes long");
        }
        if (data[31] !== 0) {
            throw new Error("invalid bytes32 string - no null terminator");
        }
        // Find the null termination
        let length = 31;
        while (data[length - 1] === 0) {
            length--;
        }
        // Determine the string value
        return toUtf8String(data.slice(0, length));
    }

    function bytes2(data) {
        if ((data.length % 4) !== 0) {
            throw new Error("bad data");
        }
        let result = [];
        for (let i = 0; i < data.length; i += 4) {
            result.push(parseInt(data.substring(i, i + 4), 16));
        }
        return result;
    }
    function createTable(data, func) {
        if (!func) {
            func = function (value) { return [parseInt(value, 16)]; };
        }
        let lo = 0;
        let result = {};
        data.split(",").forEach((pair) => {
            let comps = pair.split(":");
            lo += parseInt(comps[0], 16);
            result[lo] = func(comps[1]);
        });
        return result;
    }
    function createRangeTable(data) {
        let hi = 0;
        return data.split(",").map((v) => {
            let comps = v.split("-");
            if (comps.length === 1) {
                comps[1] = "0";
            }
            else if (comps[1] === "") {
                comps[1] = "1";
            }
            let lo = hi + parseInt(comps[0], 16);
            hi = parseInt(comps[1], 16);
            return { l: lo, h: hi };
        });
    }
    function matchMap(value, ranges) {
        let lo = 0;
        for (let i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            lo += range.l;
            if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                if (range.e && range.e.indexOf(value - lo) !== -1) {
                    continue;
                }
                return range;
            }
        }
        return null;
    }
    const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    // @TODO: Make this relative...
    const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    const Table_B_2_ranges = [
        { h: 25, s: 32, l: 65 },
        { h: 30, s: 32, e: [23], l: 127 },
        { h: 54, s: 1, e: [48], l: 64, d: 2 },
        { h: 14, s: 1, l: 57, d: 2 },
        { h: 44, s: 1, l: 17, d: 2 },
        { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
        { h: 16, s: 1, l: 68, d: 2 },
        { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
        { h: 26, s: 32, e: [17], l: 435 },
        { h: 22, s: 1, l: 71, d: 2 },
        { h: 15, s: 80, l: 40 },
        { h: 31, s: 32, l: 16 },
        { h: 32, s: 1, l: 80, d: 2 },
        { h: 52, s: 1, l: 42, d: 2 },
        { h: 12, s: 1, l: 55, d: 2 },
        { h: 40, s: 1, e: [38], l: 15, d: 2 },
        { h: 14, s: 1, l: 48, d: 2 },
        { h: 37, s: 48, l: 49 },
        { h: 148, s: 1, l: 6351, d: 2 },
        { h: 88, s: 1, l: 160, d: 2 },
        { h: 15, s: 16, l: 704 },
        { h: 25, s: 26, l: 854 },
        { h: 25, s: 32, l: 55915 },
        { h: 37, s: 40, l: 1247 },
        { h: 25, s: -119711, l: 53248 },
        { h: 25, s: -119763, l: 52 },
        { h: 25, s: -119815, l: 52 },
        { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
        { h: 25, s: -119919, l: 52 },
        { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
        { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
        { h: 25, s: -120075, l: 52 },
        { h: 25, s: -120127, l: 52 },
        { h: 25, s: -120179, l: 52 },
        { h: 25, s: -120231, l: 52 },
        { h: 25, s: -120283, l: 52 },
        { h: 25, s: -120335, l: 52 },
        { h: 24, s: -119543, e: [17], l: 56 },
        { h: 24, s: -119601, e: [17], l: 58 },
        { h: 24, s: -119659, e: [17], l: 58 },
        { h: 24, s: -119717, e: [17], l: 58 },
        { h: 24, s: -119775, e: [17], l: 58 }
    ];
    const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
    function flatten(values) {
        return values.reduce((accum, value) => {
            value.forEach((value) => { accum.push(value); });
            return accum;
        }, []);
    }
    function _nameprepTableA1(codepoint) {
        return !!matchMap(codepoint, Table_A_1_ranges);
    }
    function _nameprepTableB2(codepoint) {
        let range = matchMap(codepoint, Table_B_2_ranges);
        if (range) {
            return [codepoint + range.s];
        }
        let codes = Table_B_2_lut_abs[codepoint];
        if (codes) {
            return codes;
        }
        let shift = Table_B_2_lut_rel[codepoint];
        if (shift) {
            return [codepoint + shift[0]];
        }
        let complex = Table_B_2_complex[codepoint];
        if (complex) {
            return complex;
        }
        return null;
    }
    function _nameprepTableC(codepoint) {
        return !!matchMap(codepoint, Table_C_ranges);
    }
    function nameprep(value) {
        // This allows platforms with incomplete normalize to bypass
        // it for very basic names which the built-in toLowerCase
        // will certainly handle correctly
        if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
            return value.toLowerCase();
        }
        // Get the code points (keeping the current normalization)
        let codes = toUtf8CodePoints(value);
        codes = flatten(codes.map((code) => {
            // Substitute Table B.1 (Maps to Nothing)
            if (Table_B_1_flags.indexOf(code) >= 0) {
                return [];
            }
            if (code >= 0xfe00 && code <= 0xfe0f) {
                return [];
            }
            // Substitute Table B.2 (Case Folding)
            let codesTableB2 = _nameprepTableB2(code);
            if (codesTableB2) {
                return codesTableB2;
            }
            // No Substitution
            return [code];
        }));
        // Normalize using form KC
        codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
        // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
        codes.forEach((code) => {
            if (_nameprepTableC(code)) {
                throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
            }
        });
        // Prohibit Unassigned Code Points (Table A.1)
        codes.forEach((code) => {
            if (_nameprepTableA1(code)) {
                throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
            }
        });
        // IDNA extras
        let name = _toUtf8String(codes);
        // IDNA: 4.2.3.1
        if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
            throw new Error("invalid hyphen");
        }
        // IDNA: 4.2.4
        if (name.length > 63) {
            throw new Error("too long");
        }
        return name;
    }

    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        defaultValue() {
            return "";
        }
        encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    class TupleCoder extends Coder {
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
        }
        defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
                const name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
                let name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        }
        encode(writer, value) {
            return pack$1(writer, this.coders, value);
        }
        decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
        }
    }

    const logger$z = new Logger(version$l);
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    class AbiCoder {
        constructor(coerceFunc) {
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "array":
                    return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new TupleCoder((param.components || []).map((component) => {
                        return this._getCoder(component);
                    }), param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$z.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$z.throwArgumentError("invalid bytes length", "param", param);
                }
                return new FixedBytesCoder(size, param.name);
            }
            return logger$z.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() { return 32; }
        _getReader(data, allowLoose) {
            return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        }
        _getWriter() {
            return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.defaultValue();
        }
        encode(types, values) {
            if (types.length !== values.length) {
                logger$z.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        }
        decode(types, data, loose) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(this._getReader(arrayify(data), loose));
        }
    }
    const defaultAbiCoder = new AbiCoder();

    function id(text) {
        return keccak256$1(toUtf8Bytes(text));
    }

    const version$h = "hash/5.6.1";

    const logger$y = new Logger(version$h);
    const Zeros$1 = new Uint8Array(32);
    Zeros$1.fill(0);
    const Partition = new RegExp("^((.*)\\.)?([^.]+)$");
    function isValidName(name) {
        try {
            const comps = name.split(".");
            for (let i = 0; i < comps.length; i++) {
                if (nameprep(comps[i]).length === 0) {
                    throw new Error("empty");
                }
            }
            return true;
        }
        catch (error) { }
        return false;
    }
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger$y.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        let current = name;
        let result = Zeros$1;
        while (current.length) {
            const partition = current.match(Partition);
            if (partition == null || partition[2] === "") {
                logger$y.throwArgumentError("invalid ENS address; missing component", "name", name);
            }
            const label = toUtf8Bytes(nameprep(partition[3]));
            result = keccak256$1(concat([result, keccak256$1(label)]));
            current = partition[2] || "";
        }
        return hexlify(result);
    }
    function dnsEncode(name) {
        return hexlify(concat(name.split(".").map((comp) => {
            // We jam in an _ prefix to fill in with the length later
            // Note: Nameprep throws if the component is over 63 bytes
            const bytes = toUtf8Bytes("_" + nameprep(comp));
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }

    const messagePrefix = "\x19Ethereum Signed Message:\n";
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
        }
        return keccak256$1(concat([
            toUtf8Bytes(messagePrefix),
            toUtf8Bytes(String(message.length)),
            message
        ]));
    }

    var __awaiter$t = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$x = new Logger(version$h);
    const padding = new Uint8Array(32);
    padding.fill(0);
    const NegativeOne = BigNumber.from(-1);
    const Zero = BigNumber.from(0);
    const One = BigNumber.from(1);
    const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        const bytes = arrayify(value);
        const padOffset = bytes.length % 32;
        if (padOffset) {
            return hexConcat([bytes, padding.slice(padOffset)]);
        }
        return hexlify(bytes);
    }
    const hexTrue = hexZeroPad(One.toHexString(), 32);
    const hexFalse = hexZeroPad(Zero.toHexString(), 32);
    const domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    const domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger$x.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            }
            return value;
        };
    }
    const domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return getAddress(value).toLowerCase();
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                const bytes = arrayify(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return hexlify(bytes);
            }
            catch (error) { }
            return logger$x.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            const match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                const signed = (match[1] === "");
                const width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger$x.throwArgumentError("invalid numeric width", "type", type);
                }
                const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);
                const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    const v = BigNumber.from(value);
                    if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                        logger$x.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                    }
                    return hexZeroPad(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
                const width = parseInt(match[1]);
                if (width === 0 || width > 32 || match[1] !== String(width)) {
                    logger$x.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    const bytes = arrayify(value);
                    if (bytes.length !== width) {
                        logger$x.throwArgumentError(`invalid length for ${type}`, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return hexZeroPad(getAddress(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return keccak256$1(value);
            };
            case "string": return function (value) {
                return id(value);
            };
        }
        return null;
    }
    function encodeType(name, fields) {
        return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
    }
    class TypedDataEncoder {
        constructor(types) {
            defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
            defineReadOnly(this, "_encoderCache", {});
            defineReadOnly(this, "_types", {});
            // Link struct types to their direct child structs
            const links = {};
            // Link structs to structs which contain them as a child
            const parents = {};
            // Link all subtypes within a given struct
            const subtypes = {};
            Object.keys(types).forEach((type) => {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            for (const name in types) {
                const uniqueNames = {};
                types[name].forEach((field) => {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger$x.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name) {
                        logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Is this a base encoding type?
                    const encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger$x.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name);
                    links[name][baseType] = true;
                });
            }
            // Deduce the primary type
            const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
            if (primaryTypes.length === 0) {
                logger$x.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger$x.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
            }
            defineReadOnly(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger$x.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach((child) => {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach((subtype) => {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (const name in subtypes) {
                const st = Object.keys(subtypes[name]);
                st.sort();
                this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join("");
            }
        }
        getEncoder(type) {
            let encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        }
        _getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const subEncoder = this.getEncoder(subtype);
                const length = parseInt(match[3]);
                return (value) => {
                    if (length >= 0 && value.length !== length) {
                        logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    let result = value.map(subEncoder);
                    if (this._types[subtype]) {
                        result = result.map(keccak256$1);
                    }
                    return keccak256$1(hexConcat(result));
                };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                const encodedType = id(this._types[type]);
                return (value) => {
                    const values = fields.map(({ name, type }) => {
                        const result = this.getEncoder(type)(value[name]);
                        if (this._types[type]) {
                            return keccak256$1(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType);
                    return hexConcat(values);
                };
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        encodeType(name) {
            const result = this._types[name];
            if (!result) {
                logger$x.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
            }
            return result;
        }
        encodeData(type, value) {
            return this.getEncoder(type)(value);
        }
        hashStruct(name, value) {
            return keccak256$1(this.encodeData(name, value));
        }
        encode(value) {
            return this.encodeData(this.primaryType, value);
        }
        hash(value) {
            return this.hashStruct(this.primaryType, value);
        }
        _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const length = parseInt(match[3]);
                if (length >= 0 && value.length !== length) {
                    logger$x.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map((v) => this._visit(subtype, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                return fields.reduce((accum, { name, type }) => {
                    accum[name] = this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger$x.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
        }
        static from(types) {
            return new TypedDataEncoder(types);
        }
        static getPrimaryType(types) {
            return TypedDataEncoder.from(types).primaryType;
        }
        static hashStruct(name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        }
        static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
                const type = domainFieldTypes[name];
                if (!type) {
                    logger$x.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                }
                domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        static encode(domain, types, value) {
            return hexConcat([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        }
        static hash(domain, types, value) {
            return keccak256$1(TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        static resolveNames(domain, types, value, resolveName) {
            return __awaiter$t(this, void 0, void 0, function* () {
                // Make a copy to isolate it from the object passed in
                domain = shallowCopy(domain);
                // Look up all ENS names
                const ensCache = {};
                // Do we need to look up the domain's verifyingContract?
                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                    ensCache[domain.verifyingContract] = "0x";
                }
                // We are going to use the encoder to visit all the base values
                const encoder = TypedDataEncoder.from(types);
                // Get a list of all the addresses
                encoder.visit(value, (type, value) => {
                    if (type === "address" && !isHexString(value, 20)) {
                        ensCache[value] = "0x";
                    }
                    return value;
                });
                // Lookup each name
                for (const name in ensCache) {
                    ensCache[name] = yield resolveName(name);
                }
                // Replace the domain verifyingContract if needed
                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                    domain.verifyingContract = ensCache[domain.verifyingContract];
                }
                // Replace all ENS names with their address
                value = encoder.visit(value, (type, value) => {
                    if (type === "address" && ensCache[value]) {
                        return ensCache[value];
                    }
                    return value;
                });
                return { domain, value };
            });
        }
        static getPayload(domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
                const value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = TypedDataEncoder.from(types);
            const typesWithDomain = shallowCopy(types);
            if (typesWithDomain.EIP712Domain) {
                logger$x.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, (type, value) => {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return hexlify(arrayify(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger$x.throwArgumentError(`invalid string`, "value", value);
                            }
                            return value;
                    }
                    return logger$x.throwArgumentError("unsupported type", "type", type);
                })
            };
        }
    }

    const logger$w = new Logger(version$l);
    class LogDescription extends Description {
    }
    class TransactionDescription extends Description {
    }
    class ErrorDescription extends Description {
    }
    class Indexed extends Description {
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
    }
    const BuiltinErrors = {
        "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
        "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
        const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
        wrap.error = error;
        return wrap;
    }
    /*
    function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, <{ [ name: string ]: boolean }>{ });
    }
    */
    class Interface {
        constructor(fragments) {
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
                return Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
                let bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            logger$w.warn("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        defineReadOnly(this, "deploy", fragment);
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = this.functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = this.events;
                        break;
                    case "error":
                        bucket = this.errors;
                        break;
                    default:
                        return;
                }
                let signature = fragment.format();
                if (bucket[signature]) {
                    logger$w.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineReadOnly(this, "deploy", ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
            if (!format) {
                format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
                logger$w.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
                return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
        }
        // Sub-classes can override these to handle other blockchains
        static getAbiCoder() {
            return defaultAbiCoder;
        }
        static getAddress(address) {
            return getAddress(address);
        }
        static getSighash(fragment) {
            return hexDataSlice(id(fragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
            return id(eventFragment.format());
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getFunction(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                for (const name in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name)) {
                        return this.functions[name];
                    }
                }
                logger$w.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching function", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching functions", "name", name);
                }
                return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        getEvent(nameOrSignatureOrTopic) {
            if (isHexString(nameOrSignatureOrTopic)) {
                const topichash = nameOrSignatureOrTopic.toLowerCase();
                for (const name in this.events) {
                    if (topichash === this.getEventTopic(name)) {
                        return this.events[name];
                    }
                }
                logger$w.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                const name = nameOrSignatureOrTopic.trim();
                const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching event", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching events", "name", name);
                }
                return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getError(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                const getSighash = getStatic(this.constructor, "getSighash");
                for (const name in this.errors) {
                    const error = this.errors[name];
                    if (nameOrSignatureOrSighash === getSighash(error)) {
                        return this.errors[name];
                    }
                }
                logger$w.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$w.throwArgumentError("no matching error", "name", name);
                }
                else if (matching.length > 1) {
                    logger$w.throwArgumentError("multiple matching errors", "name", name);
                }
                return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$w.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        getSighash(fragment) {
            if (typeof (fragment) === "string") {
                try {
                    fragment = this.getFunction(fragment);
                }
                catch (error) {
                    try {
                        fragment = this.getError(fragment);
                    }
                    catch (_) {
                        throw error;
                    }
                }
            }
            return getStatic(this.constructor, "getSighash")(fragment);
        }
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                logger$w.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
        }
        encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            return hexlify(concat([
                this.getSighash(fragment),
                this._encodeParams(fragment.inputs, values || [])
            ]));
        }
        // Decode the data for a function call (e.g. tx.data)
        decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger$w.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        // Encode the data for a function call (e.g. tx.data)
        encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(concat([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        }
        // Decode the result from a function call (e.g. from eth_call)
        decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            let bytes = arrayify(data);
            let reason = null;
            let message = "";
            let errorArgs = null;
            let errorName = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4: {
                    const selector = hexlify(bytes.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                        if (errorName === "Error") {
                            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        }
                        else if (errorName === "Panic") {
                            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                        }
                    }
                    else {
                        try {
                            const error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        }
                        catch (error) { }
                    }
                    break;
                }
            }
            return logger$w.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                data: hexlify(data), errorArgs, errorName, errorSignature, reason
            });
        }
        // Encode the result for a function call (e.g. for eth_call)
        encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
        }
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger$w.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256$1(hexlify(value));
                }
                if (param.type === "bool" && typeof (value) === "boolean") {
                    value = (value ? "0x01" : "0x00");
                }
                if (param.type.match(/^u?int/)) {
                    value = BigNumber.from(value).toHexString();
                }
                // Check addresses are valid
                if (param.type === "address") {
                    this._abiCoder.encode(["address"], [value]);
                }
                return hexZeroPad(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                let param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger$w.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger$w.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger$w.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256$1(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                let topicHash = this.getEventTopic(eventFragment);
                if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger$w.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    const value = result[index];
                    // Make error named values throw on access
                    if (value instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            enumerable: true,
                            get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                        });
                    }
                    else {
                        result[param.name] = value;
                    }
                }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
                const value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        enumerable: true,
                        get: () => { throw wrapAccessError(`index ${i}`, value); }
                    });
                }
            }
            return Object.freeze(result);
        }
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: BigNumber.from(tx.value || "0"),
            });
        }
        // @TODO
        //parseCallResult(data: BytesLike): ??
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        }
        parseError(data) {
            const hexData = hexlify(data);
            let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new ErrorDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                errorFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
            });
        }
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        static isInterface(value) {
            return !!(value && value._isInterface);
        }
    }

    const version$g = "abstract-provider/5.6.1";

    var __awaiter$s = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$v = new Logger(version$g);
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    class ForkEvent extends Description {
        static isForkEvent(value) {
            return !!(value && value._isForkEvent);
        }
    }
    ///////////////////////////////
    // Exported Abstracts
    class Provider {
        constructor() {
            logger$v.checkAbstract(new.target, Provider);
            defineReadOnly(this, "_isProvider", true);
        }
        getFeeData() {
            return __awaiter$s(this, void 0, void 0, function* () {
                const { block, gasPrice } = yield resolveProperties({
                    block: this.getBlock("latest"),
                    gasPrice: this.getGasPrice().catch((error) => {
                        // @TODO: Why is this now failing on Calaveras?
                        //console.log(error);
                        return null;
                    })
                });
                let maxFeePerGas = null, maxPriorityFeePerGas = null;
                if (block && block.baseFeePerGas) {
                    // We may want to compute this more accurately in the future,
                    // using the formula "check if the base fee is correct".
                    // See: https://eips.ethereum.org/EIPS/eip-1559
                    maxPriorityFeePerGas = BigNumber.from("1500000000");
                    maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }
                return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
            });
        }
        // Alias for "on"
        addListener(eventName, listener) {
            return this.on(eventName, listener);
        }
        // Alias for "off"
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
        static isProvider(value) {
            return !!(value && value._isProvider);
        }
    }

    const version$f = "abstract-signer/5.6.2";

    var __awaiter$r = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$u = new Logger(version$f);
    const allowedTransactionKeys$3 = [
        "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    const forwardErrors = [
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    class Signer {
        ///////////////////
        // Sub-classes MUST call super
        constructor() {
            logger$u.checkAbstract(new.target, Signer);
            defineReadOnly(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        getBalance(blockTag) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("getBalance");
                return yield this.provider.getBalance(this.getAddress(), blockTag);
            });
        }
        getTransactionCount(blockTag) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("getTransactionCount");
                return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
            });
        }
        // Populates "from" if unspecified, and estimates the gas for the transaction
        estimateGas(transaction) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("estimateGas");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.estimateGas(tx);
            });
        }
        // Populates "from" if unspecified, and calls with the transaction
        call(transaction, blockTag) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("call");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.call(tx, blockTag);
            });
        }
        // Populates all fields in a transaction, signs it and sends it to the network
        sendTransaction(transaction) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("sendTransaction");
                const tx = yield this.populateTransaction(transaction);
                const signedTx = yield this.signTransaction(tx);
                return yield this.provider.sendTransaction(signedTx);
            });
        }
        getChainId() {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("getChainId");
                const network = yield this.provider.getNetwork();
                return network.chainId;
            });
        }
        getGasPrice() {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("getGasPrice");
                return yield this.provider.getGasPrice();
            });
        }
        getFeeData() {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("getFeeData");
                return yield this.provider.getFeeData();
            });
        }
        resolveName(name) {
            return __awaiter$r(this, void 0, void 0, function* () {
                this._checkProvider("resolveName");
                return yield this.provider.resolveName(name);
            });
        }
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        checkTransaction(transaction) {
            for (const key in transaction) {
                if (allowedTransactionKeys$3.indexOf(key) === -1) {
                    logger$u.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            const tx = shallowCopy(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then((result) => {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger$u.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        }
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        populateTransaction(transaction) {
            return __awaiter$r(this, void 0, void 0, function* () {
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                if (tx.to != null) {
                    tx.to = Promise.resolve(tx.to).then((to) => __awaiter$r(this, void 0, void 0, function* () {
                        if (to == null) {
                            return null;
                        }
                        const address = yield this.resolveName(to);
                        if (address == null) {
                            logger$u.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return address;
                    }));
                    // Prevent this error from causing an UnhandledPromiseException
                    tx.to.catch((error) => { });
                }
                // Do not allow mixing pre-eip-1559 and eip-1559 properties
                const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                    logger$u.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                }
                else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                    logger$u.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                }
                if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                    // Fully-formed EIP-1559 transaction (skip getFeeData)
                    tx.type = 2;
                }
                else if (tx.type === 0 || tx.type === 1) {
                    // Explicit Legacy or EIP-2930 transaction
                    // Populate missing gasPrice
                    if (tx.gasPrice == null) {
                        tx.gasPrice = this.getGasPrice();
                    }
                }
                else {
                    // We need to get fee data to determine things
                    const feeData = yield this.getFeeData();
                    if (tx.type == null) {
                        // We need to auto-detect the intended type of this transaction...
                        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                            // The network supports EIP-1559!
                            // Upgrade transaction from null to eip-1559
                            tx.type = 2;
                            if (tx.gasPrice != null) {
                                // Using legacy gasPrice property on an eip-1559 network,
                                // so use gasPrice as both fee properties
                                const gasPrice = tx.gasPrice;
                                delete tx.gasPrice;
                                tx.maxFeePerGas = gasPrice;
                                tx.maxPriorityFeePerGas = gasPrice;
                            }
                            else {
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                        }
                        else if (feeData.gasPrice != null) {
                            // Network doesn't support EIP-1559...
                            // ...but they are trying to use EIP-1559 properties
                            if (hasEip1559) {
                                logger$u.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "populateTransaction"
                                });
                            }
                            // Populate missing fee data
                            if (tx.gasPrice == null) {
                                tx.gasPrice = feeData.gasPrice;
                            }
                            // Explicitly set untyped transaction to legacy
                            tx.type = 0;
                        }
                        else {
                            // getFeeData has failed us.
                            logger$u.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "signer.getFeeData"
                            });
                        }
                    }
                    else if (tx.type === 2) {
                        // Explicitly using EIP-1559
                        // Populate missing fee data
                        if (tx.maxFeePerGas == null) {
                            tx.maxFeePerGas = feeData.maxFeePerGas;
                        }
                        if (tx.maxPriorityFeePerGas == null) {
                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                    }
                }
                if (tx.nonce == null) {
                    tx.nonce = this.getTransactionCount("pending");
                }
                if (tx.gasLimit == null) {
                    tx.gasLimit = this.estimateGas(tx).catch((error) => {
                        if (forwardErrors.indexOf(error.code) >= 0) {
                            throw error;
                        }
                        return logger$u.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                            error: error,
                            tx: tx
                        });
                    });
                }
                if (tx.chainId == null) {
                    tx.chainId = this.getChainId();
                }
                else {
                    tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                    ]).then((results) => {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                            logger$u.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                    });
                }
                return yield resolveProperties(tx);
            });
        }
        ///////////////////
        // Sub-classes SHOULD leave these alone
        _checkProvider(operation) {
            if (!this.provider) {
                logger$u.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        }
        static isSigner(value) {
            return !!(value && value._isSigner);
        }
    }
    class VoidSigner extends Signer {
        constructor(address, provider) {
            super();
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "provider", provider || null);
        }
        getAddress() {
            return Promise.resolve(this.address);
        }
        _fail(message, operation) {
            return Promise.resolve().then(() => {
                logger$u.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        }
        signMessage(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        }
        signTransaction(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        }
        _signTypedData(domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        }
        connect(provider) {
            return new VoidSigner(this.address, provider);
        }
    }

    var minimalisticAssert$1 = assert$6;

    function assert$6(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$6.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var inherits_browser$1 = createCommonjsModule$1(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert$1(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo$1;

    var utils$5 = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$5.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$5.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert$1(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common$1 = {
    	BlockHash: BlockHash_1
    };

    var rotr32 = utils$5.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    var ft_1_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    var s0_256_1 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    var s1_256_1 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256$1;

    var common = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$1 = utils$5.rotl32;
    var sum32$2 = utils$5.sum32;
    var sum32_5$1 = utils$5.sum32_5;
    var ft_1 = common.ft_1;
    var BlockHash$3 = common$1.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$5.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h, 'big');
      else
        return utils$5.split32(this.h, 'big');
    };

    var sum32$1 = utils$5.sum32;
    var sum32_4$1 = utils$5.sum32_4;
    var sum32_5 = utils$5.sum32_5;
    var ch32 = common.ch32;
    var maj32 = common.maj32;
    var s0_256 = common.s0_256;
    var s1_256 = common.s1_256;
    var g0_256 = common.g0_256;
    var g1_256 = common.g1_256;

    var BlockHash$2 = common$1.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256() {
      if (!(this instanceof SHA256))
        return new SHA256();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$5.inherits(SHA256, BlockHash$2);
    var _256 = SHA256;

    SHA256.blockSize = 512;
    SHA256.outSize = 256;
    SHA256.hmacStrength = 192;
    SHA256.padLength = 64;

    SHA256.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert$1(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h, 'big');
      else
        return utils$5.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      _256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$5.inherits(SHA224, _256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$5.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$5.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi = utils$5.rotr64_hi;
    var rotr64_lo = utils$5.rotr64_lo;
    var shr64_hi = utils$5.shr64_hi;
    var shr64_lo = utils$5.shr64_lo;
    var sum64 = utils$5.sum64;
    var sum64_hi = utils$5.sum64_hi;
    var sum64_lo = utils$5.sum64_lo;
    var sum64_4_hi = utils$5.sum64_4_hi;
    var sum64_4_lo = utils$5.sum64_4_lo;
    var sum64_5_hi = utils$5.sum64_5_hi;
    var sum64_5_lo = utils$5.sum64_5_lo;

    var BlockHash$1 = common$1.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$5.inherits(SHA512, BlockHash$1);
    var _512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert$1(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h, 'big');
      else
        return utils$5.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      _512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$5.inherits(SHA384, _512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$5.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1;
    var sha224 = _224;
    var sha256$2 = _256;
    var sha384 = _384;
    var sha512$1 = _512;

    var sha = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256$2,
    	sha384: sha384,
    	sha512: sha512$1
    };

    var rotl32 = utils$5.rotl32;
    var sum32 = utils$5.sum32;
    var sum32_3 = utils$5.sum32_3;
    var sum32_4 = utils$5.sum32_4;
    var BlockHash = common$1.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$5.inherits(RIPEMD160, BlockHash);
    var ripemd160$1 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$5.toHex32(this.h, 'little');
      else
        return utils$5.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd = {
    	ripemd160: ripemd160$1
    };

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$5.toArray(key, enc));
    }
    var hmac = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1 = createCommonjsModule$1(function (module, exports) {
    var hash = exports;

    hash.utils = utils$5;
    hash.common = common$1;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var minimalisticAssert = assert;

    function assert(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1 = createCommonjsModule(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1$1 = createCommonjsModule(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });



    var getNAF = utils_1$1.getNAF;
    var getJSF = utils_1$1.getJSF;
    var assert$1 = utils_1$1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

      // Useful for many curves
      this.zero = new bn(0).toRed(this.red);
      this.one = new bn(1).toRed(this.red);
      this.two = new bn(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$1(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$1(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });






    var assert$2 = utils_1$1.assert;

    function ShortCurve(conf) {
      base.call(this, 'short', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser(ShortCurve, base);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn(vec.a, 16),
            b: new bn(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn.mont(num);
      var tinv = new bn(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn(1);
      var y1 = new bn(0);
      var x2 = new bn(0);
      var y2 = new bn(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point(curve, x, y, isRed) {
      base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser(Point, base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new bn(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn(0);
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = new bn(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser(JPoint, base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var curve_1 = createCommonjsModule(function (module, exports) {

    var curve = exports;

    curve.base = base;
    curve.short = short_1;
    curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
    curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
    });

    var curves_1 = createCommonjsModule(function (module, exports) {

    var curves = exports;





    var assert = utils_1$1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash_1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash_1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash_1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash_1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });





    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash_1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1.toArray(entropy, entropyEnc);
      add = utils_1.toArray(add, addEnc);

      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1.encode(res, enc);
    };



    var assert$3 = utils_1$1.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key$1 = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$3(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$3(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$3(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };




    var assert$4 = utils_1$1.assert;

    function Signature(options, enc) {
      if (options instanceof Signature)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$4(options.r && options.s, 'Signature without r or s');
      this.r = new bn(options.r, 16);
      this.s = new bn(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature = Signature;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn(r);
      this.s = new bn(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };





    var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    var assert$5 = utils_1$1.assert;




    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
          'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new key$1(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key$1.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key$1.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn(2));
      for (;;) {
        var priv = new bn(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new bn(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature(signature$1, 'hex');

      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, 'The recovery param is more than two bits');
      signature$1 = new signature(signature$1, enc);

      var n = this.n;
      var e = new bn(msg);
      var r = signature$1.r;
      var s = signature$1.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var elliptic_1 = createCommonjsModule(function (module, exports) {

    var elliptic = exports;

    elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
    });

    var EC$1 = elliptic_1.ec;

    const version$e = "signing-key/5.6.2";

    const logger$t = new Logger(version$e);
    let _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new EC$1("secp256k1");
        }
        return _curve;
    }
    class SigningKey {
        constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", hexlify(privateKey));
            if (hexDataLength(this.privateKey) !== 32) {
                logger$t.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
        }
        _addPoint(other) {
            const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
            const p1 = getCurve().keyFromPublic(arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const digestBytes = arrayify(digest);
            if (digestBytes.length !== 32) {
                logger$t.throwArgumentError("bad digest length", "digest", digest);
            }
            const signature = keyPair.sign(digestBytes, { canonical: true });
            return splitSignature({
                recoveryParam: signature.recoveryParam,
                r: hexZeroPad("0x" + signature.r.toString(16), 32),
                s: hexZeroPad("0x" + signature.s.toString(16), 32),
            });
        }
        computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
            return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
            return !!(value && value._isSigningKey);
        }
    }
    function recoverPublicKey(digest, signature) {
        const sig = splitSignature(signature);
        const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
        return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    function computePublicKey(key, compressed) {
        const bytes = arrayify(key);
        if (bytes.length === 32) {
            const signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$t.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }

    const version$d = "transactions/5.6.2";

    const logger$s = new Logger(version$d);
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
        TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
        TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return Zero$1;
        }
        return BigNumber.from(value);
    }
    // Legacy Transaction Fields
    const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    const allowedTransactionKeys$2 = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    };
    function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return getAddress(hexDataSlice(keccak256$1(hexDataSlice(publicKey, 1)), 12));
    }
    function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey(arrayify(digest), signature));
    }
    function formatNumber(value, name) {
        const result = stripZeros(BigNumber.from(value).toHexString());
        if (result.length > 32) {
            logger$s.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
        }
        return result;
    }
    function accessSetify(addr, storageKeys) {
        return {
            address: getAddress(addr),
            storageKeys: (storageKeys || []).map((storageKey, index) => {
                if (hexDataLength(storageKey) !== 32) {
                    logger$s.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
                }
                return storageKey.toLowerCase();
            })
        };
    }
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map((set, index) => {
                if (Array.isArray(set)) {
                    if (set.length > 2) {
                        logger$s.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                    }
                    return accessSetify(set[0], set[1]);
                }
                return accessSetify(set.address, set.storageKeys);
            });
        }
        const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => (a.address.localeCompare(b.address)));
        return result;
    }
    function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
    }
    function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
            const gasPrice = BigNumber.from(transaction.gasPrice);
            const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
                logger$s.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice, maxFeePerGas
                });
            }
        }
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x02", encode$3(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x01", encode$3(fields)]);
    }
    // Legacy Transactions and EIP-155
    function _serialize(transaction, signature) {
        checkProperties(transaction, allowedTransactionKeys$2);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = arrayify(hexlify(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = stripZeros(value);
                if (value.length > fieldInfo.maxLength) {
                    logger$s.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push(hexlify(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger$s.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !isBytesLike(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push(hexlify(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
            return encode$3(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = splitSignature(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger$s.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push(hexlify(v));
        raw.push(stripZeros(arrayify(sig.r)));
        raw.push(stripZeros(arrayify(sig.s)));
        return encode$3(raw);
    }
    function serialize$1(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
                logger$s.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
            case 1:
                return _serializeEip2930(transaction, signature);
            case 2:
                return _serializeEip1559(transaction, signature);
        }
        return logger$s.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
        });
    }
    function _parseEipSignature(tx, fields, serialize) {
        try {
            const recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
                throw new Error("bad recid");
            }
            tx.v = recid;
        }
        catch (error) {
            logger$s.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = hexZeroPad(fields[1], 32);
        tx.s = hexZeroPad(fields[2], 32);
        try {
            const digest = keccak256$1(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        }
        catch (error) { }
    }
    function _parseEip1559(payload) {
        const transaction = decode$3(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
            logger$s.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
        }
        const maxPriorityFeePerGas = handleNumber(transaction[2]);
        const maxFeePerGas = handleNumber(transaction[3]);
        const tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
    }
    function _parseEip2930(payload) {
        const transaction = decode$3(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
            logger$s.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
        }
        const tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
            return tx;
        }
        tx.hash = keccak256$1(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
    }
    // Legacy Transactions and EIP-155
    function _parse(rawTransaction) {
        const transaction = decode$3(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger$s.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            // @TODO: What makes snese to do? The v is too big
            return tx;
        }
        tx.r = hexZeroPad(transaction[7], 32);
        tx.s = hexZeroPad(transaction[8], 32);
        if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push(hexlify(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256$1(encode$3(raw));
            try {
                tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) { }
            tx.hash = keccak256$1(rawTransaction);
        }
        tx.type = null;
        return tx;
    }
    function parse(rawTransaction) {
        const payload = arrayify(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
            return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
            case 1:
                return _parseEip2930(payload);
            case 2:
                return _parseEip1559(payload);
        }
        return logger$s.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
        });
    }

    const version$c = "contracts/5.6.2";

    var __awaiter$q = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$r = new Logger(version$c);
    ///////////////////////////////
    const allowedTransactionKeys$1 = {
        chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true,
        customData: true,
        ccipReadEnabled: true
    };
    function resolveName(resolver, nameOrPromise) {
        return __awaiter$q(this, void 0, void 0, function* () {
            const name = yield nameOrPromise;
            if (typeof (name) !== "string") {
                logger$r.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            try {
                return getAddress(name);
            }
            catch (error) { }
            if (!resolver) {
                logger$r.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName"
                });
            }
            const address = yield resolver.resolveName(name);
            if (address == null) {
                logger$r.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return address;
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter$q(this, void 0, void 0, function* () {
            if (Array.isArray(paramType)) {
                return yield Promise.all(paramType.map((paramType, index) => {
                    return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                }));
            }
            if (paramType.type === "address") {
                return yield resolveName(resolver, value);
            }
            if (paramType.type === "tuple") {
                return yield resolveAddresses(resolver, value, paramType.components);
            }
            if (paramType.baseType === "array") {
                if (!Array.isArray(value)) {
                    return Promise.reject(logger$r.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                        argument: "value",
                        value
                    }));
                }
                return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
            }
            return value;
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter$q(this, void 0, void 0, function* () {
            // If an extra argument is given, it is overrides
            let overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            logger$r.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
                if (overrides.from) {
                    // Contracts with a Signer are from the Signer's frame-of-reference;
                    // but we allow overriding "from" if it matches the signer
                    overrides.from = resolveProperties({
                        override: resolveName(contract.signer, overrides.from),
                        signer: contract.signer.getAddress()
                    }).then((check) => __awaiter$q(this, void 0, void 0, function* () {
                        if (getAddress(check.signer) !== check.override) {
                            logger$r.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                            });
                        }
                        return check.override;
                    }));
                }
                else {
                    overrides.from = contract.signer.getAddress();
                }
            }
            else if (overrides.from) {
                overrides.from = resolveName(contract.provider, overrides.from);
                //} else {
                // Contracts without a signer can override "from", and if
                // unspecified the zero address is used
                //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            const resolved = yield resolveProperties({
                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                address: contract.resolvedAddress,
                overrides: (resolveProperties(overrides) || {})
            });
            // The ABI coded transaction
            const data = contract.interface.encodeFunctionData(fragment, resolved.args);
            const tx = {
                data: data,
                to: resolved.address
            };
            // Resolved Overrides
            const ro = resolved.overrides;
            // Populate simple overrides
            if (ro.nonce != null) {
                tx.nonce = BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
                tx.gasLimit = BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
                tx.gasPrice = BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
                tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
                tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
                tx.from = ro.from;
            }
            if (ro.type != null) {
                tx.type = ro.type;
            }
            if (ro.accessList != null) {
                tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
                // Compute the intrinsic gas cost for this transaction
                // @TODO: This is based on the yellow paper as of Petersburg; this is something
                // we may wish to parameterize in v6 as part of the Network object. Since this
                // is always a non-nil to address, we can ignore G_create, but may wish to add
                // similar logic to the ContractFactory.
                let intrinsic = 21000;
                const bytes = arrayify(data);
                for (let i = 0; i < bytes.length; i++) {
                    intrinsic += 4;
                    if (bytes[i]) {
                        intrinsic += 64;
                    }
                }
                tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
                const roValue = BigNumber.from(ro.value);
                if (!roValue.isZero() && !fragment.payable) {
                    logger$r.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: overrides.value
                    });
                }
                tx.value = roValue;
            }
            if (ro.customData) {
                tx.customData = shallowCopy(ro.customData);
            }
            if (ro.ccipReadEnabled) {
                tx.ccipReadEnabled = !!ro.ccipReadEnabled;
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            delete overrides.ccipReadEnabled;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
            if (leftovers.length) {
                logger$r.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides",
                    overrides: leftovers
                });
            }
            return tx;
        });
    }
    function buildPopulate(contract, fragment) {
        return function (...args) {
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate(contract, fragment) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$q(this, void 0, void 0, function* () {
                if (!signerOrProvider) {
                    logger$r.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "estimateGas"
                    });
                }
                const tx = yield populateTransaction(contract, fragment, args);
                return yield signerOrProvider.estimateGas(tx);
            });
        };
    }
    function addContractWait(contract, tx) {
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
            return wait(confirmations).then((receipt) => {
                receipt.events = receipt.logs.map((log) => {
                    let event = deepCopy(log);
                    let parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = (data, topics) => {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = () => { return contract.provider; };
                    event.getBlock = () => {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = () => {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = () => {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall(contract, fragment, collapseSimple) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$q(this, void 0, void 0, function* () {
                // Extract the "blockTag" override if present
                let blockTag = undefined;
                if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                    const overrides = shallowCopy(args.pop());
                    if (overrides.blockTag != null) {
                        blockTag = yield overrides.blockTag;
                    }
                    delete overrides.blockTag;
                    args.push(overrides);
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed(blockTag);
                }
                // Call a node and get the result
                const tx = yield populateTransaction(contract, fragment, args);
                const result = yield signerOrProvider.call(tx, blockTag);
                try {
                    let value = contract.interface.decodeFunctionResult(fragment, result);
                    if (collapseSimple && fragment.outputs.length === 1) {
                        value = value[0];
                    }
                    return value;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        error.address = contract.address;
                        error.args = args;
                        error.transaction = tx;
                    }
                    throw error;
                }
            });
        };
    }
    function buildSend(contract, fragment) {
        return function (...args) {
            return __awaiter$q(this, void 0, void 0, function* () {
                if (!contract.signer) {
                    logger$r.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                    });
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed();
                }
                const txRequest = yield populateTransaction(contract, fragment, args);
                const tx = yield contract.signer.sendTransaction(txRequest);
                // Tweak the tx.wait so the receipt has extra properties
                addContractWait(contract, tx);
                return tx;
            });
        };
    }
    function buildDefault(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag$1(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    class RunningEvent {
        constructor(tag, filter) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "filter", filter);
            this._listeners = [];
        }
        addListener(listener, once) {
            this._listeners.push({ listener: listener, once: once });
        }
        removeListener(listener) {
            let done = false;
            this._listeners = this._listeners.filter((item) => {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        }
        removeAllListeners() {
            this._listeners = [];
        }
        listeners() {
            return this._listeners.map((i) => i.listener);
        }
        listenerCount() {
            return this._listeners.length;
        }
        run(args) {
            const listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter((item) => {
                const argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(() => {
                    item.listener.apply(this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        }
        prepareEvent(event) {
        }
        // Returns the array that will be applied to an emit
        getEmit(event) {
            return [event];
        }
    }
    class ErrorRunningEvent extends RunningEvent {
        constructor() {
            super("error", null);
        }
    }
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    class FragmentRunningEvent extends RunningEvent {
        constructor(address, contractInterface, fragment, topics) {
            const filter = {
                address: address
            };
            let topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger$r.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            super(getEventTag$1(filter), filter);
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
            defineReadOnly(this, "fragment", fragment);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = (data, topics) => {
                return this.interface.decodeEventLog(this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        }
        getEmit(event) {
            const errors = checkResultErrors(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            const args = (event.args || []).slice();
            args.push(event);
            return args;
        }
    }
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    class WildcardRunningEvent extends RunningEvent {
        constructor(address, contractInterface) {
            super("*", { address: address });
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            try {
                const parsed = this.interface.parseLog(event);
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
                event.decode = (data, topics) => {
                    return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
                };
                event.args = parsed.args;
            }
            catch (error) {
                // No matching event
            }
        }
    }
    class BaseContract {
        constructor(addressOrName, contractInterface, signerOrProvider) {
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                defineReadOnly(this, "provider", null);
                defineReadOnly(this, "signer", null);
            }
            else if (Signer.isSigner(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider.provider || null);
                defineReadOnly(this, "signer", signerOrProvider);
            }
            else if (Provider.isProvider(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider);
                defineReadOnly(this, "signer", null);
            }
            else {
                logger$r.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            defineReadOnly(this, "callStatic", {});
            defineReadOnly(this, "estimateGas", {});
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "populateTransaction", {});
            defineReadOnly(this, "filters", {});
            {
                const uniqueFilters = {};
                Object.keys(this.interface.events).forEach((eventSignature) => {
                    const event = this.interface.events[eventSignature];
                    defineReadOnly(this.filters, eventSignature, (...args) => {
                        return {
                            address: this.address,
                            topics: this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters[event.name]) {
                        uniqueFilters[event.name] = [];
                    }
                    uniqueFilters[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters).forEach((name) => {
                    const filters = uniqueFilters[name];
                    if (filters.length === 1) {
                        defineReadOnly(this.filters, name, this.filters[filters[0]]);
                    }
                    else {
                        logger$r.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                    }
                });
            }
            defineReadOnly(this, "_runningEvents", {});
            defineReadOnly(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger$r.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
                defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger$r.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            // Swallow bad ENS names to prevent Unhandled Exceptions
            this.resolvedAddress.catch((e) => { });
            const uniqueNames = {};
            const uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach((signature) => {
                const fragment = this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger$r.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    const name = fragment.name;
                    if (!uniqueNames[`%${name}`]) {
                        uniqueNames[`%${name}`] = [];
                    }
                    uniqueNames[`%${name}`].push(signature);
                }
                if (this[signature] == null) {
                    defineReadOnly(this, signature, buildDefault(this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (this.functions[signature] == null) {
                    defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
                }
                if (this.callStatic[signature] == null) {
                    defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
                }
                if (this.populateTransaction[signature] == null) {
                    defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
                }
                if (this.estimateGas[signature] == null) {
                    defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach((name) => {
                // Ambiguous names to not get attached as bare names
                const signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                const signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (this[name] == null) {
                        defineReadOnly(this, name, this[signature]);
                    }
                }
                catch (e) { }
                if (this.functions[name] == null) {
                    defineReadOnly(this.functions, name, this.functions[signature]);
                }
                if (this.callStatic[name] == null) {
                    defineReadOnly(this.callStatic, name, this.callStatic[signature]);
                }
                if (this.populateTransaction[name] == null) {
                    defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
                }
                if (this.estimateGas[name] == null) {
                    defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
                }
            });
        }
        static getContractAddress(transaction) {
            return getContractAddress(transaction);
        }
        static getInterface(contractInterface) {
            if (Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new Interface(contractInterface);
        }
        // @TODO: Allow timeout?
        deployed() {
            return this._deployed();
        }
        _deployed(blockTag) {
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(() => {
                        return this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                        if (code === "0x") {
                            logger$r.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: this.address,
                                operation: "getDeployed"
                            });
                        }
                        return this;
                    });
                }
            }
            return this._deployedPromise;
        }
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        fallback(overrides) {
            if (!this.signer) {
                logger$r.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            const tx = shallowCopy(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(() => {
                return this.signer.sendTransaction(tx);
            });
        }
        // Reconnect to a different signer or provider
        connect(signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
            }
            const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        }
        // Re-attach to a different on-chain instance of this contract
        attach(addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        }
        static isIndexed(value) {
            return Indexed.isIndexed(value);
        }
        _normalizeRunningEvent(runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        }
        _getRunningEvent(eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                const fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    const topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    const fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                const filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        _checkRunningEvents(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                const emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        }
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        _wrapEvent(runningEvent, log, listener) {
            const event = deepCopy(log);
            event.removeListener = () => {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                this._checkRunningEvents(runningEvent);
            };
            event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
            event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        }
        _addEventListener(runningEvent, listener, once) {
            if (!this.provider) {
                logger$r.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                const wrappedEmit = (log) => {
                    let event = this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            const args = runningEvent.getEmit(event);
                            this.emit(runningEvent.filter, ...args);
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        }
        queryFilter(event, fromBlockOrBlockhash, toBlock) {
            const runningEvent = this._getRunningEvent(event);
            const filter = shallowCopy(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && isHexString(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger$r.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then((logs) => {
                return logs.map((log) => this._wrapEvent(runningEvent, log, null));
            });
        }
        on(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        }
        once(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        }
        emit(eventName, ...args) {
            if (!this.provider) {
                return false;
            }
            const runningEvent = this._getRunningEvent(eventName);
            const result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        }
        listenerCount(eventName) {
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce((accum, key) => {
                    return accum + this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        }
        listeners(eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                const result = [];
                for (let tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach((listener) => {
                        result.push(listener);
                    });
                }
                return result;
            }
            return this._getRunningEvent(eventName).listeners();
        }
        removeAllListeners(eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (const tag in this._runningEvents) {
                    const runningEvent = this._runningEvents[tag];
                    runningEvent.removeAllListeners();
                    this._checkRunningEvents(runningEvent);
                }
                return this;
            }
            // Delete any listeners
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        }
        off(eventName, listener) {
            if (!this.provider) {
                return this;
            }
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        }
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
    }
    class Contract extends BaseContract {
    }
    class ContractFactory {
        constructor(contractInterface, bytecode, signer) {
            let bytecodeHex = null;
            if (typeof (bytecode) === "string") {
                bytecodeHex = bytecode;
            }
            else if (isBytes(bytecode)) {
                bytecodeHex = hexlify(bytecode);
            }
            else if (bytecode && typeof (bytecode.object) === "string") {
                // Allow the bytecode object from the Solidity compiler
                bytecodeHex = bytecode.object;
            }
            else {
                // Crash in the next verification step
                bytecodeHex = "!";
            }
            // Make sure it is 0x prefixed
            if (bytecodeHex.substring(0, 2) !== "0x") {
                bytecodeHex = "0x" + bytecodeHex;
            }
            // Make sure the final result is valid bytecode
            if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {
                logger$r.throwArgumentError("invalid bytecode", "bytecode", bytecode);
            }
            // If we have a signer, make sure it is valid
            if (signer && !Signer.isSigner(signer)) {
                logger$r.throwArgumentError("invalid signer", "signer", signer);
            }
            defineReadOnly(this, "bytecode", bytecodeHex);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            defineReadOnly(this, "signer", signer || null);
        }
        // @TODO: Future; rename to populateTransaction?
        getDeployTransaction(...args) {
            let tx = {};
            // If we have 1 additional argument, we allow transaction overrides
            if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                tx = shallowCopy(args.pop());
                for (const key in tx) {
                    if (!allowedTransactionKeys$1[key]) {
                        throw new Error("unknown transaction override " + key);
                    }
                }
            }
            // Do not allow these to be overridden in a deployment transaction
            ["data", "from", "to"].forEach((key) => {
                if (tx[key] == null) {
                    return;
                }
                logger$r.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            if (tx.value) {
                const value = BigNumber.from(tx.value);
                if (!value.isZero() && !this.interface.deploy.payable) {
                    logger$r.throwError("non-payable constructor cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: tx.value
                    });
                }
            }
            // Make sure the call matches the constructor signature
            logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
            // Set the data to the bytecode + the encoded constructor arguments
            tx.data = hexlify(concat([
                this.bytecode,
                this.interface.encodeDeploy(args)
            ]));
            return tx;
        }
        deploy(...args) {
            return __awaiter$q(this, void 0, void 0, function* () {
                let overrides = {};
                // If 1 extra parameter was passed in, it contains overrides
                if (args.length === this.interface.deploy.inputs.length + 1) {
                    overrides = args.pop();
                }
                // Make sure the call matches the constructor signature
                logger$r.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor");
                // Resolve ENS names and promises in the arguments
                const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
                params.push(overrides);
                // Get the deployment transaction (with optional overrides)
                const unsignedTx = this.getDeployTransaction(...params);
                // Send the deployment transaction
                const tx = yield this.signer.sendTransaction(unsignedTx);
                const address = getStatic(this.constructor, "getContractAddress")(tx);
                const contract = getStatic(this.constructor, "getContract")(address, this.interface, this.signer);
                // Add the modified wait that wraps events
                addContractWait(contract, tx);
                defineReadOnly(contract, "deployTransaction", tx);
                return contract;
            });
        }
        attach(address) {
            return (this.constructor).getContract(address, this.interface, this.signer);
        }
        connect(signer) {
            return new (this.constructor)(this.interface, this.bytecode, signer);
        }
        static fromSolidity(compilerOutput, signer) {
            if (compilerOutput == null) {
                logger$r.throwError("missing compiler output", Logger.errors.MISSING_ARGUMENT, { argument: "compilerOutput" });
            }
            if (typeof (compilerOutput) === "string") {
                compilerOutput = JSON.parse(compilerOutput);
            }
            const abi = compilerOutput.abi;
            let bytecode = null;
            if (compilerOutput.bytecode) {
                bytecode = compilerOutput.bytecode;
            }
            else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
                bytecode = compilerOutput.evm.bytecode;
            }
            return new this(abi, bytecode, signer);
        }
        static getInterface(contractInterface) {
            return Contract.getInterface(contractInterface);
        }
        static getContractAddress(tx) {
            return getContractAddress(tx);
        }
        static getContract(address, contractInterface, signer) {
            return new Contract(address, contractInterface, signer);
        }
    }

    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    class BaseX {
        constructor(alphabet) {
            defineReadOnly(this, "alphabet", alphabet);
            defineReadOnly(this, "base", alphabet.length);
            defineReadOnly(this, "_alphabetMap", {});
            defineReadOnly(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (let i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        encode(value) {
            let source = arrayify(value);
            if (source.length === 0) {
                return "";
            }
            let digits = [0];
            for (let i = 0; i < source.length; ++i) {
                let carry = source[i];
                for (let j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            let string = "";
            // deal with leading zeros
            for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (let q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        }
        decode(value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            let bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (let i = 0; i < value.length; i++) {
                let byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                let carry = byte;
                for (let j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return arrayify(new Uint8Array(bytes.reverse()));
        }
    }
    new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
    //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

    var SupportedAlgorithm;
    (function (SupportedAlgorithm) {
        SupportedAlgorithm["sha256"] = "sha256";
        SupportedAlgorithm["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));

    const version$b = "sha2/5.6.1";

    const logger$q = new Logger(version$b);
    function ripemd160(data) {
        return "0x" + (hash_1.ripemd160().update(arrayify(data)).digest("hex"));
    }
    function sha256$1(data) {
        return "0x" + (hash_1.sha256().update(arrayify(data)).digest("hex"));
    }
    function sha512(data) {
        return "0x" + (hash_1.sha512().update(arrayify(data)).digest("hex"));
    }
    function computeHmac(algorithm, key, data) {
        if (!SupportedAlgorithm[algorithm]) {
            logger$q.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash_1.hmac(hash_1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
    }

    function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
        password = arrayify(password);
        salt = arrayify(salt);
        let hLen;
        let l = 1;
        const DK = new Uint8Array(keylen);
        const block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        let r;
        let T;
        for (let i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            let U = arrayify(computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (let j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = arrayify(computeHmac(hashAlgorithm, password, U));
                for (let k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            const destPos = (i - 1) * hLen;
            const len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set(arrayify(T).slice(0, len), destPos);
        }
        return hexlify(DK);
    }

    const version$a = "wordlists/5.6.1";

    const logger$p = new Logger(version$a);
    class Wordlist {
        constructor(locale) {
            logger$p.checkAbstract(new.target, Wordlist);
            defineReadOnly(this, "locale", locale);
        }
        // Subclasses may override this
        split(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
        }
        // Subclasses may override this
        join(words) {
            return words.join(" ");
        }
        static check(wordlist) {
            const words = [];
            for (let i = 0; i < 2048; i++) {
                const word = wordlist.getWord(i);
                /* istanbul ignore if */
                if (i !== wordlist.getWordIndex(word)) {
                    return "0x";
                }
                words.push(word);
            }
            return id(words.join("\n") + "\n");
        }
        static register(lang, name) {
            if (!name) {
                name = lang.locale;
            }
        }
    }

    const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    let wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    class LangEn extends Wordlist {
        constructor() {
            super("en");
        }
        getWord(index) {
            loadWords(this);
            return wordlist[index];
        }
        getWordIndex(word) {
            loadWords(this);
            return wordlist.indexOf(word);
        }
    }
    const langEn = new LangEn();
    Wordlist.register(langEn);

    const wordlists = {
        en: langEn
    };

    const version$9 = "hdnode/5.6.2";

    const logger$o = new Logger(version$9);
    const N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    const MasterSecret = toUtf8Bytes("Bitcoin seed");
    const HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return hexZeroPad(hexlify(value), 32);
    }
    function base58check(data) {
        return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            const words = wordlists[wordlist];
            if (words == null) {
                logger$o.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    const _constructorGuard$1 = {};
    const defaultPath = "m/44'/60'/0'/0/0";
    class HDNode {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard$1) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                const signingKey = new SigningKey(privateKey);
                defineReadOnly(this, "privateKey", signingKey.privateKey);
                defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                defineReadOnly(this, "privateKey", null);
                defineReadOnly(this, "publicKey", hexlify(publicKey));
            }
            defineReadOnly(this, "parentFingerprint", parentFingerprint);
            defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$1(this.publicKey)), 0, 4));
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            defineReadOnly(this, "chainCode", chainCode);
            defineReadOnly(this, "index", index);
            defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                defineReadOnly(this, "mnemonic", mnemonicOrPath);
                defineReadOnly(this, "path", mnemonicOrPath.path);
            }
        }
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
                throw new Error("Depth too large!");
            }
            return base58check(concat([
                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                hexlify(this.depth),
                this.parentFingerprint,
                hexZeroPad(hexlify(this.index), 4),
                this.chainCode,
                ((this.privateKey != null) ? concat(["0x00", this.privateKey]) : this.publicKey),
            ]));
        }
        neuter() {
            return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        }
        _derive(index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            const data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set(arrayify(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set(arrayify(this.publicKey));
            }
            // Data += ser_32(i)
            for (let i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            // The private key
            let ki = null;
            // The public key
            let Ki = null;
            if (this.privateKey) {
                ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
            }
            else {
                const ek = new SigningKey(hexlify(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            let mnemonicOrPath = path;
            const srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        }
        derivePath(path) {
            const components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            let result = this;
            for (let i = 0; i < components.length; i++) {
                const component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    const index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    const index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        }
        static _fromSeed(seed, mnemonic) {
            const seedArray = arrayify(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        }
        static fromMnemonic(mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        }
        static fromSeed(seed) {
            return HDNode._fromSeed(seed, null);
        }
        static fromExtendedKey(extendedKey) {
            const bytes = Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            const depth = bytes[4];
            const parentFingerprint = hexlify(bytes.slice(5, 9));
            const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = hexlify(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (hexlify(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard$1, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard$1, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger$o.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
    }
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
        return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger$o.checkNormalize();
        const words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
        let offset = 0;
        for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (let bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        const entropyBits = 32 * words.length / 3;
        const checksumBits = words.length / 3;
        const checksumMask = getUpperMask(checksumBits);
        const checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return hexlify(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = arrayify(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        const indices = [0];
        let remainingBits = 11;
        for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        const checksumBits = entropy.length / 4;
        const checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }
    function isValidMnemonic(mnemonic, wordlist) {
        try {
            mnemonicToEntropy(mnemonic, wordlist);
            return true;
        }
        catch (error) { }
        return false;
    }
    function getAccountPath(index) {
        if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
            logger$o.throwArgumentError("invalid account index", "index", index);
        }
        return `m/44'/60'/${index}'/0/0`;
    }

    const version$8 = "random/5.6.1";

    const logger$n = new Logger(version$8);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal();
    let crypto = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto || !crypto.getRandomValues) {
        logger$n.warn("WARNING: Missing strong random number source");
        crypto = {
            getRandomValues: function (buffer) {
                return logger$n.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger$n.throwArgumentError("invalid length", "length", length);
        }
        const result = new Uint8Array(length);
        crypto.getRandomValues(result);
        return arrayify(result);
    }

    function shuffled(array) {
        array = array.slice();
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            const tmp = array[i];
            array[i] = array[j];
            array[j] = tmp;
        }
        return array;
    }

    var aesJs = createCommonjsModule$1(function (module, exports) {

    (function(root) {

        function checkInt(value) {
            return (parseInt(value) === value);
        }

        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }

            return true;
        }

        function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }

                return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }

                return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
        }

        function createArray(length) {
            return new Uint8Array(length);
        }

        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }



        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                    // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return coerceArray(result);
            }

            function fromBytes(bytes) {
                var result = [], i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }

                return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();

        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();


        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14};

        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }

        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });

            this._prepare();
        };


        AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;

                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];

                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));

                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }

                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        };

        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };

        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };


        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
        };

        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);

                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }

                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);

                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }

                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
        };

        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);

                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
        };

        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);

            } else {
                this.setBytes(initialValue);
            }
        };

        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }

            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        };

        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
        };

        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };


        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
                counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


        ///////////////////////
        // Padding

        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }

        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }

        ///////////////////////
        // Exporting


        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },

            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },

            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },

            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };


        // node.js
        {
            module.exports = aesjs;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }


    })();
    });

    const version$7 = "json-wallets/5.6.1";

    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return arrayify(hexString);
    }
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
        }
        return arrayify(password);
    }
    function searchPath(object, path) {
        let currentChild = object;
        const comps = path.toLowerCase().split('/');
        for (let i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        const bytes = arrayify(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        const value = hexlify(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }

    const logger$m = new Logger(version$7);
    class CrowdsaleAccount extends Description {
        isCrowdsaleAccount(value) {
            return !!(value && value._isCrowdsaleAccount);
        }
    }
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt$1(json, password) {
        const data = JSON.parse(json);
        password = getPassword(password);
        // Ethereum Address
        const ethaddr = getAddress(searchPath(data, "ethaddr"));
        // Encrypted Seed
        const encseed = looseArrayify(searchPath(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger$m.throwArgumentError("invalid encseed", "json", json);
        }
        const key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
        const iv = encseed.slice(0, 16);
        const encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        const aesCbc = new aesJs.ModeOfOperation.cbc(key, iv);
        const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        let seedHex = "";
        for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        const seedHexBytes = toUtf8Bytes(seedHex);
        const privateKey = keccak256$1(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }

    function isCrowdsaleWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    function isKeystoreWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }
    //export function isJsonWallet(json: string): boolean {
    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
    //}
    function getJsonWalletAddress(json) {
        if (isCrowdsaleWallet(json)) {
            try {
                return getAddress(JSON.parse(json).ethaddr);
            }
            catch (error) {
                return null;
            }
        }
        if (isKeystoreWallet(json)) {
            try {
                return getAddress(JSON.parse(json).address);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }

    var scrypt = createCommonjsModule$1(function (module, exports) {

    (function(root) {
        const MAX_VALUE = 0x7fffffff;

        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }

                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }

                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }

                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;

                    off += 64;
                    len -= 64;
                }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }

        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
        }

        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }

        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i];
            }
        }

        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }

        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }

            return true;
        }

        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }

        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }

                let steps;

                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;

                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;

                        // Fall through

                    case 1:

                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }

                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;

                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;

                        // Fall through

                    case 2:

                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }

                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;

                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }

                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }

                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }

                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }

                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            };

            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
        }

        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };

        // node.js
        {
           module.exports = lib;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }

    })();
    });

    var scrypt$1 = scrypt;

    var __awaiter$p = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$l = new Logger(version$7);
    // Exported Types
    function hasMnemonic$1(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    class KeystoreAccount extends Description {
        isKeystoreAccount(value) {
            return !!(value && value._isKeystoreAccount);
        }
    }
    function _decrypt(data, key, ciphertext) {
        const cipher = searchPath(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(key, counter);
            return arrayify(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
        const computedMAC = hexlify(keccak256$1(concat([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger$l.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        const mnemonicKey = key.slice(32, 64);
        const address = computeAddress(privateKey);
        if (data.address) {
            let check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if (getAddress(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        const account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: hexlify(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if (searchPath(data, "x-ethers/version") === "0.1") {
            const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
            const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
            const mnemonicCounter = new aesJs.Counter(mnemonicIv);
            const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const path = searchPath(data, "x-ethers/path") || defaultPath;
            const locale = searchPath(data, "x-ethers/locale") || "en";
            const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                const mnemonic = entropyToMnemonic(entropy, locale);
                const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        const passwordBytes = getPassword(password);
        const kdf = searchPath(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            const throwError = function (name, value) {
                return logger$l.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
                const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
                const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                let prfFunc = null;
                const prf = searchPath(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger$l.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        const data = JSON.parse(json);
        const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt$1.syncScrypt);
        return _getAccount(data, key);
    }
    function decrypt(json, password, progressCallback) {
        return __awaiter$p(this, void 0, void 0, function* () {
            const data = JSON.parse(json);
            const key = yield _computeKdfKey(data, password, pbkdf2, scrypt$1.scrypt, progressCallback);
            return _getAccount(data, key);
        });
    }
    function encrypt(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if (getAddress(account.address) !== computeAddress(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic$1(account)) {
                const mnemonic = account.mnemonic;
                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        const privateKey = arrayify(account.privateKey);
        const passwordBytes = getPassword(password);
        let entropy = null;
        let path = null;
        let locale = null;
        if (hasMnemonic$1(account)) {
            const srcMnemonic = account.mnemonic;
            entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        let client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        let salt = null;
        if (options.salt) {
            salt = arrayify(options.salt);
        }
        else {
            salt = randomBytes(32);
        }
        // Override initialization vector
        let iv = null;
        if (options.iv) {
            iv = arrayify(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = randomBytes(16);
        }
        // Override the uuid
        let uuidRandom = null;
        if (options.uuid) {
            uuidRandom = arrayify(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = randomBytes(16);
        }
        // Override the scrypt password-based key derivation function parameters
        let N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt$1.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
            key = arrayify(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            const derivedKey = key.slice(0, 16);
            const macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            const mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = arrayify(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            const mac = keccak256$1(concat([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            const data = {
                address: account.address.substring(2).toLowerCase(),
                id: uuidV4(uuidRandom),
                version: 3,
                Crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: hexlify(iv).substring(2),
                    },
                    ciphertext: hexlify(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: hexlify(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                const mnemonicIv = randomBytes(16);
                const mnemonicCounter = new aesJs.Counter(mnemonicIv);
                const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
                const now = new Date();
                const timestamp = (now.getUTCFullYear() + "-" +
                    zpad(now.getUTCMonth() + 1, 2) + "-" +
                    zpad(now.getUTCDate(), 2) + "T" +
                    zpad(now.getUTCHours(), 2) + "-" +
                    zpad(now.getUTCMinutes(), 2) + "-" +
                    zpad(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: hexlify(mnemonicIv).substring(2),
                    mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }

    function decryptJsonWallet(json, password, progressCallback) {
        if (isCrowdsaleWallet(json)) {
            if (progressCallback) {
                progressCallback(0);
            }
            const account = decrypt$1(json, password);
            if (progressCallback) {
                progressCallback(1);
            }
            return Promise.resolve(account);
        }
        if (isKeystoreWallet(json)) {
            return decrypt(json, password, progressCallback);
        }
        return Promise.reject(new Error("invalid JSON wallet"));
    }
    function decryptJsonWalletSync(json, password) {
        if (isCrowdsaleWallet(json)) {
            return decrypt$1(json, password);
        }
        if (isKeystoreWallet(json)) {
            return decryptSync(json, password);
        }
        throw new Error("invalid JSON wallet");
    }

    const version$6 = "wallet/5.6.2";

    var __awaiter$o = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$k = new Logger(version$6);
    function isAccount(value) {
        return (value != null && isHexString(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        const mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    class Wallet extends Signer {
        constructor(privateKey, provider) {
            super();
            if (isAccount(privateKey)) {
                const signingKey = new SigningKey(privateKey.privateKey);
                defineReadOnly(this, "_signingKey", () => signingKey);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
                if (this.address !== getAddress(privateKey.address)) {
                    logger$k.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    const srcMnemonic = privateKey.mnemonic;
                    defineReadOnly(this, "_mnemonic", () => ({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || defaultPath,
                        locale: srcMnemonic.locale || "en"
                    }));
                    const mnemonic = this.mnemonic;
                    const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if (computeAddress(node.privateKey) !== this.address) {
                        logger$k.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    defineReadOnly(this, "_mnemonic", () => null);
                }
            }
            else {
                if (SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger$k.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    defineReadOnly(this, "_signingKey", () => privateKey);
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    const signingKey = new SigningKey(privateKey);
                    defineReadOnly(this, "_signingKey", () => signingKey);
                }
                defineReadOnly(this, "_mnemonic", () => null);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !Provider.isProvider(provider)) {
                logger$k.throwArgumentError("invalid provider", "provider", provider);
            }
            defineReadOnly(this, "provider", provider || null);
        }
        get mnemonic() { return this._mnemonic(); }
        get privateKey() { return this._signingKey().privateKey; }
        get publicKey() { return this._signingKey().publicKey; }
        getAddress() {
            return Promise.resolve(this.address);
        }
        connect(provider) {
            return new Wallet(this, provider);
        }
        signTransaction(transaction) {
            return resolveProperties(transaction).then((tx) => {
                if (tx.from != null) {
                    if (getAddress(tx.from) !== this.address) {
                        logger$k.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                const signature = this._signingKey().signDigest(keccak256$1(serialize$1(tx)));
                return serialize$1(tx, signature);
            });
        }
        signMessage(message) {
            return __awaiter$o(this, void 0, void 0, function* () {
                return joinSignature(this._signingKey().signDigest(hashMessage(message)));
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$o(this, void 0, void 0, function* () {
                // Populate any ENS names
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    if (this.provider == null) {
                        logger$k.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName",
                            value: name
                        });
                    }
                    return this.provider.resolveName(name);
                });
                return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
            });
        }
        encrypt(password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return encrypt(this, password, options, progressCallback);
        }
        /**
         *  Static methods to create Wallet instances.
         */
        static createRandom(options) {
            let entropy = randomBytes(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = arrayify(hexDataSlice(keccak256$1(concat([entropy, options.extraEntropy])), 0, 16));
            }
            const mnemonic = entropyToMnemonic(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        }
        static fromEncryptedJson(json, password, progressCallback) {
            return decryptJsonWallet(json, password, progressCallback).then((account) => {
                return new Wallet(account);
            });
        }
        static fromEncryptedJsonSync(json, password) {
            return new Wallet(decryptJsonWalletSync(json, password));
        }
        static fromMnemonic(mnemonic, path, wordlist) {
            if (!path) {
                path = defaultPath;
            }
            return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        }
    }
    function verifyMessage(message, signature) {
        return recoverAddress(hashMessage(message), signature);
    }
    function verifyTypedData(domain, types, value, signature) {
        return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
    }

    const version$5 = "networks/5.6.4";

    const logger$j = new Logger(version$5);
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        const func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            const providerList = [];
            if (providers.InfuraProvider && options.infura !== "-") {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider && options.etherscan !== "-") {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider && options.alchemy !== "-") {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider && options.pocket !== "-") {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                const skip = ["goerli", "ropsten", "rinkeby"];
                try {
                    const provider = new providers.PocketProvider(network, options.pocket);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider && options.cloudflare !== "-") {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providers.AnkrProvider && options.ankr !== "-") {
                try {
                    const skip = ["ropsten"];
                    const provider = new providers.AnkrProvider(network, options.ankr);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                let quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        const func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    const homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    const ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    const classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    const networks = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
            chainId: 137,
            name: "matic",
            _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
            chainId: 10,
            name: "optimism",
            _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (const name in networks) {
                const standard = networks[name];
                if (standard.chainId === network) {
                    return {
                        name: standard.name,
                        chainId: standard.chainId,
                        ensAddress: (standard.ensAddress || null),
                        _defaultProvider: (standard._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            const standard = networks[network];
            if (standard == null) {
                return null;
            }
            return {
                name: standard.name,
                chainId: standard.chainId,
                ensAddress: standard.ensAddress,
                _defaultProvider: (standard._defaultProvider || null)
            };
        }
        const standard = networks[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger$j.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger$j.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        let defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }

    function decode$2(textData) {
        textData = atob(textData);
        const data = [];
        for (let i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return arrayify(data);
    }
    function encode$2(data) {
        data = arrayify(data);
        let textData = "";
        for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }

    var index$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        decode: decode$2,
        encode: encode$2
    });

    const version$4 = "web/5.6.1";

    var __awaiter$n = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function getUrl(href, options) {
        return __awaiter$n(this, void 0, void 0, function* () {
            if (options == null) {
                options = {};
            }
            const request = {
                method: (options.method || "GET"),
                headers: (options.headers || {}),
                body: (options.body || undefined),
            };
            if (options.skipFetchSetup !== true) {
                request.mode = "cors"; // no-cors, cors, *same-origin
                request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                request.credentials = "same-origin"; // include, *same-origin, omit
                request.redirect = "follow"; // manual, *follow, error
                request.referrer = "client"; // no-referrer, *client
            }
            const response = yield fetch(href, request);
            const body = yield response.arrayBuffer();
            const headers = {};
            if (response.headers.forEach) {
                response.headers.forEach((value, key) => {
                    headers[key.toLowerCase()] = value;
                });
            }
            else {
                ((response.headers).keys)().forEach((key) => {
                    headers[key.toLowerCase()] = response.headers.get(key);
                });
            }
            return {
                headers: headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                body: arrayify(new Uint8Array(body)),
            };
        });
    }

    var __awaiter$m = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$i = new Logger(version$4);
    function staller(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if (isBytesLike(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return toUtf8String(value);
                }
                catch (error) { }
            }
            return hexlify(value);
        }
        return value;
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger$i.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger$i.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        const errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
        const headers = {};
        let url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        const options = {
            method: "GET",
        };
        let allow304 = false;
        let timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger$i.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (const key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger$i.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                const authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + encode$2(toUtf8Bytes(authorization))
                };
            }
            if (connection.skipFetchSetup != null) {
                options.skipFetchSetup = !!connection.skipFetchSetup;
            }
        }
        const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
        const dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                const response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": dataMatch[1] },
                    body: decode$2(dataMatch[2])
                };
                let result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        const flatHeaders = {};
        Object.keys(headers).forEach((key) => {
            const header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        const runningTimeout = (function () {
            let timer = null;
            const promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(() => {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger$i.makeError("timeout", Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            const cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise, cancel };
        })();
        const runningFetch = (function () {
            return __awaiter$m(this, void 0, void 0, function* () {
                for (let attempt = 0; attempt < attemptLimit; attempt++) {
                    let response = null;
                    try {
                        response = yield getUrl(url, options);
                        if (attempt < attemptLimit) {
                            if (response.statusCode === 301 || response.statusCode === 302) {
                                // Redirection; for now we only support absolute locataions
                                const location = response.headers.location || "";
                                if (options.method === "GET" && location.match(/^https:/)) {
                                    url = response.headers.location;
                                    continue;
                                }
                            }
                            else if (response.statusCode === 429) {
                                // Exponential back-off throttling
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    let stall = 0;
                                    const retryAfter = response.headers["retry-after"];
                                    if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                        stall = parseInt(retryAfter) * 1000;
                                    }
                                    else {
                                        stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    }
                                    //console.log("Stalling 429");
                                    yield staller(stall);
                                    continue;
                                }
                            }
                        }
                    }
                    catch (error) {
                        response = error.response;
                        if (response == null) {
                            runningTimeout.cancel();
                            logger$i.throwError("missing response", Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                serverError: error,
                                url: url
                            });
                        }
                    }
                    let body = response.body;
                    if (allow304 && response.statusCode === 304) {
                        body = null;
                    }
                    else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                        runningTimeout.cancel();
                        logger$i.throwError("bad response", Logger.errors.SERVER_ERROR, {
                            status: response.statusCode,
                            headers: response.headers,
                            body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url: url
                        });
                    }
                    if (processFunc) {
                        try {
                            const result = yield processFunc(body, response);
                            runningTimeout.cancel();
                            return result;
                        }
                        catch (error) {
                            // Allow the processFunc to trigger a throttle
                            if (error.throttleRetry && attempt < attemptLimit) {
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    //console.log("Stalling callback");
                                    yield staller(timeout);
                                    continue;
                                }
                            }
                            runningTimeout.cancel();
                            logger$i.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                                body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                        }
                    }
                    runningTimeout.cancel();
                    // If we had a processFunc, it either returned a T or threw above.
                    // The "body" is now a Uint8Array.
                    return body;
                }
                return logger$i.throwError("failed response", Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    function fetchJson(connection, json, processFunc) {
        let processJsonFunc = (value, response) => {
            let result = null;
            if (value != null) {
                try {
                    result = JSON.parse(toUtf8String(value));
                }
                catch (error) {
                    logger$i.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        let body = null;
        if (json != null) {
            body = toUtf8Bytes(json);
            // Create a connection with the content-type set for JSON
            const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
            if (updated.headers) {
                const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
                if (!hasContentType) {
                    updated.headers = shallowCopy(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = shallowCopy(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            let timer = null;
            let done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            const cancel = () => {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(() => {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            const retryLimit = options.retryLimit;
            let attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }

    var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    // pre-compute lookup table
    var ALPHABET_MAP = {};
    for (var z = 0; z < ALPHABET.length; z++) {
      var x = ALPHABET.charAt(z);

      if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
      ALPHABET_MAP[x] = z;
    }

    function polymodStep (pre) {
      var b = pre >> 25;
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }

    function prefixChk (prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

        chk = polymodStep(chk) ^ (c >> 5);
      }
      chk = polymodStep(chk);

      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
      }
      return chk
    }

    function encode$1 (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

      prefix = prefix.toLowerCase();

      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === 'string') throw new Error(chk)

      var result = prefix + '1';
      for (var i = 0; i < words.length; ++i) {
        var x = words[i];
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
      }

      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;

      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f;
        result += ALPHABET.charAt(v);
      }

      return result
    }

    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'

      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered;

      var split = str.lastIndexOf('1');
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str

      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return 'Data too short'

      var chk = prefixChk(prefix);
      if (typeof chk === 'string') return chk

      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v;

        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v);
      }

      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }

    function decodeUnsafe () {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res
    }

    function decode$1 (str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res

      throw new Error(res)
    }

    function convert$1 (data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;

      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;

        while (bits >= outBits) {
          bits -= outBits;
          result.push((value >> bits) & maxV);
        }
      }

      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV);
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }

      return result
    }

    function toWordsUnsafe (bytes) {
      var res = convert$1(bytes, 8, 5, true);
      if (Array.isArray(res)) return res
    }

    function toWords (bytes) {
      var res = convert$1(bytes, 8, 5, true);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    function fromWordsUnsafe (words) {
      var res = convert$1(words, 5, 8, false);
      if (Array.isArray(res)) return res
    }

    function fromWords (words) {
      var res = convert$1(words, 5, 8, false);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    var bech32 = {
      decodeUnsafe: decodeUnsafe,
      decode: decode$1,
      encode: encode$1,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    };

    var bech32$1 = bech32;

    const version$3 = "providers/5.6.8";

    const logger$h = new Logger(version$3);
    class Formatter {
        constructor() {
            this.formats = this.getDefaultFormats();
        }
        getDefaultFormats() {
            const formats = ({});
            const address = this.address.bind(this);
            const bigNumber = this.bigNumber.bind(this);
            const blockTag = this.blockTag.bind(this);
            const data = this.data.bind(this);
            const hash = this.hash.bind(this);
            const hex = this.hex.bind(this);
            const number = this.number.bind(this);
            const type = this.type.bind(this);
            const strictData = (v) => { return this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: Formatter.allowNull(hash),
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: Formatter.allowNull(address),
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        }
        accessList(accessList) {
            return accessListify(accessList || []);
        }
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        number(number) {
            if (number === "0x") {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        type(number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        // Strict! Used on input.
        bigNumber(value) {
            return BigNumber.from(value);
        }
        // Requires a boolean, "true" or  "false"; returns a boolean
        boolean(value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        }
        hex(value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexString(value)) {
                    return value.toLowerCase();
                }
            }
            return logger$h.throwArgumentError("invalid hash", "value", value);
        }
        data(value, strict) {
            const result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        }
        // Requires an address
        // Strict! Used on input.
        address(value) {
            return getAddress(value);
        }
        callAddress(value) {
            if (!isHexString(value, 32)) {
                return null;
            }
            const address = getAddress(hexDataSlice(value, 12));
            return (address === AddressZero) ? null : address;
        }
        contractAddress(value) {
            return getContractAddress(value);
        }
        // Strict! Used on input.
        blockTag(blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            if (blockTag === "latest" || blockTag === "pending") {
                return blockTag;
            }
            if (typeof (blockTag) === "number" || isHexString(blockTag)) {
                return hexValue(blockTag);
            }
            throw new Error("invalid blockTag");
        }
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        hash(value, strict) {
            const result = this.hex(value, strict);
            if (hexDataLength(result) !== 32) {
                return logger$h.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        }
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        difficulty(value) {
            if (value == null) {
                return null;
            }
            const v = BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        }
        uint256(value) {
            if (!isHexString(value)) {
                throw new Error("invalid uint256");
            }
            return hexZeroPad(value, 32);
        }
        _block(value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            const result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));
            return result;
        }
        block(value) {
            return this._block(value, this.formats.block);
        }
        blockWithTransactions(value) {
            return this._block(value, this.formats.blockWithTransactions);
        }
        // Strict! Used on input.
        transactionRequest(value) {
            return Formatter.check(this.formats.transactionRequest, value);
        }
        transactionResponse(transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            const result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                let chainId = transaction.chainId;
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                let chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        }
        transaction(value) {
            return parse(value);
        }
        receiptLog(value) {
            return Formatter.check(this.formats.receiptLog, value);
        }
        receipt(value) {
            const result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    const value = BigNumber.from(result.root).toNumber();
                    if (value === 0 || value === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value)) {
                            logger$h.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value;
                        delete result.root;
                    }
                    else {
                        logger$h.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger$h.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        }
        topics(value) {
            if (Array.isArray(value)) {
                return value.map((v) => this.topics(v));
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        }
        filter(value) {
            return Formatter.check(this.formats.filter, value);
        }
        filterLog(value) {
            return Formatter.check(this.formats.filterLog, value);
        }
        static check(format, object) {
            const result = {};
            for (const key in format) {
                try {
                    const value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        }
        // if value is null-ish, nullValue is returned
        static allowNull(format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        }
        // If value is false-ish, replaceValue is returned
        static allowFalsish(format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        }
        // Requires an Array satisfying check
        static arrayOf(format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                const result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        }
    }
    function isCommunityResourcable(value) {
        return (value && typeof (value.isCommunityResource) === "function");
    }
    function isCommunityResource(value) {
        return (isCommunityResourcable(value) && value.isCommunityResource());
    }
    // Show the throttle message only once
    let throttleMessage = false;
    function showThrottleMessage() {
        if (throttleMessage) {
            return;
        }
        throttleMessage = true;
        console.log("========= NOTICE =========");
        console.log("Request-Rate Exceeded  (this message will not be repeated)");
        console.log("");
        console.log("The default API keys for each service are provided as a highly-throttled,");
        console.log("community resource for low-traffic projects and early prototyping.");
        console.log("");
        console.log("While your application will continue to function, we highly recommended");
        console.log("signing up for your own API keys to improve performance, increase your");
        console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
        console.log("");
        console.log("For more details: https:/\/docs.ethers.io/api-keys/");
        console.log("==========================");
    }

    var __awaiter$l = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$g = new Logger(version$3);
    const MAX_CCIP_REDIRECTS = 10;
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if (hexDataLength(topic) !== 32) {
            logger$g.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map((topic) => {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                const unique = {};
                topic.forEach((topic) => {
                    unique[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                const sorted = Object.keys(unique);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map((topic) => {
            if (topic === "") {
                return [];
            }
            const comps = topic.split("|").map((topic) => {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if (hexDataLength(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (ForkEvent.isForkEvent(eventName)) {
            logger$g.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall$1(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    const PollableEvents = ["block", "network", "pending", "poll"];
    class Event {
        constructor(tag, listener, once) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "listener", listener);
            defineReadOnly(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
        }
        get event() {
            switch (this.type) {
                case "tx":
                    return this.hash;
                case "filter":
                    return this.filter;
            }
            return this.tag;
        }
        get type() {
            return this.tag.split(":")[0];
        }
        get hash() {
            const comps = this.tag.split(":");
            if (comps[0] !== "tx") {
                return null;
            }
            return comps[1];
        }
        get filter() {
            const comps = this.tag.split(":");
            if (comps[0] !== "filter") {
                return null;
            }
            const address = comps[1];
            const topics = deserializeTopics(comps[2]);
            const filter = {};
            if (topics.length > 0) {
                filter.topics = topics;
            }
            if (address && address !== "*") {
                filter.address = address;
            }
            return filter;
        }
        pollable() {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        }
    }
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    const coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return hexZeroPad(BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    const matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result, start) {
        try {
            return toUtf8String(_parseBytes(result, start));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger$g.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return `https:/\/gateway.ipfs.io/ipfs/${link}`;
    }
    function numPad(value) {
        const result = arrayify(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        const padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        const result = [];
        let byteCount = 0;
        // Add place-holders for pointers as we add items
        for (let i = 0; i < datas.length; i++) {
            result.push(null);
            byteCount += 32;
        }
        for (let i = 0; i < datas.length; i++) {
            const data = arrayify(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return hexConcat(result);
    }
    class Resolver {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        constructor(provider, address, name, resolvedAddress) {
            defineReadOnly(this, "provider", provider);
            defineReadOnly(this, "name", name);
            defineReadOnly(this, "address", provider.formatter.address(address));
            defineReadOnly(this, "_resolvedAddress", resolvedAddress);
        }
        supportsWildcard() {
            if (!this._supportsEip2544) {
                // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
                this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then((result) => {
                    return BigNumber.from(result).eq(1);
                }).catch((error) => {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return false;
                    }
                    // Rethrow the error: link is down, etc. Let future attempts retry.
                    this._supportsEip2544 = null;
                    throw error;
                });
            }
            return this._supportsEip2544;
        }
        _fetch(selector, parameters) {
            return __awaiter$l(this, void 0, void 0, function* () {
                // e.g. keccak256("addr(bytes32,uint256)")
                const tx = {
                    to: this.address,
                    ccipReadEnabled: true,
                    data: hexConcat([selector, namehash(this.name), (parameters || "0x")])
                };
                // Wildcard support; use EIP-2544 to resolve the request
                let parseBytes = false;
                if (yield this.supportsWildcard()) {
                    parseBytes = true;
                    // selector("resolve(bytes,bytes)")
                    tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
                }
                try {
                    let result = yield this.provider.call(tx);
                    if ((arrayify(result).length % 32) === 4) {
                        logger$g.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                            transaction: tx, data: result
                        });
                    }
                    if (parseBytes) {
                        result = _parseBytes(result, 0);
                    }
                    return result;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return null;
                    }
                    throw error;
                }
            });
        }
        _fetchBytes(selector, parameters) {
            return __awaiter$l(this, void 0, void 0, function* () {
                const result = yield this._fetch(selector, parameters);
                if (result != null) {
                    return _parseBytes(result, 0);
                }
                return null;
            });
        }
        _getAddress(coinType, hexBytes) {
            const coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger$g.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${coinType})`
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            const bytes = arrayify(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    const length = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    const length = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                const length = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                let version = bytes[0];
                if (version === 0x00) {
                    if (length !== 20 && length !== 32) {
                        version = -1;
                    }
                }
                else {
                    version = -1;
                }
                if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                    const words = bech32$1.toWords(bytes.slice(2));
                    words.unshift(version);
                    return bech32$1.encode(coinInfo.prefix, words);
                }
            }
            return null;
        }
        getAddress(coinType) {
            return __awaiter$l(this, void 0, void 0, function* () {
                if (coinType == null) {
                    coinType = 60;
                }
                // If Ethereum, use the standard `addr(bytes32)`
                if (coinType === 60) {
                    try {
                        // keccak256("addr(bytes32)")
                        const result = yield this._fetch("0x3b3b57de");
                        // No address
                        if (result === "0x" || result === HashZero) {
                            return null;
                        }
                        return this.provider.formatter.callAddress(result);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.CALL_EXCEPTION) {
                            return null;
                        }
                        throw error;
                    }
                }
                // keccak256("addr(bytes32,uint256")
                const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
                // No address
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // Compute the address
                const address = this._getAddress(coinType, hexBytes);
                if (address == null) {
                    logger$g.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${coinType})`,
                        coinType: coinType,
                        data: hexBytes
                    });
                }
                return address;
            });
        }
        getAvatar() {
            return __awaiter$l(this, void 0, void 0, function* () {
                const linkage = [{ type: "name", content: this.name }];
                try {
                    // test data for ricmoo.eth
                    //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                    const avatar = yield this.getText("avatar");
                    if (avatar == null) {
                        return null;
                    }
                    for (let i = 0; i < matchers.length; i++) {
                        const match = avatar.match(matchers[i]);
                        if (match == null) {
                            continue;
                        }
                        const scheme = match[1].toLowerCase();
                        switch (scheme) {
                            case "https":
                                linkage.push({ type: "url", content: avatar });
                                return { linkage, url: avatar };
                            case "data":
                                linkage.push({ type: "data", content: avatar });
                                return { linkage, url: avatar };
                            case "ipfs":
                                linkage.push({ type: "ipfs", content: avatar });
                                return { linkage, url: getIpfsLink(avatar) };
                            case "erc721":
                            case "erc1155": {
                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                const selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({ type: scheme, content: avatar });
                                // The owner of this name
                                const owner = (this._resolvedAddress || (yield this.getAddress()));
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) {
                                    return null;
                                }
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                // Check that this account owns the token
                                if (scheme === "erc721") {
                                    // ownerOf(uint256 tokenId)
                                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x6352211e", tokenId])
                                    }));
                                    if (owner !== tokenOwner) {
                                        return null;
                                    }
                                    linkage.push({ type: "owner", content: tokenOwner });
                                }
                                else if (scheme === "erc1155") {
                                    // balanceOf(address owner, uint256 tokenId)
                                    const balance = BigNumber.from(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                                    }));
                                    if (balance.isZero()) {
                                        return null;
                                    }
                                    linkage.push({ type: "balance", content: balance.toString() });
                                }
                                // Call the token contract for the metadata URL
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: hexConcat([selector, tokenId])
                                };
                                let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                                if (metadataUrl == null) {
                                    return null;
                                }
                                linkage.push({ type: "metadata-url-base", content: metadataUrl });
                                // ERC-1155 allows a generic {id} in the URL
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                                }
                                // Transform IPFS metadata links
                                if (metadataUrl.match(/^ipfs:/i)) {
                                    metadataUrl = getIpfsLink(metadataUrl);
                                }
                                linkage.push({ type: "metadata-url", content: metadataUrl });
                                // Get the token metadata
                                const metadata = yield fetchJson(metadataUrl);
                                if (!metadata) {
                                    return null;
                                }
                                linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                                // Pull the image URL out
                                let imageUrl = metadata.image;
                                if (typeof (imageUrl) !== "string") {
                                    return null;
                                }
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                    // Allow
                                }
                                else {
                                    // Transform IPFS link to gateway
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) {
                                        return null;
                                    }
                                    linkage.push({ type: "url-ipfs", content: imageUrl });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({ type: "url", content: imageUrl });
                                return { linkage, url: imageUrl };
                            }
                        }
                    }
                }
                catch (error) { }
                return null;
            });
        }
        getContentHash() {
            return __awaiter$l(this, void 0, void 0, function* () {
                // keccak256("contenthash()")
                const hexBytes = yield this._fetchBytes("0xbc1c58d1");
                // No contenthash
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // IPFS (CID: 1, Type: DAG-PB)
                const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipfs) {
                    const length = parseInt(ipfs[3], 16);
                    if (ipfs[4].length === length * 2) {
                        return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                    }
                }
                // IPNS (CID: 1, Type: libp2p-key)
                const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipns) {
                    const length = parseInt(ipns[3], 16);
                    if (ipns[4].length === length * 2) {
                        return "ipns:/\/" + Base58.encode("0x" + ipns[1]);
                    }
                }
                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                if (swarm) {
                    if (swarm[1].length === (32 * 2)) {
                        return "bzz:/\/" + swarm[1];
                    }
                }
                const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                if (skynet) {
                    if (skynet[1].length === (34 * 2)) {
                        // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                        const urlSafe = { "=": "", "+": "-", "/": "_" };
                        const hash = encode$2("0x" + skynet[1]).replace(/[=+\/]/g, (a) => (urlSafe[a]));
                        return "sia:/\/" + hash;
                    }
                }
                return logger$g.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getContentHash()",
                    data: hexBytes
                });
            });
        }
        getText(key) {
            return __awaiter$l(this, void 0, void 0, function* () {
                // The key encoded as parameter to fetchBytes
                let keyBytes = toUtf8Bytes(key);
                // The nodehash consumes the first slot, so the string pointer targets
                // offset 64, with the length at offset 64 and data starting at offset 96
                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                // Pad to word-size (32 bytes)
                if ((keyBytes.length % 32) !== 0) {
                    keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - (key.length % 32))]);
                }
                const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                return toUtf8String(hexBytes);
            });
        }
    }
    let defaultFormatter = null;
    let nextPollId = 1;
    class BaseProvider extends Provider {
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        constructor(network) {
            super();
            // Events being listened to
            this._events = [];
            this._emitted = { block: -2 };
            this.disableCcipRead = false;
            this.formatter = new.target.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            defineReadOnly(this, "anyNetwork", (network === "any"));
            if (this.anyNetwork) {
                network = this.detectNetwork();
            }
            if (network instanceof Promise) {
                this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch((error) => { });
                // Trigger initial network setting (async)
                this._ready().catch((error) => { });
            }
            else {
                const knownNetwork = getStatic(new.target, "getNetwork")(network);
                if (knownNetwork) {
                    defineReadOnly(this, "_network", knownNetwork);
                    this.emit("network", knownNetwork, null);
                }
                else {
                    logger$g.throwArgumentError("invalid network", "network", network);
                }
            }
            this._maxInternalBlockNumber = -1024;
            this._lastBlockNumber = -2;
            this._maxFilterBlockRange = 10;
            this._pollingInterval = 4000;
            this._fastQueryDate = 0;
        }
        _ready() {
            return __awaiter$l(this, void 0, void 0, function* () {
                if (this._network == null) {
                    let network = null;
                    if (this._networkPromise) {
                        try {
                            network = yield this._networkPromise;
                        }
                        catch (error) { }
                    }
                    // Try the Provider's network detection (this MUST throw if it cannot)
                    if (network == null) {
                        network = yield this.detectNetwork();
                    }
                    // This should never happen; every Provider sub-class should have
                    // suggested a network by here (or have thrown).
                    if (!network) {
                        logger$g.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // Possible this call stacked so do not call defineReadOnly again
                    if (this._network == null) {
                        if (this.anyNetwork) {
                            this._network = network;
                        }
                        else {
                            defineReadOnly(this, "_network", network);
                        }
                        this.emit("network", network, null);
                    }
                }
                return this._network;
            });
        }
        // This will always return the most recently established network.
        // For "any", this can change (a "network" event is emitted before
        // any change is reflected); otherwise this cannot change
        get ready() {
            return poll(() => {
                return this._ready().then((network) => {
                    return network;
                }, (error) => {
                    // If the network isn't running yet, we will wait
                    if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                        return undefined;
                    }
                    throw error;
                });
            });
        }
        // @TODO: Remove this and just create a singleton formatter
        static getFormatter() {
            if (defaultFormatter == null) {
                defaultFormatter = new Formatter();
            }
            return defaultFormatter;
        }
        // @TODO: Remove this and just use getNetwork
        static getNetwork(network) {
            return getNetwork((network == null) ? "homestead" : network);
        }
        ccipReadFetch(tx, calldata, urls) {
            return __awaiter$l(this, void 0, void 0, function* () {
                if (this.disableCcipRead || urls.length === 0) {
                    return null;
                }
                const sender = tx.to.toLowerCase();
                const data = calldata.toLowerCase();
                const errorMessages = [];
                for (let i = 0; i < urls.length; i++) {
                    const url = urls[i];
                    // URL expansion
                    const href = url.replace("{sender}", sender).replace("{data}", data);
                    // If no {data} is present, use POST; otherwise GET
                    const json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data, sender });
                    const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
                        value.status = response.statusCode;
                        return value;
                    });
                    if (result.data) {
                        return result.data;
                    }
                    const errorMessage = (result.message || "unknown error");
                    // 4xx indicates the result is not present; stop
                    if (result.status >= 400 && result.status < 500) {
                        return logger$g.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
                    }
                    // 5xx indicates server issue; try the next url
                    errorMessages.push(errorMessage);
                }
                return logger$g.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
                    urls, errorMessages
                });
            });
        }
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        _getInternalBlockNumber(maxAge) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this._ready();
                // Allowing stale data up to maxAge old
                if (maxAge > 0) {
                    // While there are pending internal block requests...
                    while (this._internalBlockNumber) {
                        // ..."remember" which fetch we started with
                        const internalBlockNumber = this._internalBlockNumber;
                        try {
                            // Check the result is not too stale
                            const result = yield internalBlockNumber;
                            if ((getTime() - result.respTime) <= maxAge) {
                                return result.blockNumber;
                            }
                            // Too old; fetch a new value
                            break;
                        }
                        catch (error) {
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                break;
                            }
                        }
                    }
                }
                const reqTime = getTime();
                const checkInternalBlockNumber = resolveProperties({
                    blockNumber: this.perform("getBlockNumber", {}),
                    networkError: this.getNetwork().then((network) => (null), (error) => (error))
                }).then(({ blockNumber, networkError }) => {
                    if (networkError) {
                        // Unremember this bad internal block number
                        if (this._internalBlockNumber === checkInternalBlockNumber) {
                            this._internalBlockNumber = null;
                        }
                        throw networkError;
                    }
                    const respTime = getTime();
                    blockNumber = BigNumber.from(blockNumber).toNumber();
                    if (blockNumber < this._maxInternalBlockNumber) {
                        blockNumber = this._maxInternalBlockNumber;
                    }
                    this._maxInternalBlockNumber = blockNumber;
                    this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                    return { blockNumber, reqTime, respTime };
                });
                this._internalBlockNumber = checkInternalBlockNumber;
                // Swallow unhandled exceptions; if needed they are handled else where
                checkInternalBlockNumber.catch((error) => {
                    // Don't null the dead (rejected) fetch, if it has already been updated
                    if (this._internalBlockNumber === checkInternalBlockNumber) {
                        this._internalBlockNumber = null;
                    }
                });
                return (yield checkInternalBlockNumber).blockNumber;
            });
        }
        poll() {
            return __awaiter$l(this, void 0, void 0, function* () {
                const pollId = nextPollId++;
                // Track all running promises, so we can trigger a post-poll once they are complete
                const runners = [];
                let blockNumber = null;
                try {
                    blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                }
                catch (error) {
                    this.emit("error", error);
                    return;
                }
                this._setFastBlockNumber(blockNumber);
                // Emit a poll event after we have the latest (fast) block number
                this.emit("poll", pollId, blockNumber);
                // If the block has not changed, meh.
                if (blockNumber === this._lastBlockNumber) {
                    this.emit("didPoll", pollId);
                    return;
                }
                // First polling cycle, trigger a "block" events
                if (this._emitted.block === -2) {
                    this._emitted.block = blockNumber - 1;
                }
                if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                    logger$g.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                    this.emit("error", logger$g.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                        blockNumber: blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                    }));
                    this.emit("block", blockNumber);
                }
                else {
                    // Notify all listener for each block that has passed
                    for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                        this.emit("block", i);
                    }
                }
                // The emitted block was updated, check for obsolete events
                if (this._emitted.block !== blockNumber) {
                    this._emitted.block = blockNumber;
                    Object.keys(this._emitted).forEach((key) => {
                        // The block event does not expire
                        if (key === "block") {
                            return;
                        }
                        // The block we were at when we emitted this event
                        const eventBlockNumber = this._emitted[key];
                        // We cannot garbage collect pending transactions or blocks here
                        // They should be garbage collected by the Provider when setting
                        // "pending" events
                        if (eventBlockNumber === "pending") {
                            return;
                        }
                        // Evict any transaction hashes or block hashes over 12 blocks
                        // old, since they should not return null anyways
                        if (blockNumber - eventBlockNumber > 12) {
                            delete this._emitted[key];
                        }
                    });
                }
                // First polling cycle
                if (this._lastBlockNumber === -2) {
                    this._lastBlockNumber = blockNumber - 1;
                }
                // Find all transaction hashes we are waiting on
                this._events.forEach((event) => {
                    switch (event.type) {
                        case "tx": {
                            const hash = event.hash;
                            let runner = this.getTransactionReceipt(hash).then((receipt) => {
                                if (!receipt || receipt.blockNumber == null) {
                                    return null;
                                }
                                this._emitted["t:" + hash] = receipt.blockNumber;
                                this.emit(hash, receipt);
                                return null;
                            }).catch((error) => { this.emit("error", error); });
                            runners.push(runner);
                            break;
                        }
                        case "filter": {
                            // We only allow a single getLogs to be in-flight at a time
                            if (!event._inflight) {
                                event._inflight = true;
                                // Filter from the last known event; due to load-balancing
                                // and some nodes returning updated block numbers before
                                // indexing events, a logs result with 0 entries cannot be
                                // trusted and we must retry a range which includes it again
                                const filter = event.filter;
                                filter.fromBlock = event._lastBlockNumber + 1;
                                filter.toBlock = blockNumber;
                                // Prevent fitler ranges from growing too wild
                                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                                    filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
                                }
                                const runner = this.getLogs(filter).then((logs) => {
                                    // Allow the next getLogs
                                    event._inflight = false;
                                    if (logs.length === 0) {
                                        return;
                                    }
                                    logs.forEach((log) => {
                                        // Only when we get an event for a given block number
                                        // can we trust the events are indexed
                                        if (log.blockNumber > event._lastBlockNumber) {
                                            event._lastBlockNumber = log.blockNumber;
                                        }
                                        // Make sure we stall requests to fetch blocks and txs
                                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                        this.emit(filter, log);
                                    });
                                }).catch((error) => {
                                    this.emit("error", error);
                                    // Allow another getLogs (the range was not updated)
                                    event._inflight = false;
                                });
                                runners.push(runner);
                            }
                            break;
                        }
                    }
                });
                this._lastBlockNumber = blockNumber;
                // Once all events for this loop have been processed, emit "didPoll"
                Promise.all(runners).then(() => {
                    this.emit("didPoll", pollId);
                }).catch((error) => { this.emit("error", error); });
                return;
            });
        }
        // Deprecated; do not use this
        resetEventsBlock(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        }
        get network() {
            return this._network;
        }
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        detectNetwork() {
            return __awaiter$l(this, void 0, void 0, function* () {
                return logger$g.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "provider.detectNetwork"
                });
            });
        }
        getNetwork() {
            return __awaiter$l(this, void 0, void 0, function* () {
                const network = yield this._ready();
                // Make sure we are still connected to the same network; this is
                // only an external call for backends which can have the underlying
                // network change spontaneously
                const currentNetwork = yield this.detectNetwork();
                if (network.chainId !== currentNetwork.chainId) {
                    // We are allowing network changes, things can get complex fast;
                    // make sure you know what you are doing if you use "any"
                    if (this.anyNetwork) {
                        this._network = currentNetwork;
                        // Reset all internal block number guards and caches
                        this._lastBlockNumber = -2;
                        this._fastBlockNumber = null;
                        this._fastBlockNumberPromise = null;
                        this._fastQueryDate = 0;
                        this._emitted.block = -2;
                        this._maxInternalBlockNumber = -1024;
                        this._internalBlockNumber = null;
                        // The "network" event MUST happen before this method resolves
                        // so any events have a chance to unregister, so we stall an
                        // additional event loop before returning from /this/ call
                        this.emit("network", currentNetwork, network);
                        yield stall$1(0);
                        return this._network;
                    }
                    const error = logger$g.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                        event: "changed",
                        network: network,
                        detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                }
                return network;
            });
        }
        get blockNumber() {
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
                this._setFastBlockNumber(blockNumber);
            }, (error) => { });
            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
        }
        get polling() {
            return (this._poller != null);
        }
        set polling(value) {
            if (value && !this._poller) {
                this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
                if (!this._bootstrapPoll) {
                    this._bootstrapPoll = setTimeout(() => {
                        this.poll();
                        // We block additional polls until the polling interval
                        // is done, to prevent overwhelming the poll function
                        this._bootstrapPoll = setTimeout(() => {
                            // If polling was disabled, something may require a poke
                            // since starting the bootstrap poll and it was disabled
                            if (!this._poller) {
                                this.poll();
                            }
                            // Clear out the bootstrap so we can do another
                            this._bootstrapPoll = null;
                        }, this.pollingInterval);
                    }, 0);
                }
            }
            else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
            }
        }
        get pollingInterval() {
            return this._pollingInterval;
        }
        set pollingInterval(value) {
            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
            }
        }
        _getFastBlockNumber() {
            const now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                        this._fastBlockNumber = blockNumber;
                    }
                    return this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        }
        _setFastBlockNumber(blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        }
        waitForTransaction(transactionHash, confirmations, timeout) {
            return __awaiter$l(this, void 0, void 0, function* () {
                return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
            });
        }
        _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
            return __awaiter$l(this, void 0, void 0, function* () {
                const receipt = yield this.getTransactionReceipt(transactionHash);
                // Receipt is already good
                if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                    return receipt;
                }
                // Poll until the receipt is good...
                return new Promise((resolve, reject) => {
                    const cancelFuncs = [];
                    let done = false;
                    const alreadyDone = function () {
                        if (done) {
                            return true;
                        }
                        done = true;
                        cancelFuncs.forEach((func) => { func(); });
                        return false;
                    };
                    const minedHandler = (receipt) => {
                        if (receipt.confirmations < confirmations) {
                            return;
                        }
                        if (alreadyDone()) {
                            return;
                        }
                        resolve(receipt);
                    };
                    this.on(transactionHash, minedHandler);
                    cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                    if (replaceable) {
                        let lastBlockNumber = replaceable.startBlock;
                        let scannedBlock = null;
                        const replaceHandler = (blockNumber) => __awaiter$l(this, void 0, void 0, function* () {
                            if (done) {
                                return;
                            }
                            // Wait 1 second; this is only used in the case of a fault, so
                            // we will trade off a little bit of latency for more consistent
                            // results and fewer JSON-RPC calls
                            yield stall$1(1000);
                            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter$l(this, void 0, void 0, function* () {
                                if (done) {
                                    return;
                                }
                                if (nonce <= replaceable.nonce) {
                                    lastBlockNumber = blockNumber;
                                }
                                else {
                                    // First check if the transaction was mined
                                    {
                                        const mined = yield this.getTransaction(transactionHash);
                                        if (mined && mined.blockNumber != null) {
                                            return;
                                        }
                                    }
                                    // First time scanning. We start a little earlier for some
                                    // wiggle room here to handle the eventually consistent nature
                                    // of blockchain (e.g. the getTransactionCount was for a
                                    // different block)
                                    if (scannedBlock == null) {
                                        scannedBlock = lastBlockNumber - 3;
                                        if (scannedBlock < replaceable.startBlock) {
                                            scannedBlock = replaceable.startBlock;
                                        }
                                    }
                                    while (scannedBlock <= blockNumber) {
                                        if (done) {
                                            return;
                                        }
                                        const block = yield this.getBlockWithTransactions(scannedBlock);
                                        for (let ti = 0; ti < block.transactions.length; ti++) {
                                            const tx = block.transactions[ti];
                                            // Successfully mined!
                                            if (tx.hash === transactionHash) {
                                                return;
                                            }
                                            // Matches our transaction from and nonce; its a replacement
                                            if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                if (done) {
                                                    return;
                                                }
                                                // Get the receipt of the replacement
                                                const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                // Already resolved or rejected (prolly a timeout)
                                                if (alreadyDone()) {
                                                    return;
                                                }
                                                // The reason we were replaced
                                                let reason = "replaced";
                                                if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                    reason = "repriced";
                                                }
                                                else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                    reason = "cancelled";
                                                }
                                                // Explain why we were replaced
                                                reject(logger$g.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                    cancelled: (reason === "replaced" || reason === "cancelled"),
                                                    reason,
                                                    replacement: this._wrapTransaction(tx),
                                                    hash: transactionHash,
                                                    receipt
                                                }));
                                                return;
                                            }
                                        }
                                        scannedBlock++;
                                    }
                                }
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            }), (error) => {
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            });
                        });
                        if (done) {
                            return;
                        }
                        this.once("block", replaceHandler);
                        cancelFuncs.push(() => {
                            this.removeListener("block", replaceHandler);
                        });
                    }
                    if (typeof (timeout) === "number" && timeout > 0) {
                        const timer = setTimeout(() => {
                            if (alreadyDone()) {
                                return;
                            }
                            reject(logger$g.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout: timeout }));
                        }, timeout);
                        if (timer.unref) {
                            timer.unref();
                        }
                        cancelFuncs.push(() => { clearTimeout(timer); });
                    }
                });
            });
        }
        getBlockNumber() {
            return __awaiter$l(this, void 0, void 0, function* () {
                return this._getInternalBlockNumber(0);
            });
        }
        getGasPrice() {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const result = yield this.perform("getGasPrice", {});
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getGasPrice",
                        result, error
                    });
                }
            });
        }
        getBalance(addressOrName, blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getBalance", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getBalance",
                        params, result, error
                    });
                }
            });
        }
        getTransactionCount(addressOrName, blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getTransactionCount", params);
                try {
                    return BigNumber.from(result).toNumber();
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getTransactionCount",
                        params, result, error
                    });
                }
            });
        }
        getCode(addressOrName, blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getCode", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getCode",
                        params, result, error
                    });
                }
            });
        }
        getStorageAt(addressOrName, position, blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag),
                    position: Promise.resolve(position).then((p) => hexValue(p))
                });
                const result = yield this.perform("getStorageAt", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getStorageAt",
                        params, result, error
                    });
                }
            });
        }
        // This should be called by any subclass wrapping a TransactionResponse
        _wrapTransaction(tx, hash, startBlock) {
            if (hash != null && hexDataLength(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            const result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger$g.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = (confirms, timeout) => __awaiter$l(this, void 0, void 0, function* () {
                if (confirms == null) {
                    confirms = 1;
                }
                if (timeout == null) {
                    timeout = 0;
                }
                // Get the details to detect replacement
                let replacement = undefined;
                if (confirms !== 0 && startBlock != null) {
                    replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                    };
                }
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) {
                    return null;
                }
                // No longer pending, allow the polling loop to garbage collect this
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    logger$g.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt: receipt
                    });
                }
                return receipt;
            });
            return result;
        }
        sendTransaction(signedTransaction) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));
                const tx = this.formatter.transaction(signedTransaction);
                if (tx.confirmations == null) {
                    tx.confirmations = 0;
                }
                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                try {
                    const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                    return this._wrapTransaction(tx, hash, blockNumber);
                }
                catch (error) {
                    error.transaction = tx;
                    error.transactionHash = tx.hash;
                    throw error;
                }
            });
        }
        _getTransactionRequest(transaction) {
            return __awaiter$l(this, void 0, void 0, function* () {
                const values = yield transaction;
                const tx = {};
                ["from", "to"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
                });
                ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));
                });
                ["type"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
                });
                if (values.accessList) {
                    tx.accessList = this.formatter.accessList(values.accessList);
                }
                ["data"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));
                });
                return this.formatter.transactionRequest(yield resolveProperties(tx));
            });
        }
        _getFilter(filter) {
            return __awaiter$l(this, void 0, void 0, function* () {
                filter = yield filter;
                const result = {};
                if (filter.address != null) {
                    result.address = this._getAddress(filter.address);
                }
                ["blockHash", "topics"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = filter[key];
                });
                ["fromBlock", "toBlock"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = this._getBlockTag(filter[key]);
                });
                return this.formatter.filter(yield resolveProperties(result));
            });
        }
        _call(transaction, blockTag, attempt) {
            return __awaiter$l(this, void 0, void 0, function* () {
                if (attempt >= MAX_CCIP_REDIRECTS) {
                    logger$g.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                        redirects: attempt, transaction
                    });
                }
                const txSender = transaction.to;
                const result = yield this.perform("call", { transaction, blockTag });
                // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
                if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (hexDataLength(result) % 32 === 4)) {
                    try {
                        const data = hexDataSlice(result, 4);
                        // Check the sender of the OffchainLookup matches the transaction
                        const sender = hexDataSlice(data, 0, 32);
                        if (!BigNumber.from(sender).eq(txSender)) {
                            logger$g.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        // Read the URLs from the response
                        const urls = [];
                        const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                        const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                        const urlsData = hexDataSlice(data, urlsOffset + 32);
                        for (let u = 0; u < urlsLength; u++) {
                            const url = _parseString(urlsData, u * 32);
                            if (url == null) {
                                logger$g.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction, data: result
                                });
                            }
                            urls.push(url);
                        }
                        // Get the CCIP calldata to forward
                        const calldata = _parseBytes(data, 64);
                        // Get the callbackSelector (bytes4)
                        if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                            logger$g.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const callbackSelector = hexDataSlice(data, 96, 100);
                        // Get the extra data to send back to the contract as context
                        const extraData = _parseBytes(data, 128);
                        const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                        if (ccipResult == null) {
                            logger$g.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const tx = {
                            to: txSender,
                            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
                        };
                        return this._call(tx, blockTag, attempt + 1);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.SERVER_ERROR) {
                            throw error;
                        }
                    }
                }
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "call",
                        params: { transaction, blockTag }, result, error
                    });
                }
            });
        }
        call(transaction, blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const resolved = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction),
                    blockTag: this._getBlockTag(blockTag),
                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                });
                return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
            });
        }
        estimateGas(transaction) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction)
                });
                const result = yield this.perform("estimateGas", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$g.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "estimateGas",
                        params, result, error
                    });
                }
            });
        }
        _getAddress(addressOrName) {
            return __awaiter$l(this, void 0, void 0, function* () {
                addressOrName = yield addressOrName;
                if (typeof (addressOrName) !== "string") {
                    logger$g.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                }
                const address = yield this.resolveName(addressOrName);
                if (address == null) {
                    logger$g.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `resolveName(${JSON.stringify(addressOrName)})`
                    });
                }
                return address;
            });
        }
        _getBlock(blockHashOrBlockTag, includeTransactions) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                blockHashOrBlockTag = yield blockHashOrBlockTag;
                // If blockTag is a number (not "latest", etc), this is the block number
                let blockNumber = -128;
                const params = {
                    includeTransactions: !!includeTransactions
                };
                if (isHexString(blockHashOrBlockTag, 32)) {
                    params.blockHash = blockHashOrBlockTag;
                }
                else {
                    try {
                        params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                        if (isHexString(params.blockTag)) {
                            blockNumber = parseInt(params.blockTag.substring(2), 16);
                        }
                    }
                    catch (error) {
                        logger$g.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    }
                }
                return poll(() => __awaiter$l(this, void 0, void 0, function* () {
                    const block = yield this.perform("getBlock", params);
                    // Block was not found
                    if (block == null) {
                        // For blockhashes, if we didn't say it existed, that blockhash may
                        // not exist. If we did see it though, perhaps from a log, we know
                        // it exists, and this node is just not caught up yet.
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                                return null;
                            }
                        }
                        // For block tags, if we are asking for a future block, we return null
                        if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                                return null;
                            }
                        }
                        // Retry on the next block
                        return undefined;
                    }
                    // Add transactions
                    if (includeTransactions) {
                        let blockNumber = null;
                        for (let i = 0; i < block.transactions.length; i++) {
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            }
                            else if (tx.confirmations == null) {
                                if (blockNumber == null) {
                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                }
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), { oncePoll: this });
            });
        }
        getBlock(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        }
        getBlockWithTransactions(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        }
        getTransaction(transactionHash) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$l(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                    }
                    else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - tx.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), { oncePoll: this });
            });
        }
        getTransactionReceipt(transactionHash) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$l(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    // "geth-etc" returns receipts before they are ready
                    if (result.blockHash == null) {
                        return undefined;
                    }
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) {
                        receipt.confirmations = 0;
                    }
                    else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - receipt.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), { oncePoll: this });
            });
        }
        getLogs(filter) {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({ filter: this._getFilter(filter) });
                const logs = yield this.perform("getLogs", params);
                logs.forEach((log) => {
                    if (log.removed == null) {
                        log.removed = false;
                    }
                });
                return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
            });
        }
        getEtherPrice() {
            return __awaiter$l(this, void 0, void 0, function* () {
                yield this.getNetwork();
                return this.perform("getEtherPrice", {});
            });
        }
        _getBlockTag(blockTag) {
            return __awaiter$l(this, void 0, void 0, function* () {
                blockTag = yield blockTag;
                if (typeof (blockTag) === "number" && blockTag < 0) {
                    if (blockTag % 1) {
                        logger$g.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                        blockNumber = 0;
                    }
                    return this.formatter.blockTag(blockNumber);
                }
                return this.formatter.blockTag(blockTag);
            });
        }
        getResolver(name) {
            return __awaiter$l(this, void 0, void 0, function* () {
                let currentName = name;
                while (true) {
                    if (currentName === "" || currentName === ".") {
                        return null;
                    }
                    // Optimization since the eth node cannot change and does
                    // not have a wildcard resolver
                    if (name !== "eth" && currentName === "eth") {
                        return null;
                    }
                    // Check the current node for a resolver
                    const addr = yield this._getResolver(currentName, "getResolver");
                    // Found a resolver!
                    if (addr != null) {
                        const resolver = new Resolver(this, addr, name);
                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
                        if (currentName !== name && !(yield resolver.supportsWildcard())) {
                            return null;
                        }
                        return resolver;
                    }
                    // Get the parent node
                    currentName = currentName.split(".").slice(1).join(".");
                }
            });
        }
        _getResolver(name, operation) {
            return __awaiter$l(this, void 0, void 0, function* () {
                if (operation == null) {
                    operation = "ENS";
                }
                const network = yield this.getNetwork();
                // No ENS...
                if (!network.ensAddress) {
                    logger$g.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                }
                try {
                    // keccak256("resolver(bytes32)")
                    const addrData = yield this.call({
                        to: network.ensAddress,
                        data: ("0x0178b8bf" + namehash(name).substring(2))
                    });
                    return this.formatter.callAddress(addrData);
                }
                catch (error) {
                    // ENS registry cannot throw errors on resolver(bytes32)
                }
                return null;
            });
        }
        resolveName(name) {
            return __awaiter$l(this, void 0, void 0, function* () {
                name = yield name;
                // If it is already an address, nothing to resolve
                try {
                    return Promise.resolve(this.formatter.address(name));
                }
                catch (error) {
                    // If is is a hexstring, the address is bad (See #694)
                    if (isHexString(name)) {
                        throw error;
                    }
                }
                if (typeof (name) !== "string") {
                    logger$g.throwArgumentError("invalid ENS name", "name", name);
                }
                // Get the addr from the resolver
                const resolver = yield this.getResolver(name);
                if (!resolver) {
                    return null;
                }
                return yield resolver.getAddress();
            });
        }
        lookupAddress(address) {
            return __awaiter$l(this, void 0, void 0, function* () {
                address = yield address;
                address = this.formatter.address(address);
                const node = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddr = yield this._getResolver(node, "lookupAddress");
                if (resolverAddr == null) {
                    return null;
                }
                // keccak("name(bytes32)")
                const name = _parseString(yield this.call({
                    to: resolverAddr,
                    data: ("0x691f3431" + namehash(node).substring(2))
                }), 0);
                const addr = yield this.resolveName(name);
                if (addr != address) {
                    return null;
                }
                return name;
            });
        }
        getAvatar(nameOrAddress) {
            return __awaiter$l(this, void 0, void 0, function* () {
                let resolver = null;
                if (isHexString(nameOrAddress)) {
                    // Address; reverse lookup
                    const address = this.formatter.address(nameOrAddress);
                    const node = address.substring(2).toLowerCase() + ".addr.reverse";
                    const resolverAddress = yield this._getResolver(node, "getAvatar");
                    if (!resolverAddress) {
                        return null;
                    }
                    // Try resolving the avatar against the addr.reverse resolver
                    resolver = new Resolver(this, resolverAddress, node);
                    try {
                        const avatar = yield resolver.getAvatar();
                        if (avatar) {
                            return avatar.url;
                        }
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                    }
                    // Try getting the name and performing forward lookup; allowing wildcards
                    try {
                        // keccak("name(bytes32)")
                        const name = _parseString(yield this.call({
                            to: resolverAddress,
                            data: ("0x691f3431" + namehash(node).substring(2))
                        }), 0);
                        resolver = yield this.getResolver(name);
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                        return null;
                    }
                }
                else {
                    // ENS name; forward lookup with wildcard
                    resolver = yield this.getResolver(nameOrAddress);
                    if (!resolver) {
                        return null;
                    }
                }
                const avatar = yield resolver.getAvatar();
                if (avatar == null) {
                    return null;
                }
                return avatar.url;
            });
        }
        perform(method, params) {
            return logger$g.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        _startEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _stopEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _addEventListener(eventName, listener, once) {
            const event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        }
        on(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        }
        once(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        }
        emit(eventName, ...args) {
            let result = false;
            let stopped = [];
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(() => {
                    event.listener.apply(this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return result;
        }
        listenerCount(eventName) {
            if (!eventName) {
                return this._events.length;
            }
            let eventTag = getEventTag(eventName);
            return this._events.filter((event) => {
                return (event.tag === eventTag);
            }).length;
        }
        listeners(eventName) {
            if (eventName == null) {
                return this._events.map((event) => event.listener);
            }
            let eventTag = getEventTag(eventName);
            return this._events
                .filter((event) => (event.tag === eventTag))
                .map((event) => event.listener);
        }
        off(eventName, listener) {
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            const stopped = [];
            let found = false;
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
        removeAllListeners(eventName) {
            let stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                const eventTag = getEventTag(eventName);
                this._events = this._events.filter((event) => {
                    if (event.tag !== eventTag) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
    }

    var __awaiter$k = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$f = new Logger(version$3);
    const errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match("reverted")) {
            const data = isHexString(value.data) ? value.data : null;
            if (!requireData || data) {
                return { message: value.message, data };
            }
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                const result = spelunk(value[key], requireData);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunk(JSON.parse(value), requireData);
            }
            catch (error) { }
        }
        return null;
    }
    function checkError$1(method, error, params) {
        const transaction = params.transaction || params.signedTransaction;
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call") {
            const result = spelunk(error, true);
            if (result) {
                return result.data;
            }
            // Nothing descriptive..
            logger$f.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
                data: "0x", transaction, error
            });
        }
        if (method === "estimateGas") {
            // Try to find something, with a preference on SERVER_ERROR body
            let result = spelunk(error.body, false);
            if (result == null) {
                result = spelunk(error, false);
            }
            // Found "reverted", this is a CALL_EXCEPTION
            if (result) {
                logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: result.message, method, transaction, error
                });
            }
        }
        // @TODO: Should we spelunk for message too?
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            logger$f.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce (is )?too low/i)) {
            logger$f.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
            logger$f.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/i)) {
            logger$f.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
                error, method, transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
            logger$f.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult$1(payload) {
        if (payload.error) {
            // @TODO: not any
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    const _constructorGuard = {};
    class JsonRpcSigner extends Signer {
        constructor(constructorGuard, provider, addressOrIndex) {
            super();
            if (constructorGuard !== _constructorGuard) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            defineReadOnly(this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
                defineReadOnly(this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                defineReadOnly(this, "_index", addressOrIndex);
                defineReadOnly(this, "_address", null);
            }
            else {
                logger$f.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
        }
        connect(provider) {
            return logger$f.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        }
        connectUnchecked() {
            return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
        }
        getAddress() {
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then((accounts) => {
                if (accounts.length <= this._index) {
                    logger$f.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return this.provider.formatter.address(accounts[this._index]);
            });
        }
        sendUncheckedTransaction(transaction) {
            transaction = shallowCopy(transaction);
            const fromAddress = this.getAddress().then((address) => {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                const estimate = shallowCopy(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter$k(this, void 0, void 0, function* () {
                    if (to == null) {
                        return null;
                    }
                    const address = yield this.provider.resolveName(to);
                    if (address == null) {
                        logger$f.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return address;
                }));
            }
            return resolveProperties({
                tx: resolveProperties(transaction),
                sender: fromAddress
            }).then(({ tx, sender }) => {
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger$f.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                    return hash;
                }, (error) => {
                    return checkError$1("sendTransaction", error, hexTx);
                });
            });
        }
        signTransaction(transaction) {
            return logger$f.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        }
        sendTransaction(transaction) {
            return __awaiter$k(this, void 0, void 0, function* () {
                // This cannot be mined any earlier than any recent block
                const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
                // Send the transaction
                const hash = yield this.sendUncheckedTransaction(transaction);
                try {
                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
                    // for a response, and we need the actual transaction, so we poll
                    // for it; it should show up very quickly
                    return yield poll(() => __awaiter$k(this, void 0, void 0, function* () {
                        const tx = yield this.provider.getTransaction(hash);
                        if (tx === null) {
                            return undefined;
                        }
                        return this.provider._wrapTransaction(tx, hash, blockNumber);
                    }), { oncePoll: this.provider });
                }
                catch (error) {
                    error.transactionHash = hash;
                    throw error;
                }
            });
        }
        signMessage(message) {
            return __awaiter$k(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
            });
        }
        _legacySignMessage(message) {
            return __awaiter$k(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$k(this, void 0, void 0, function* () {
                // Populate any ENS names (in-place)
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    return this.provider.resolveName(name);
                });
                const address = yield this.getAddress();
                return yield this.provider.send("eth_signTypedData_v4", [
                    address.toLowerCase(),
                    JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                ]);
            });
        }
        unlock(password) {
            return __awaiter$k(this, void 0, void 0, function* () {
                const provider = this.provider;
                const address = yield this.getAddress();
                return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
            });
        }
    }
    class UncheckedJsonRpcSigner extends JsonRpcSigner {
        sendTransaction(transaction) {
            return this.sendUncheckedTransaction(transaction).then((hash) => {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        }
    }
    const allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    class JsonRpcProvider extends BaseProvider {
        constructor(url, network) {
            let networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then((network) => {
                            resolve(network);
                        }, (error) => {
                            reject(error);
                        });
                    }, 0);
                });
            }
            super(networkOrReady);
            // Default URL
            if (!url) {
                url = getStatic(this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                defineReadOnly(this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
            }
            this._nextId = 42;
        }
        get _cache() {
            if (this._eventLoopCache == null) {
                this._eventLoopCache = {};
            }
            return this._eventLoopCache;
        }
        static defaultUrl() {
            return "http:/\/localhost:8545";
        }
        detectNetwork() {
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(() => {
                    this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        }
        _uncachedDetectNetwork() {
            return __awaiter$k(this, void 0, void 0, function* () {
                yield timer(0);
                let chainId = null;
                try {
                    chainId = yield this.send("eth_chainId", []);
                }
                catch (error) {
                    try {
                        chainId = yield this.send("net_version", []);
                    }
                    catch (error) { }
                }
                if (chainId != null) {
                    const getNetwork = getStatic(this.constructor, "getNetwork");
                    try {
                        return getNetwork(BigNumber.from(chainId).toNumber());
                    }
                    catch (error) {
                        return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                            chainId: chainId,
                            event: "invalidNetwork",
                            serverError: error
                        });
                    }
                }
                return logger$f.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                    event: "noNetwork"
                });
            });
        }
        getSigner(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
        }
        getUncheckedSigner(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        }
        listAccounts() {
            return this.send("eth_accounts", []).then((accounts) => {
                return accounts.map((a) => this.formatter.address(a));
            });
        }
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: deepCopy(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            const result = fetchJson(this.connection, JSON.stringify(request), getResult$1).then((result) => {
                this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                });
                return result;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(() => {
                    this._cache[method] = null;
                }, 0);
            }
            return result;
        }
        prepareRequest(method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
            }
            return null;
        }
        perform(method, params) {
            return __awaiter$k(this, void 0, void 0, function* () {
                // Legacy networks do not like the type field being passed along (which
                // is fair), so we delete type if it is 0 and a non-EIP-1559 network
                if (method === "call" || method === "estimateGas") {
                    const tx = params.transaction;
                    if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                        // If there are no EIP-1559 properties, it might be non-EIP-1559
                        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                            const feeData = yield this.getFeeData();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = shallowCopy(params);
                                params.transaction = shallowCopy(tx);
                                delete params.transaction.type;
                            }
                        }
                    }
                }
                const args = this.prepareRequest(method, params);
                if (args == null) {
                    logger$f.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                }
                try {
                    return yield this.send(args[0], args[1]);
                }
                catch (error) {
                    return checkError$1(method, error, params);
                }
            });
        }
        _startEvent(event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            super._startEvent(event);
        }
        _startPending() {
            if (this._pendingFilter != null) {
                return;
            }
            const self = this;
            const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        let seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch((error) => { });
                }
                poll();
                return filterId;
            }).catch((error) => { });
        }
        _stopEvent(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            super._stopEvent(event);
        }
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        static hexlifyTransaction(transaction, allowExtra) {
            // Check only allowed properties are given
            const allowed = shallowCopy(allowedTransactionKeys);
            if (allowExtra) {
                for (const key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            checkProperties(transaction, allowed);
            const result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                const value = hexValue(BigNumber.from(transaction[key]));
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = hexlify(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = accessListify(transaction.accessList);
            }
            return result;
        }
    }

    let WS = null;
    try {
        WS = WebSocket;
        if (WS == null) {
            throw new Error("inject please");
        }
    }
    catch (error) {
        const logger = new Logger(version$3);
        WS = function () {
            logger.throwError("WebSockets not supported in this environment", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "new WebSocket()"
            });
        };
    }

    var __awaiter$j = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$e = new Logger(version$3);
    /**
     *  Notes:
     *
     *  This provider differs a bit from the polling providers. One main
     *  difference is how it handles consistency. The polling providers
     *  will stall responses to ensure a consistent state, while this
     *  WebSocket provider assumes the connected backend will manage this.
     *
     *  For example, if a polling provider emits an event which indicates
     *  the event occurred in blockhash XXX, a call to fetch that block by
     *  its hash XXX, if not present will retry until it is present. This
     *  can occur when querying a pool of nodes that are mildly out of sync
     *  with each other.
     */
    let NextId = 1;
    // For more info about the Real-time Event API see:
    //   https://geth.ethereum.org/docs/rpc/pubsub
    class WebSocketProvider extends JsonRpcProvider {
        constructor(url, network) {
            // This will be added in the future; please open an issue to expedite
            if (network === "any") {
                logger$e.throwError("WebSocketProvider does not support 'any' network yet", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "network:any"
                });
            }
            if (typeof (url) === "string") {
                super(url, network);
            }
            else {
                super("_websocket", network);
            }
            this._pollingInterval = -1;
            this._wsReady = false;
            if (typeof (url) === "string") {
                defineReadOnly(this, "_websocket", new WS(this.connection.url));
            }
            else {
                defineReadOnly(this, "_websocket", url);
            }
            defineReadOnly(this, "_requests", {});
            defineReadOnly(this, "_subs", {});
            defineReadOnly(this, "_subIds", {});
            defineReadOnly(this, "_detectNetwork", super.detectNetwork());
            // Stall sending requests until the socket is open...
            this.websocket.onopen = () => {
                this._wsReady = true;
                Object.keys(this._requests).forEach((id) => {
                    this.websocket.send(this._requests[id].payload);
                });
            };
            this.websocket.onmessage = (messageEvent) => {
                const data = messageEvent.data;
                const result = JSON.parse(data);
                if (result.id != null) {
                    const id = String(result.id);
                    const request = this._requests[id];
                    delete this._requests[id];
                    if (result.result !== undefined) {
                        request.callback(null, result.result);
                        this.emit("debug", {
                            action: "response",
                            request: JSON.parse(request.payload),
                            response: result.result,
                            provider: this
                        });
                    }
                    else {
                        let error = null;
                        if (result.error) {
                            error = new Error(result.error.message || "unknown error");
                            defineReadOnly(error, "code", result.error.code || null);
                            defineReadOnly(error, "response", data);
                        }
                        else {
                            error = new Error("unknown error");
                        }
                        request.callback(error, undefined);
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: JSON.parse(request.payload),
                            provider: this
                        });
                    }
                }
                else if (result.method === "eth_subscription") {
                    // Subscription...
                    const sub = this._subs[result.params.subscription];
                    if (sub) {
                        //this.emit.apply(this,                  );
                        sub.processFunc(result.params.result);
                    }
                }
                else {
                    console.warn("this should not happen");
                }
            };
            // This Provider does not actually poll, but we want to trigger
            // poll events for things that depend on them (like stalling for
            // block and transaction lookups)
            const fauxPoll = setInterval(() => {
                this.emit("poll");
            }, 1000);
            if (fauxPoll.unref) {
                fauxPoll.unref();
            }
        }
        // Cannot narrow the type of _websocket, as that is not backwards compatible
        // so we add a getter and let the WebSocket be a public API.
        get websocket() { return this._websocket; }
        detectNetwork() {
            return this._detectNetwork;
        }
        get pollingInterval() {
            return 0;
        }
        resetEventsBlock(blockNumber) {
            logger$e.throwError("cannot reset events block on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "resetEventBlock"
            });
        }
        set pollingInterval(value) {
            logger$e.throwError("cannot set polling interval on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPollingInterval"
            });
        }
        poll() {
            return __awaiter$j(this, void 0, void 0, function* () {
                return null;
            });
        }
        set polling(value) {
            if (!value) {
                return;
            }
            logger$e.throwError("cannot set polling on WebSocketProvider", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "setPolling"
            });
        }
        send(method, params) {
            const rid = NextId++;
            return new Promise((resolve, reject) => {
                function callback(error, result) {
                    if (error) {
                        return reject(error);
                    }
                    return resolve(result);
                }
                const payload = JSON.stringify({
                    method: method,
                    params: params,
                    id: rid,
                    jsonrpc: "2.0"
                });
                this.emit("debug", {
                    action: "request",
                    request: JSON.parse(payload),
                    provider: this
                });
                this._requests[String(rid)] = { callback, payload };
                if (this._wsReady) {
                    this.websocket.send(payload);
                }
            });
        }
        static defaultUrl() {
            return "ws:/\/localhost:8546";
        }
        _subscribe(tag, param, processFunc) {
            return __awaiter$j(this, void 0, void 0, function* () {
                let subIdPromise = this._subIds[tag];
                if (subIdPromise == null) {
                    subIdPromise = Promise.all(param).then((param) => {
                        return this.send("eth_subscribe", param);
                    });
                    this._subIds[tag] = subIdPromise;
                }
                const subId = yield subIdPromise;
                this._subs[subId] = { tag, processFunc };
            });
        }
        _startEvent(event) {
            switch (event.type) {
                case "block":
                    this._subscribe("block", ["newHeads"], (result) => {
                        const blockNumber = BigNumber.from(result.number).toNumber();
                        this._emitted.block = blockNumber;
                        this.emit("block", blockNumber);
                    });
                    break;
                case "pending":
                    this._subscribe("pending", ["newPendingTransactions"], (result) => {
                        this.emit("pending", result);
                    });
                    break;
                case "filter":
                    this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], (result) => {
                        if (result.removed == null) {
                            result.removed = false;
                        }
                        this.emit(event.filter, this.formatter.filterLog(result));
                    });
                    break;
                case "tx": {
                    const emitReceipt = (event) => {
                        const hash = event.hash;
                        this.getTransactionReceipt(hash).then((receipt) => {
                            if (!receipt) {
                                return;
                            }
                            this.emit(hash, receipt);
                        });
                    };
                    // In case it is already mined
                    emitReceipt(event);
                    // To keep things simple, we start up a single newHeads subscription
                    // to keep an eye out for transactions we are watching for.
                    // Starting a subscription for an event (i.e. "tx") that is already
                    // running is (basically) a nop.
                    this._subscribe("tx", ["newHeads"], (result) => {
                        this._events.filter((e) => (e.type === "tx")).forEach(emitReceipt);
                    });
                    break;
                }
                // Nothing is needed
                case "debug":
                case "poll":
                case "willPoll":
                case "didPoll":
                case "error":
                    break;
                default:
                    console.log("unhandled:", event);
                    break;
            }
        }
        _stopEvent(event) {
            let tag = event.tag;
            if (event.type === "tx") {
                // There are remaining transaction event listeners
                if (this._events.filter((e) => (e.type === "tx")).length) {
                    return;
                }
                tag = "tx";
            }
            else if (this.listenerCount(event.event)) {
                // There are remaining event listeners
                return;
            }
            const subId = this._subIds[tag];
            if (!subId) {
                return;
            }
            delete this._subIds[tag];
            subId.then((subId) => {
                if (!this._subs[subId]) {
                    return;
                }
                delete this._subs[subId];
                this.send("eth_unsubscribe", [subId]);
            });
        }
        destroy() {
            return __awaiter$j(this, void 0, void 0, function* () {
                // Wait until we have connected before trying to disconnect
                if (this.websocket.readyState === WS.CONNECTING) {
                    yield (new Promise((resolve) => {
                        this.websocket.onopen = function () {
                            resolve(true);
                        };
                        this.websocket.onerror = function () {
                            resolve(false);
                        };
                    }));
                }
                // Hangup
                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes
                this.websocket.close(1000);
            });
        }
    }

    var __awaiter$i = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$d = new Logger(version$3);
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    class StaticJsonRpcProvider extends JsonRpcProvider {
        detectNetwork() {
            const _super = Object.create(null, {
                detectNetwork: { get: () => super.detectNetwork }
            });
            return __awaiter$i(this, void 0, void 0, function* () {
                let network = this.network;
                if (network == null) {
                    network = yield _super.detectNetwork.call(this);
                    if (!network) {
                        logger$d.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // If still not set, set it
                    if (this._network == null) {
                        // A static network does not support "any"
                        defineReadOnly(this, "_network", network);
                        this.emit("network", network, null);
                    }
                }
                return network;
            });
        }
    }
    class UrlJsonRpcProvider extends StaticJsonRpcProvider {
        constructor(network, apiKey) {
            logger$d.checkAbstract(new.target, UrlJsonRpcProvider);
            // Normalize the Network and API Key
            network = getStatic(new.target, "getNetwork")(network);
            apiKey = getStatic(new.target, "getApiKey")(apiKey);
            const connection = getStatic(new.target, "getUrl")(network, apiKey);
            super(connection, network);
            if (typeof (apiKey) === "string") {
                defineReadOnly(this, "apiKey", apiKey);
            }
            else if (apiKey != null) {
                Object.keys(apiKey).forEach((key) => {
                    defineReadOnly(this, key, apiKey[key]);
                });
            }
        }
        _startPending() {
            logger$d.warn("WARNING: API provider does not support pending filters");
        }
        isCommunityResource() {
            return false;
        }
        getSigner(address) {
            return logger$d.throwError("API provider does not support signing", Logger.errors.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        }
        listAccounts() {
            return Promise.resolve([]);
        }
        // Return a defaultApiKey if null, otherwise validate the API key
        static getApiKey(apiKey) {
            return apiKey;
        }
        // Returns the url or connection for the given network and API key. The
        // API key will have been sanitized by the getApiKey first, so any validation
        // or transformations can be done there.
        static getUrl(network, apiKey) {
            return logger$d.throwError("not implemented; sub-classes must override getUrl", Logger.errors.NOT_IMPLEMENTED, {
                operation: "getUrl"
            });
        }
    }

    const logger$c = new Logger(version$3);
    // This key was provided to ethers.js by Alchemy to be used by the
    // default provider, but it is recommended that for your own
    // production environments, that you acquire your own API key at:
    //   https://dashboard.alchemyapi.io
    const defaultApiKey$3 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    class AlchemyWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new AlchemyProvider(network, apiKey);
            const url = provider.connection.url.replace(/^http/i, "ws")
                .replace(".alchemyapi.", ".ws.alchemyapi.");
            super(url, provider.network);
            defineReadOnly(this, "apiKey", provider.apiKey);
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$3);
        }
    }
    class AlchemyProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new AlchemyWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$3;
            }
            if (apiKey && typeof (apiKey) !== "string") {
                logger$c.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "eth-mainnet.alchemyapi.io/v2/";
                    break;
                case "ropsten":
                    host = "eth-ropsten.alchemyapi.io/v2/";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.alchemyapi.io/v2/";
                    break;
                case "goerli":
                    host = "eth-goerli.alchemyapi.io/v2/";
                    break;
                case "kovan":
                    host = "eth-kovan.alchemyapi.io/v2/";
                    break;
                case "matic":
                    host = "polygon-mainnet.g.alchemy.com/v2/";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.g.alchemy.com/v2/";
                    break;
                case "arbitrum":
                    host = "arb-mainnet.g.alchemy.com/v2/";
                    break;
                case "arbitrum-rinkeby":
                    host = "arb-rinkeby.g.alchemy.com/v2/";
                    break;
                case "optimism":
                    host = "opt-mainnet.g.alchemy.com/v2/";
                    break;
                case "optimism-kovan":
                    host = "opt-kovan.g.alchemy.com/v2/";
                    break;
                default:
                    logger$c.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return {
                allowGzip: true,
                url: ("https:/" + "/" + host + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey === defaultApiKey$3) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$3);
        }
    }

    const logger$b = new Logger(version$3);
    const defaultApiKey$2 = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
        switch (name) {
            case "homestead":
                return "rpc.ankr.com/eth/";
            case "ropsten":
                return "rpc.ankr.com/eth_ropsten/";
            case "rinkeby":
                return "rpc.ankr.com/eth_rinkeby/";
            case "goerli":
                return "rpc.ankr.com/eth_goerli/";
            case "matic":
                return "rpc.ankr.com/polygon/";
            case "arbitrum":
                return "rpc.ankr.com/arbitrum/";
        }
        return logger$b.throwArgumentError("unsupported network", "name", name);
    }
    class AnkrProvider extends UrlJsonRpcProvider {
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$2);
        }
        static getApiKey(apiKey) {
            if (apiKey == null) {
                return defaultApiKey$2;
            }
            return apiKey;
        }
        static getUrl(network, apiKey) {
            if (apiKey == null) {
                apiKey = defaultApiKey$2;
            }
            const connection = {
                allowGzip: true,
                url: ("https:/\/" + getHost(network.name) + apiKey),
                throttleCallback: (attempt, url) => {
                    if (apiKey.apiKey === defaultApiKey$2) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
    }

    var __awaiter$h = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$a = new Logger(version$3);
    class CloudflareProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey != null) {
                logger$a.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
            }
            return null;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://cloudflare-eth.com/";
                    break;
                default:
                    logger$a.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return host;
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$h(this, void 0, void 0, function* () {
                // The Cloudflare provider does not support eth_blockNumber,
                // so we get the latest block and pull it from that
                if (method === "getBlockNumber") {
                    const block = yield _super.perform.call(this, "getBlock", { blockTag: "latest" });
                    return block.number;
                }
                return _super.perform.call(this, method, params);
            });
        }
    }

    var __awaiter$g = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$9 = new Logger(version$3);
    // The transaction has already been sanitized by the calls in Provider
    function getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
            if (transaction[key] == null) {
                continue;
            }
            let value = transaction[key];
            if (key === "type" && value === 0) {
                continue;
            }
            // Quantity-types require no leading zero, unless 0
            if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
                value = hexValue(hexlify(value));
            }
            else if (key === "accessList") {
                value = "[" + accessListify(value).map((set) => {
                    return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
                }).join(",") + "]";
            }
            else {
                value = hexlify(value);
            }
            result[key] = value;
        }
        return result;
    }
    function getResult(result) {
        // getLogs, getHistory have weird success responses
        if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            return result.result;
        }
        if (result.status != 1 || result.message != "OK") {
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
                error.throttleRetry = true;
            }
            throw error;
        }
        return result.result;
    }
    function getJsonResult(result) {
        // This response indicates we are being throttled
        if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
            const error = new Error("throttled response");
            error.result = JSON.stringify(result);
            error.throttleRetry = true;
            throw error;
        }
        if (result.jsonrpc != "2.0") {
            // @TODO: not any
            const error = new Error("invalid response");
            error.result = JSON.stringify(result);
            throw error;
        }
        if (result.error) {
            // @TODO: not any
            const error = new Error(result.error.message || "unknown error");
            if (result.error.code) {
                error.code = result.error.code;
            }
            if (result.error.data) {
                error.data = result.error.data;
            }
            throw error;
        }
        return result.result;
    }
    // The blockTag was normalized as a string by the Provider pre-perform operations
    function checkLogTag(blockTag) {
        if (blockTag === "pending") {
            throw new Error("pending not supported");
        }
        if (blockTag === "latest") {
            return blockTag;
        }
        return parseInt(blockTag.substring(2), 16);
    }
    const defaultApiKey$1 = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";
    function checkError(method, error, transaction) {
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
            const e = error.error;
            // Etherscan keeps changing their string
            if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
                // Etherscan prefixes the data like "Reverted 0x1234"
                let data = e.data;
                if (data) {
                    data = "0x" + data.replace(/^.*0x/i, "");
                }
                if (isHexString(data)) {
                    return data;
                }
                logger$9.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
                    error, data: "0x"
                });
            }
        }
        // Get the message from any nested error structure
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR) {
            if (error.error && typeof (error.error.message) === "string") {
                message = error.error.message;
            }
            else if (typeof (error.body) === "string") {
                message = error.body;
            }
            else if (typeof (error.responseText) === "string") {
                message = error.responseText;
            }
        }
        message = (message || "").toLowerCase();
        // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"
        if (message.match(/insufficient funds/)) {
            logger$9.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "Transaction with the same hash was already imported."
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
            logger$9.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."
        if (message.match(/another transaction with same nonce/)) {
            logger$9.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        if (message.match(/execution failed due to an exception|execution reverted/)) {
            logger$9.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    class EtherscanProvider extends BaseProvider {
        constructor(network, apiKey) {
            super(network);
            defineReadOnly(this, "baseUrl", this.getBaseUrl());
            defineReadOnly(this, "apiKey", apiKey || defaultApiKey$1);
        }
        getBaseUrl() {
            switch (this.network ? this.network.name : "invalid") {
                case "homestead":
                    return "https:/\/api.etherscan.io";
                case "ropsten":
                    return "https:/\/api-ropsten.etherscan.io";
                case "rinkeby":
                    return "https:/\/api-rinkeby.etherscan.io";
                case "kovan":
                    return "https:/\/api-kovan.etherscan.io";
                case "goerli":
                    return "https:/\/api-goerli.etherscan.io";
                case "optimism":
                    return "https:/\/api-optimistic.etherscan.io";
            }
            return logger$9.throwArgumentError("unsupported network", "network", this.network.name);
        }
        getUrl(module, params) {
            const query = Object.keys(params).reduce((accum, key) => {
                const value = params[key];
                if (value != null) {
                    accum += `&${key}=${value}`;
                }
                return accum;
            }, "");
            const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : "");
            return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
        }
        getPostUrl() {
            return `${this.baseUrl}/api`;
        }
        getPostData(module, params) {
            params.module = module;
            params.apikey = this.apiKey;
            return params;
        }
        fetch(module, params, post) {
            return __awaiter$g(this, void 0, void 0, function* () {
                const url = (post ? this.getPostUrl() : this.getUrl(module, params));
                const payload = (post ? this.getPostData(module, params) : null);
                const procFunc = (module === "proxy") ? getJsonResult : getResult;
                this.emit("debug", {
                    action: "request",
                    request: url,
                    provider: this
                });
                const connection = {
                    url: url,
                    throttleSlotInterval: 1000,
                    throttleCallback: (attempt, url) => {
                        if (this.isCommunityResource()) {
                            showThrottleMessage();
                        }
                        return Promise.resolve(true);
                    }
                };
                let payloadStr = null;
                if (payload) {
                    connection.headers = { "content-type": "application/x-www-form-urlencoded; charset=UTF-8" };
                    payloadStr = Object.keys(payload).map((key) => {
                        return `${key}=${payload[key]}`;
                    }).join("&");
                }
                const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);
                this.emit("debug", {
                    action: "response",
                    request: url,
                    response: deepCopy(result),
                    provider: this
                });
                return result;
            });
        }
        detectNetwork() {
            return __awaiter$g(this, void 0, void 0, function* () {
                return this.network;
            });
        }
        perform(method, params) {
            const _super = Object.create(null, {
                perform: { get: () => super.perform }
            });
            return __awaiter$g(this, void 0, void 0, function* () {
                switch (method) {
                    case "getBlockNumber":
                        return this.fetch("proxy", { action: "eth_blockNumber" });
                    case "getGasPrice":
                        return this.fetch("proxy", { action: "eth_gasPrice" });
                    case "getBalance":
                        // Returns base-10 result
                        return this.fetch("account", {
                            action: "balance",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getTransactionCount":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionCount",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getCode":
                        return this.fetch("proxy", {
                            action: "eth_getCode",
                            address: params.address,
                            tag: params.blockTag
                        });
                    case "getStorageAt":
                        return this.fetch("proxy", {
                            action: "eth_getStorageAt",
                            address: params.address,
                            position: params.position,
                            tag: params.blockTag
                        });
                    case "sendTransaction":
                        return this.fetch("proxy", {
                            action: "eth_sendRawTransaction",
                            hex: params.signedTransaction
                        }, true).catch((error) => {
                            return checkError("sendTransaction", error, params.signedTransaction);
                        });
                    case "getBlock":
                        if (params.blockTag) {
                            return this.fetch("proxy", {
                                action: "eth_getBlockByNumber",
                                tag: params.blockTag,
                                boolean: (params.includeTransactions ? "true" : "false")
                            });
                        }
                        throw new Error("getBlock by blockHash not implemented");
                    case "getTransaction":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionByHash",
                            txhash: params.transactionHash
                        });
                    case "getTransactionReceipt":
                        return this.fetch("proxy", {
                            action: "eth_getTransactionReceipt",
                            txhash: params.transactionHash
                        });
                    case "call": {
                        if (params.blockTag !== "latest") {
                            throw new Error("EtherscanProvider does not support blockTag for call");
                        }
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_call";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("call", error, params.transaction);
                        }
                    }
                    case "estimateGas": {
                        const postData = getTransactionPostData(params.transaction);
                        postData.module = "proxy";
                        postData.action = "eth_estimateGas";
                        try {
                            return yield this.fetch("proxy", postData, true);
                        }
                        catch (error) {
                            return checkError("estimateGas", error, params.transaction);
                        }
                    }
                    case "getLogs": {
                        const args = { action: "getLogs" };
                        if (params.filter.fromBlock) {
                            args.fromBlock = checkLogTag(params.filter.fromBlock);
                        }
                        if (params.filter.toBlock) {
                            args.toBlock = checkLogTag(params.filter.toBlock);
                        }
                        if (params.filter.address) {
                            args.address = params.filter.address;
                        }
                        // @TODO: We can handle slightly more complicated logs using the logs API
                        if (params.filter.topics && params.filter.topics.length > 0) {
                            if (params.filter.topics.length > 1) {
                                logger$9.throwError("unsupported topic count", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                            }
                            if (params.filter.topics.length === 1) {
                                const topic0 = params.filter.topics[0];
                                if (typeof (topic0) !== "string" || topic0.length !== 66) {
                                    logger$9.throwError("unsupported topic format", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                                }
                                args.topic0 = topic0;
                            }
                        }
                        const logs = yield this.fetch("logs", args);
                        // Cache txHash => blockHash
                        let blocks = {};
                        // Add any missing blockHash to the logs
                        for (let i = 0; i < logs.length; i++) {
                            const log = logs[i];
                            if (log.blockHash != null) {
                                continue;
                            }
                            if (blocks[log.blockNumber] == null) {
                                const block = yield this.getBlock(log.blockNumber);
                                if (block) {
                                    blocks[log.blockNumber] = block.hash;
                                }
                            }
                            log.blockHash = blocks[log.blockNumber];
                        }
                        return logs;
                    }
                    case "getEtherPrice":
                        if (this.network.name !== "homestead") {
                            return 0.0;
                        }
                        return parseFloat((yield this.fetch("stats", { action: "ethprice" })).ethusd);
                }
                return _super.perform.call(this, method, params);
            });
        }
        // Note: The `page` page parameter only allows pagination within the
        //       10,000 window available without a page and offset parameter
        //       Error: Result window is too large, PageNo x Offset size must
        //              be less than or equal to 10000
        getHistory(addressOrName, startBlock, endBlock) {
            return __awaiter$g(this, void 0, void 0, function* () {
                const params = {
                    action: "txlist",
                    address: (yield this.resolveName(addressOrName)),
                    startblock: ((startBlock == null) ? 0 : startBlock),
                    endblock: ((endBlock == null) ? 99999999 : endBlock),
                    sort: "asc"
                };
                const result = yield this.fetch("account", params);
                return result.map((tx) => {
                    ["contractAddress", "to"].forEach(function (key) {
                        if (tx[key] == "") {
                            delete tx[key];
                        }
                    });
                    if (tx.creates == null && tx.contractAddress != null) {
                        tx.creates = tx.contractAddress;
                    }
                    const item = this.formatter.transactionResponse(tx);
                    if (tx.timeStamp) {
                        item.timestamp = parseInt(tx.timeStamp);
                    }
                    return item;
                });
            });
        }
        isCommunityResource() {
            return (this.apiKey === defaultApiKey$1);
        }
    }

    var __awaiter$f = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$8 = new Logger(version$3);
    function now() { return (new Date()).getTime(); }
    // Returns to network as long as all agree, or null if any is null.
    // Throws an error if any two networks do not match.
    function checkNetworks(networks) {
        let result = null;
        for (let i = 0; i < networks.length; i++) {
            const network = networks[i];
            // Null! We do not know our network; bail.
            if (network == null) {
                return null;
            }
            if (result) {
                // Make sure the network matches the previous networks
                if (!(result.name === network.name && result.chainId === network.chainId &&
                    ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {
                    logger$8.throwArgumentError("provider mismatch", "networks", networks);
                }
            }
            else {
                result = network;
            }
        }
        return result;
    }
    function median(values, maxDelta) {
        values = values.slice().sort();
        const middle = Math.floor(values.length / 2);
        // Odd length; take the middle
        if (values.length % 2) {
            return values[middle];
        }
        // Even length; take the average of the two middle
        const a = values[middle - 1], b = values[middle];
        if (maxDelta != null && Math.abs(a - b) > maxDelta) {
            return null;
        }
        return (a + b) / 2;
    }
    function serialize(value) {
        if (value === null) {
            return "null";
        }
        else if (typeof (value) === "number" || typeof (value) === "boolean") {
            return JSON.stringify(value);
        }
        else if (typeof (value) === "string") {
            return value;
        }
        else if (BigNumber.isBigNumber(value)) {
            return value.toString();
        }
        else if (Array.isArray(value)) {
            return JSON.stringify(value.map((i) => serialize(i)));
        }
        else if (typeof (value) === "object") {
            const keys = Object.keys(value);
            keys.sort();
            return "{" + keys.map((key) => {
                let v = value[key];
                if (typeof (v) === "function") {
                    v = "[function]";
                }
                else {
                    v = serialize(v);
                }
                return JSON.stringify(key) + ":" + v;
            }).join(",") + "}";
        }
        throw new Error("unknown value type: " + typeof (value));
    }
    // Next request ID to use for emitting debug info
    let nextRid = 1;
    function stall(duration) {
        let cancel = null;
        let timer = null;
        let promise = (new Promise((resolve) => {
            cancel = function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
                resolve();
            };
            timer = setTimeout(cancel, duration);
        }));
        const wait = (func) => {
            promise = promise.then(func);
            return promise;
        };
        function getPromise() {
            return promise;
        }
        return { cancel, getPromise, wait };
    }
    const ForwardErrors = [
        Logger.errors.CALL_EXCEPTION,
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
        Logger.errors.UNPREDICTABLE_GAS_LIMIT
    ];
    const ForwardProperties = [
        "address",
        "args",
        "errorArgs",
        "errorSignature",
        "method",
        "transaction",
    ];
    function exposeDebugConfig(config, now) {
        const result = {
            weight: config.weight
        };
        Object.defineProperty(result, "provider", { get: () => config.provider });
        if (config.start) {
            result.start = config.start;
        }
        if (now) {
            result.duration = (now - config.start);
        }
        if (config.done) {
            if (config.error) {
                result.error = config.error;
            }
            else {
                result.result = config.result || null;
            }
        }
        return result;
    }
    function normalizedTally(normalize, quorum) {
        return function (configs) {
            // Count the votes for each result
            const tally = {};
            configs.forEach((c) => {
                const value = normalize(c.result);
                if (!tally[value]) {
                    tally[value] = { count: 0, result: c.result };
                }
                tally[value].count++;
            });
            // Check for a quorum on any given result
            const keys = Object.keys(tally);
            for (let i = 0; i < keys.length; i++) {
                const check = tally[keys[i]];
                if (check.count >= quorum) {
                    return check.result;
                }
            }
            // No quroum
            return undefined;
        };
    }
    function getProcessFunc(provider, method, params) {
        let normalize = serialize;
        switch (method) {
            case "getBlockNumber":
                // Return the median value, unless there is (median + 1) is also
                // present, in which case that is probably true and the median
                // is going to be stale soon. In the event of a malicious node,
                // the lie will be true soon enough.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    // Get the median block number
                    let blockNumber = median(configs.map((c) => c.result), 2);
                    if (blockNumber == null) {
                        return undefined;
                    }
                    blockNumber = Math.ceil(blockNumber);
                    // If the next block height is present, its prolly safe to use
                    if (values.indexOf(blockNumber + 1) >= 0) {
                        blockNumber++;
                    }
                    // Don't ever roll back the blockNumber
                    if (blockNumber >= provider._highestBlockNumber) {
                        provider._highestBlockNumber = blockNumber;
                    }
                    return provider._highestBlockNumber;
                };
            case "getGasPrice":
                // Return the middle (round index up) value, similar to median
                // but do not average even entries and choose the higher.
                // Malicious actors must compromise 50% of the nodes to lie.
                return function (configs) {
                    const values = configs.map((c) => c.result);
                    values.sort();
                    return values[Math.floor(values.length / 2)];
                };
            case "getEtherPrice":
                // Returns the median price. Malicious actors must compromise at
                // least 50% of the nodes to lie (in a meaningful way).
                return function (configs) {
                    return median(configs.map((c) => c.result));
                };
            // No additional normalizing required; serialize is enough
            case "getBalance":
            case "getTransactionCount":
            case "getCode":
            case "getStorageAt":
            case "call":
            case "estimateGas":
            case "getLogs":
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getTransaction":
            case "getTransactionReceipt":
                normalize = function (tx) {
                    if (tx == null) {
                        return null;
                    }
                    tx = shallowCopy(tx);
                    tx.confirmations = -1;
                    return serialize(tx);
                };
                break;
            // We drop the confirmations from transactions as it is approximate
            case "getBlock":
                // We drop the confirmations from transactions as it is approximate
                if (params.includeTransactions) {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        block = shallowCopy(block);
                        block.transactions = block.transactions.map((tx) => {
                            tx = shallowCopy(tx);
                            tx.confirmations = -1;
                            return tx;
                        });
                        return serialize(block);
                    };
                }
                else {
                    normalize = function (block) {
                        if (block == null) {
                            return null;
                        }
                        return serialize(block);
                    };
                }
                break;
            default:
                throw new Error("unknown method: " + method);
        }
        // Return the result if and only if the expected quorum is
        // satisfied and agreed upon for the final result.
        return normalizedTally(normalize, provider.quorum);
    }
    // If we are doing a blockTag query, we need to make sure the backend is
    // caught up to the FallbackProvider, before sending a request to it.
    function waitForSync(config, blockNumber) {
        return __awaiter$f(this, void 0, void 0, function* () {
            const provider = (config.provider);
            if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {
                return provider;
            }
            return poll(() => {
                return new Promise((resolve, reject) => {
                    setTimeout(function () {
                        // We are synced
                        if (provider.blockNumber >= blockNumber) {
                            return resolve(provider);
                        }
                        // We're done; just quit
                        if (config.cancelled) {
                            return resolve(null);
                        }
                        // Try again, next block
                        return resolve(undefined);
                    }, 0);
                });
            }, { oncePoll: provider });
        });
    }
    function getRunner(config, currentBlockNumber, method, params) {
        return __awaiter$f(this, void 0, void 0, function* () {
            let provider = config.provider;
            switch (method) {
                case "getBlockNumber":
                case "getGasPrice":
                    return provider[method]();
                case "getEtherPrice":
                    if (provider.getEtherPrice) {
                        return provider.getEtherPrice();
                    }
                    break;
                case "getBalance":
                case "getTransactionCount":
                case "getCode":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[method](params.address, params.blockTag || "latest");
                case "getStorageAt":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");
                case "getBlock":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[(params.includeTransactions ? "getBlockWithTransactions" : "getBlock")](params.blockTag || params.blockHash);
                case "call":
                case "estimateGas":
                    if (params.blockTag && isHexString(params.blockTag)) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider[method](params.transaction);
                case "getTransaction":
                case "getTransactionReceipt":
                    return provider[method](params.transactionHash);
                case "getLogs": {
                    let filter = params.filter;
                    if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {
                        provider = yield waitForSync(config, currentBlockNumber);
                    }
                    return provider.getLogs(filter);
                }
            }
            return logger$8.throwError("unknown method error", Logger.errors.UNKNOWN_ERROR, {
                method: method,
                params: params
            });
        });
    }
    class FallbackProvider extends BaseProvider {
        constructor(providers, quorum) {
            if (providers.length === 0) {
                logger$8.throwArgumentError("missing providers", "providers", providers);
            }
            const providerConfigs = providers.map((configOrProvider, index) => {
                if (Provider.isProvider(configOrProvider)) {
                    const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                    const priority = 1;
                    return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });
                }
                const config = shallowCopy(configOrProvider);
                if (config.priority == null) {
                    config.priority = 1;
                }
                if (config.stallTimeout == null) {
                    config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;
                }
                if (config.weight == null) {
                    config.weight = 1;
                }
                const weight = config.weight;
                if (weight % 1 || weight > 512 || weight < 1) {
                    logger$8.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
                }
                return Object.freeze(config);
            });
            const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);
            if (quorum == null) {
                quorum = total / 2;
            }
            else if (quorum > total) {
                logger$8.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
            }
            // Are all providers' networks are known
            let networkOrReady = checkNetworks(providerConfigs.map((c) => (c.provider).network));
            // Not all networks are known; we must stall
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then(resolve, reject);
                    }, 0);
                });
            }
            super(networkOrReady);
            // Preserve a copy, so we do not get mutated
            defineReadOnly(this, "providerConfigs", Object.freeze(providerConfigs));
            defineReadOnly(this, "quorum", quorum);
            this._highestBlockNumber = -1;
        }
        detectNetwork() {
            return __awaiter$f(this, void 0, void 0, function* () {
                const networks = yield Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));
                return checkNetworks(networks);
            });
        }
        perform(method, params) {
            return __awaiter$f(this, void 0, void 0, function* () {
                // Sending transactions is special; always broadcast it to all backends
                if (method === "sendTransaction") {
                    const results = yield Promise.all(this.providerConfigs.map((c) => {
                        return c.provider.sendTransaction(params.signedTransaction).then((result) => {
                            return result.hash;
                        }, (error) => {
                            return error;
                        });
                    }));
                    // Any success is good enough (other errors are likely "already seen" errors
                    for (let i = 0; i < results.length; i++) {
                        const result = results[i];
                        if (typeof (result) === "string") {
                            return result;
                        }
                    }
                    // They were all an error; pick the first error
                    throw results[0];
                }
                // We need to make sure we are in sync with our backends, so we need
                // to know this before we can make a lot of calls
                if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
                    yield this.getBlockNumber();
                }
                const processFunc = getProcessFunc(this, method, params);
                // Shuffle the providers and then sort them by their priority; we
                // shallowCopy them since we will store the result in them too
                const configs = shuffled(this.providerConfigs.map(shallowCopy));
                configs.sort((a, b) => (a.priority - b.priority));
                const currentBlockNumber = this._highestBlockNumber;
                let i = 0;
                let first = true;
                while (true) {
                    const t0 = now();
                    // Compute the inflight weight (exclude anything past)
                    let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))
                        .reduce((accum, c) => (accum + c.weight), 0);
                    // Start running enough to meet quorum
                    while (inflightWeight < this.quorum && i < configs.length) {
                        const config = configs[i++];
                        const rid = nextRid++;
                        config.start = now();
                        config.staller = stall(config.stallTimeout);
                        config.staller.wait(() => { config.staller = null; });
                        config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {
                            config.done = true;
                            config.result = result;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        }, (error) => {
                            config.done = true;
                            config.error = error;
                            if (this.listenerCount("debug")) {
                                this.emit("debug", {
                                    action: "request",
                                    rid: rid,
                                    backend: exposeDebugConfig(config, now()),
                                    request: { method: method, params: deepCopy(params) },
                                    provider: this
                                });
                            }
                        });
                        if (this.listenerCount("debug")) {
                            this.emit("debug", {
                                action: "request",
                                rid: rid,
                                backend: exposeDebugConfig(config, null),
                                request: { method: method, params: deepCopy(params) },
                                provider: this
                            });
                        }
                        inflightWeight += config.weight;
                    }
                    // Wait for anything meaningful to finish or stall out
                    const waiting = [];
                    configs.forEach((c) => {
                        if (c.done || !c.runner) {
                            return;
                        }
                        waiting.push(c.runner);
                        if (c.staller) {
                            waiting.push(c.staller.getPromise());
                        }
                    });
                    if (waiting.length) {
                        yield Promise.race(waiting);
                    }
                    // Check the quorum and process the results; the process function
                    // may additionally decide the quorum is not met
                    const results = configs.filter((c) => (c.done && c.error == null));
                    if (results.length >= this.quorum) {
                        const result = processFunc(results);
                        if (result !== undefined) {
                            // Shut down any stallers
                            configs.forEach(c => {
                                if (c.staller) {
                                    c.staller.cancel();
                                }
                                c.cancelled = true;
                            });
                            return result;
                        }
                        if (!first) {
                            yield stall(100).getPromise();
                        }
                        first = false;
                    }
                    // No result, check for errors that should be forwarded
                    const errors = configs.reduce((accum, c) => {
                        if (!c.done || c.error == null) {
                            return accum;
                        }
                        const code = (c.error).code;
                        if (ForwardErrors.indexOf(code) >= 0) {
                            if (!accum[code]) {
                                accum[code] = { error: c.error, weight: 0 };
                            }
                            accum[code].weight += c.weight;
                        }
                        return accum;
                    }, ({}));
                    Object.keys(errors).forEach((errorCode) => {
                        const tally = errors[errorCode];
                        if (tally.weight < this.quorum) {
                            return;
                        }
                        // Shut down any stallers
                        configs.forEach(c => {
                            if (c.staller) {
                                c.staller.cancel();
                            }
                            c.cancelled = true;
                        });
                        const e = (tally.error);
                        const props = {};
                        ForwardProperties.forEach((name) => {
                            if (e[name] == null) {
                                return;
                            }
                            props[name] = e[name];
                        });
                        logger$8.throwError(e.reason || e.message, errorCode, props);
                    });
                    // All configs have run to completion; we will never get more data
                    if (configs.filter((c) => !c.done).length === 0) {
                        break;
                    }
                }
                // Shut down any stallers; shouldn't be any
                configs.forEach(c => {
                    if (c.staller) {
                        c.staller.cancel();
                    }
                    c.cancelled = true;
                });
                return logger$8.throwError("failed to meet quorum", Logger.errors.SERVER_ERROR, {
                    method: method,
                    params: params,
                    //results: configs.map((c) => c.result),
                    //errors: configs.map((c) => c.error),
                    results: configs.map((c) => exposeDebugConfig(c)),
                    provider: this
                });
            });
        }
    }

    const IpcProvider = null;

    const logger$7 = new Logger(version$3);
    const defaultProjectId = "84842078b09946638c03157f83405213";
    class InfuraWebSocketProvider extends WebSocketProvider {
        constructor(network, apiKey) {
            const provider = new InfuraProvider(network, apiKey);
            const connection = provider.connection;
            if (connection.password) {
                logger$7.throwError("INFURA WebSocket project secrets unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "InfuraProvider.getWebSocketProvider()"
                });
            }
            const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
            super(url, network);
            defineReadOnly(this, "apiKey", provider.projectId);
            defineReadOnly(this, "projectId", provider.projectId);
            defineReadOnly(this, "projectSecret", provider.projectSecret);
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }
    class InfuraProvider extends UrlJsonRpcProvider {
        static getWebSocketProvider(network, apiKey) {
            return new InfuraWebSocketProvider(network, apiKey);
        }
        static getApiKey(apiKey) {
            const apiKeyObj = {
                apiKey: defaultProjectId,
                projectId: defaultProjectId,
                projectSecret: null
            };
            if (apiKey == null) {
                return apiKeyObj;
            }
            if (typeof (apiKey) === "string") {
                apiKeyObj.projectId = apiKey;
            }
            else if (apiKey.projectSecret != null) {
                logger$7.assertArgument((typeof (apiKey.projectId) === "string"), "projectSecret requires a projectId", "projectId", apiKey.projectId);
                logger$7.assertArgument((typeof (apiKey.projectSecret) === "string"), "invalid projectSecret", "projectSecret", "[REDACTED]");
                apiKeyObj.projectId = apiKey.projectId;
                apiKeyObj.projectSecret = apiKey.projectSecret;
            }
            else if (apiKey.projectId) {
                apiKeyObj.projectId = apiKey.projectId;
            }
            apiKeyObj.apiKey = apiKeyObj.projectId;
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "mainnet.infura.io";
                    break;
                case "ropsten":
                    host = "ropsten.infura.io";
                    break;
                case "rinkeby":
                    host = "rinkeby.infura.io";
                    break;
                case "kovan":
                    host = "kovan.infura.io";
                    break;
                case "goerli":
                    host = "goerli.infura.io";
                    break;
                case "matic":
                    host = "polygon-mainnet.infura.io";
                    break;
                case "maticmum":
                    host = "polygon-mumbai.infura.io";
                    break;
                case "optimism":
                    host = "optimism-mainnet.infura.io";
                    break;
                case "optimism-kovan":
                    host = "optimism-kovan.infura.io";
                    break;
                case "arbitrum":
                    host = "arbitrum-mainnet.infura.io";
                    break;
                case "arbitrum-rinkeby":
                    host = "arbitrum-rinkeby.infura.io";
                    break;
                default:
                    logger$7.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            const connection = {
                allowGzip: true,
                url: ("https:/" + "/" + host + "/v3/" + apiKey.projectId),
                throttleCallback: (attempt, url) => {
                    if (apiKey.projectId === defaultProjectId) {
                        showThrottleMessage();
                    }
                    return Promise.resolve(true);
                }
            };
            if (apiKey.projectSecret != null) {
                connection.user = "";
                connection.password = apiKey.projectSecret;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.projectId === defaultProjectId);
        }
    }

    // Experimental
    class JsonRpcBatchProvider extends JsonRpcProvider {
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            if (this._pendingBatch == null) {
                this._pendingBatch = [];
            }
            const inflightRequest = { request, resolve: null, reject: null };
            const promise = new Promise((resolve, reject) => {
                inflightRequest.resolve = resolve;
                inflightRequest.reject = reject;
            });
            this._pendingBatch.push(inflightRequest);
            if (!this._pendingBatchAggregator) {
                // Schedule batch for next event loop + short duration
                this._pendingBatchAggregator = setTimeout(() => {
                    // Get teh current batch and clear it, so new requests
                    // go into the next batch
                    const batch = this._pendingBatch;
                    this._pendingBatch = null;
                    this._pendingBatchAggregator = null;
                    // Get the request as an array of requests
                    const request = batch.map((inflight) => inflight.request);
                    this.emit("debug", {
                        action: "requestBatch",
                        request: deepCopy(request),
                        provider: this
                    });
                    return fetchJson(this.connection, JSON.stringify(request)).then((result) => {
                        this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: this
                        });
                        // For each result, feed it to the correct Promise, depending
                        // on whether it was a success or error
                        batch.forEach((inflightRequest, index) => {
                            const payload = result[index];
                            if (payload.error) {
                                const error = new Error(payload.error.message);
                                error.code = payload.error.code;
                                error.data = payload.error.data;
                                inflightRequest.reject(error);
                            }
                            else {
                                inflightRequest.resolve(payload.result);
                            }
                        });
                    }, (error) => {
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: this
                        });
                        batch.forEach((inflightRequest) => {
                            inflightRequest.reject(error);
                        });
                    });
                }, 10);
            }
            return promise;
        }
    }

    /* istanbul ignore file */
    const logger$6 = new Logger(version$3);
    // Special API key provided by Nodesmith for ethers.js
    const defaultApiKey = "ETHERS_JS_SHARED";
    class NodesmithProvider extends UrlJsonRpcProvider {
        static getApiKey(apiKey) {
            if (apiKey && typeof (apiKey) !== "string") {
                logger$6.throwArgumentError("invalid apiKey", "apiKey", apiKey);
            }
            return apiKey || defaultApiKey;
        }
        static getUrl(network, apiKey) {
            logger$6.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
            let host = null;
            switch (network.name) {
                case "homestead":
                    host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
                    break;
                case "ropsten":
                    host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
                    break;
                case "rinkeby":
                    host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
                    break;
                case "goerli":
                    host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
                    break;
                case "kovan":
                    host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
                    break;
                default:
                    logger$6.throwArgumentError("unsupported network", "network", arguments[0]);
            }
            return (host + "?apiKey=" + apiKey);
        }
    }

    const logger$5 = new Logger(version$3);
    // These are load-balancer-based application IDs
    const defaultApplicationIds = {
        homestead: "6004bcd10040261633ade990",
        ropsten: "6004bd4d0040261633ade991",
        rinkeby: "6004bda20040261633ade994",
        goerli: "6004bd860040261633ade992",
    };
    class PocketProvider extends UrlJsonRpcProvider {
        constructor(network, apiKey) {
            // We need a bit of creativity in the constructor because
            // Pocket uses different default API keys based on the network
            if (apiKey == null) {
                const n = getStatic(new.target, "getNetwork")(network);
                if (n) {
                    const applicationId = defaultApplicationIds[n.name];
                    if (applicationId) {
                        apiKey = {
                            applicationId: applicationId,
                            loadBalancer: true
                        };
                    }
                }
                // If there was any issue above, we don't know this network
                if (apiKey == null) {
                    logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
                }
            }
            super(network, apiKey);
        }
        static getApiKey(apiKey) {
            // Most API Providers allow null to get the default configuration, but
            // Pocket requires the network to decide the default provider, so we
            // rely on hijacking the constructor to add a sensible default for us
            if (apiKey == null) {
                logger$5.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
            }
            const apiKeyObj = {
                applicationId: null,
                loadBalancer: false,
                applicationSecretKey: null
            };
            // Parse applicationId and applicationSecretKey
            if (typeof (apiKey) === "string") {
                apiKeyObj.applicationId = apiKey;
            }
            else if (apiKey.applicationSecretKey != null) {
                logger$5.assertArgument((typeof (apiKey.applicationId) === "string"), "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
                logger$5.assertArgument((typeof (apiKey.applicationSecretKey) === "string"), "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else if (apiKey.applicationId) {
                logger$5.assertArgument((typeof (apiKey.applicationId) === "string"), "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
                apiKeyObj.applicationId = apiKey.applicationId;
                apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
            }
            else {
                logger$5.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
            }
            return apiKeyObj;
        }
        static getUrl(network, apiKey) {
            let host = null;
            switch (network ? network.name : "unknown") {
                case "homestead":
                    host = "eth-mainnet.gateway.pokt.network";
                    break;
                case "ropsten":
                    host = "eth-ropsten.gateway.pokt.network";
                    break;
                case "rinkeby":
                    host = "eth-rinkeby.gateway.pokt.network";
                    break;
                case "goerli":
                    host = "eth-goerli.gateway.pokt.network";
                    break;
                default:
                    logger$5.throwError("unsupported network", Logger.errors.INVALID_ARGUMENT, {
                        argument: "network",
                        value: network
                    });
            }
            let url = null;
            if (apiKey.loadBalancer) {
                url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
            }
            else {
                url = `https:/\/${host}/v1/${apiKey.applicationId}`;
            }
            const connection = { url };
            // Initialize empty headers
            connection.headers = {};
            // Apply application secret key
            if (apiKey.applicationSecretKey != null) {
                connection.user = "";
                connection.password = apiKey.applicationSecretKey;
            }
            return connection;
        }
        isCommunityResource() {
            return (this.applicationId === defaultApplicationIds[this.network.name]);
        }
    }

    const logger$4 = new Logger(version$3);
    let _nextId = 1;
    function buildWeb3LegacyFetcher(provider, sendFunc) {
        const fetcher = "Web3LegacyFetcher";
        return function (method, params) {
            const request = {
                method: method,
                params: params,
                id: (_nextId++),
                jsonrpc: "2.0"
            };
            return new Promise((resolve, reject) => {
                this.emit("debug", {
                    action: "request",
                    fetcher,
                    request: deepCopy(request),
                    provider: this
                });
                sendFunc(request, (error, response) => {
                    if (error) {
                        this.emit("debug", {
                            action: "response",
                            fetcher,
                            error,
                            request,
                            provider: this
                        });
                        return reject(error);
                    }
                    this.emit("debug", {
                        action: "response",
                        fetcher,
                        request,
                        response,
                        provider: this
                    });
                    if (response.error) {
                        const error = new Error(response.error.message);
                        error.code = response.error.code;
                        error.data = response.error.data;
                        return reject(error);
                    }
                    resolve(response.result);
                });
            });
        };
    }
    function buildEip1193Fetcher(provider) {
        return function (method, params) {
            if (params == null) {
                params = [];
            }
            const request = { method, params };
            this.emit("debug", {
                action: "request",
                fetcher: "Eip1193Fetcher",
                request: deepCopy(request),
                provider: this
            });
            return provider.request(request).then((response) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    response,
                    provider: this
                });
                return response;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    fetcher: "Eip1193Fetcher",
                    request,
                    error,
                    provider: this
                });
                throw error;
            });
        };
    }
    class Web3Provider extends JsonRpcProvider {
        constructor(provider, network) {
            if (provider == null) {
                logger$4.throwArgumentError("missing provider", "provider", provider);
            }
            let path = null;
            let jsonRpcFetchFunc = null;
            let subprovider = null;
            if (typeof (provider) === "function") {
                path = "unknown:";
                jsonRpcFetchFunc = provider;
            }
            else {
                path = provider.host || provider.path || "";
                if (!path && provider.isMetaMask) {
                    path = "metamask";
                }
                subprovider = provider;
                if (provider.request) {
                    if (path === "") {
                        path = "eip-1193:";
                    }
                    jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                }
                else if (provider.sendAsync) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                }
                else if (provider.send) {
                    jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                }
                else {
                    logger$4.throwArgumentError("unsupported provider", "provider", provider);
                }
                if (!path) {
                    path = "unknown:";
                }
            }
            super(path, network);
            defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
            defineReadOnly(this, "provider", subprovider);
        }
        send(method, params) {
            return this.jsonRpcFetchFunc(method, params);
        }
    }

    const logger$3 = new Logger(version$3);
    ////////////////////////
    // Helper Functions
    function getDefaultProvider(network, options) {
        if (network == null) {
            network = "homestead";
        }
        // If passed a URL, figure out the right type of provider based on the scheme
        if (typeof (network) === "string") {
            // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
            // Handle http and ws (and their secure variants)
            const match = network.match(/^(ws|http)s?:/i);
            if (match) {
                switch (match[1].toLowerCase()) {
                    case "http":
                    case "https":
                        return new JsonRpcProvider(network);
                    case "ws":
                    case "wss":
                        return new WebSocketProvider(network);
                    default:
                        logger$3.throwArgumentError("unsupported URL scheme", "network", network);
                }
            }
        }
        const n = getNetwork(network);
        if (!n || !n._defaultProvider) {
            logger$3.throwError("unsupported getDefaultProvider network", Logger.errors.NETWORK_ERROR, {
                operation: "getDefaultProvider",
                network: network
            });
        }
        return n._defaultProvider({
            FallbackProvider,
            AlchemyProvider,
            AnkrProvider,
            CloudflareProvider,
            EtherscanProvider,
            InfuraProvider,
            JsonRpcProvider,
            NodesmithProvider,
            PocketProvider,
            Web3Provider,
            IpcProvider,
        }, options);
    }

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Provider: Provider,
        BaseProvider: BaseProvider,
        Resolver: Resolver,
        UrlJsonRpcProvider: UrlJsonRpcProvider,
        FallbackProvider: FallbackProvider,
        AlchemyProvider: AlchemyProvider,
        AlchemyWebSocketProvider: AlchemyWebSocketProvider,
        AnkrProvider: AnkrProvider,
        CloudflareProvider: CloudflareProvider,
        EtherscanProvider: EtherscanProvider,
        InfuraProvider: InfuraProvider,
        InfuraWebSocketProvider: InfuraWebSocketProvider,
        JsonRpcProvider: JsonRpcProvider,
        JsonRpcBatchProvider: JsonRpcBatchProvider,
        NodesmithProvider: NodesmithProvider,
        PocketProvider: PocketProvider,
        StaticJsonRpcProvider: StaticJsonRpcProvider,
        Web3Provider: Web3Provider,
        WebSocketProvider: WebSocketProvider,
        IpcProvider: IpcProvider,
        JsonRpcSigner: JsonRpcSigner,
        getDefaultProvider: getDefaultProvider,
        getNetwork: getNetwork,
        isCommunityResource: isCommunityResource,
        isCommunityResourcable: isCommunityResourcable,
        showThrottleMessage: showThrottleMessage,
        Formatter: Formatter
    });

    const version$2 = "solidity/5.6.1";

    const regexBytes = new RegExp("^bytes([0-9]+)$");
    const regexNumber = new RegExp("^(u?int)([0-9]*)$");
    const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
    const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
    const logger$2 = new Logger(version$2);
    function _pack(type, value, isArray) {
        switch (type) {
            case "address":
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
            case "string":
                return toUtf8Bytes(value);
            case "bytes":
                return arrayify(value);
            case "bool":
                value = (value ? "0x01" : "0x00");
                if (isArray) {
                    return zeroPad(value, 32);
                }
                return arrayify(value);
        }
        let match = type.match(regexNumber);
        if (match) {
            //let signed = (match[1] === "int")
            let size = parseInt(match[2] || "256");
            if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                logger$2.throwArgumentError("invalid number type", "type", type);
            }
            if (isArray) {
                size = 256;
            }
            value = BigNumber.from(value).toTwos(size);
            return zeroPad(value, size / 8);
        }
        match = type.match(regexBytes);
        if (match) {
            const size = parseInt(match[1]);
            if (String(size) !== match[1] || size === 0 || size > 32) {
                logger$2.throwArgumentError("invalid bytes type", "type", type);
            }
            if (arrayify(value).byteLength !== size) {
                logger$2.throwArgumentError(`invalid value for ${type}`, "value", value);
            }
            if (isArray) {
                return arrayify((value + Zeros).substring(0, 66));
            }
            return value;
        }
        match = type.match(regexArray);
        if (match && Array.isArray(value)) {
            const baseType = match[1];
            const count = parseInt(match[2] || String(value.length));
            if (count != value.length) {
                logger$2.throwArgumentError(`invalid array length for ${type}`, "value", value);
            }
            const result = [];
            value.forEach(function (value) {
                result.push(_pack(baseType, value, true));
            });
            return concat(result);
        }
        return logger$2.throwArgumentError("invalid type", "type", type);
    }
    // @TODO: Array Enum
    function pack(types, values) {
        if (types.length != values.length) {
            logger$2.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
        }
        const tight = [];
        types.forEach(function (type, index) {
            tight.push(_pack(type, values[index]));
        });
        return hexlify(concat(tight));
    }
    function keccak256(types, values) {
        return keccak256$1(pack(types, values));
    }
    function sha256(types, values) {
        return sha256$1(pack(types, values));
    }

    const version$1 = "units/5.6.1";

    const logger$1 = new Logger(version$1);
    const names = [
        "wei",
        "kwei",
        "mwei",
        "gwei",
        "szabo",
        "finney",
        "ether",
    ];
    // Some environments have issues with RegEx that contain back-tracking, so we cannot
    // use them.
    function commify(value) {
        const comps = String(value).split(".");
        if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
            logger$1.throwArgumentError("invalid value", "value", value);
        }
        // Make sure we have at least one whole digit (0 if none)
        let whole = comps[0];
        let negative = "";
        if (whole.substring(0, 1) === "-") {
            negative = "-";
            whole = whole.substring(1);
        }
        // Make sure we have at least 1 whole digit with no leading zeros
        while (whole.substring(0, 1) === "0") {
            whole = whole.substring(1);
        }
        if (whole === "") {
            whole = "0";
        }
        let suffix = "";
        if (comps.length === 2) {
            suffix = "." + (comps[1] || "0");
        }
        while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
            suffix = suffix.substring(0, suffix.length - 1);
        }
        const formatted = [];
        while (whole.length) {
            if (whole.length <= 3) {
                formatted.unshift(whole);
                break;
            }
            else {
                const index = whole.length - 3;
                formatted.unshift(whole.substring(index));
                whole = whole.substring(0, index);
            }
        }
        return negative + formatted.join(",") + suffix;
    }
    function formatUnits(value, unitName) {
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return formatFixed(value, (unitName != null) ? unitName : 18);
    }
    function parseUnits(value, unitName) {
        if (typeof (value) !== "string") {
            logger$1.throwArgumentError("value must be a string", "value", value);
        }
        if (typeof (unitName) === "string") {
            const index = names.indexOf(unitName);
            if (index !== -1) {
                unitName = 3 * index;
            }
        }
        return parseFixed(value, (unitName != null) ? unitName : 18);
    }
    function formatEther(wei) {
        return formatUnits(wei, 18);
    }
    function parseEther(ether) {
        return parseUnits(ether, 18);
    }

    var utils$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AbiCoder: AbiCoder,
        defaultAbiCoder: defaultAbiCoder,
        Fragment: Fragment,
        ConstructorFragment: ConstructorFragment,
        ErrorFragment: ErrorFragment,
        EventFragment: EventFragment,
        FunctionFragment: FunctionFragment,
        ParamType: ParamType,
        FormatTypes: FormatTypes,
        checkResultErrors: checkResultErrors,
        Logger: Logger,
        RLP: index$3,
        _fetchData: _fetchData,
        fetchJson: fetchJson,
        poll: poll,
        checkProperties: checkProperties,
        deepCopy: deepCopy,
        defineReadOnly: defineReadOnly,
        getStatic: getStatic,
        resolveProperties: resolveProperties,
        shallowCopy: shallowCopy,
        arrayify: arrayify,
        concat: concat,
        stripZeros: stripZeros,
        zeroPad: zeroPad,
        isBytes: isBytes,
        isBytesLike: isBytesLike,
        defaultPath: defaultPath,
        HDNode: HDNode,
        SigningKey: SigningKey,
        Interface: Interface,
        LogDescription: LogDescription,
        TransactionDescription: TransactionDescription,
        base58: Base58,
        base64: index$1,
        hexlify: hexlify,
        isHexString: isHexString,
        hexConcat: hexConcat,
        hexStripZeros: hexStripZeros,
        hexValue: hexValue,
        hexZeroPad: hexZeroPad,
        hexDataLength: hexDataLength,
        hexDataSlice: hexDataSlice,
        nameprep: nameprep,
        _toEscapedUtf8String: _toEscapedUtf8String,
        toUtf8Bytes: toUtf8Bytes,
        toUtf8CodePoints: toUtf8CodePoints,
        toUtf8String: toUtf8String,
        Utf8ErrorFuncs: Utf8ErrorFuncs,
        formatBytes32String: formatBytes32String,
        parseBytes32String: parseBytes32String,
        dnsEncode: dnsEncode,
        hashMessage: hashMessage,
        namehash: namehash,
        isValidName: isValidName,
        id: id,
        _TypedDataEncoder: TypedDataEncoder,
        getAddress: getAddress,
        getIcapAddress: getIcapAddress,
        getContractAddress: getContractAddress,
        getCreate2Address: getCreate2Address,
        isAddress: isAddress,
        formatEther: formatEther,
        parseEther: parseEther,
        formatUnits: formatUnits,
        parseUnits: parseUnits,
        commify: commify,
        computeHmac: computeHmac,
        keccak256: keccak256$1,
        ripemd160: ripemd160,
        sha256: sha256$1,
        sha512: sha512,
        randomBytes: randomBytes,
        shuffled: shuffled,
        solidityPack: pack,
        solidityKeccak256: keccak256,
        soliditySha256: sha256,
        splitSignature: splitSignature,
        joinSignature: joinSignature,
        accessListify: accessListify,
        parseTransaction: parse,
        serializeTransaction: serialize$1,
        get TransactionTypes () { return TransactionTypes; },
        getJsonWalletAddress: getJsonWalletAddress,
        computeAddress: computeAddress,
        recoverAddress: recoverAddress,
        computePublicKey: computePublicKey,
        recoverPublicKey: recoverPublicKey,
        verifyMessage: verifyMessage,
        verifyTypedData: verifyTypedData,
        getAccountPath: getAccountPath,
        mnemonicToEntropy: mnemonicToEntropy,
        entropyToMnemonic: entropyToMnemonic,
        isValidMnemonic: isValidMnemonic,
        mnemonicToSeed: mnemonicToSeed,
        get SupportedAlgorithm () { return SupportedAlgorithm; },
        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
        get Utf8ErrorReason () { return Utf8ErrorReason; },
        Indexed: Indexed
    });

    const version = "ethers/5.6.9";

    const logger = new Logger(version);

    var ethers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$2,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$4,
        wordlists: wordlists,
        version: version,
        Wordlist: Wordlist
    });

    try {
        const anyGlobal = window;
        if (anyGlobal._ethers == null) {
            anyGlobal._ethers = ethers;
        }
    }
    catch (error) { }

    var lib_esm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ethers: ethers,
        Signer: Signer,
        Wallet: Wallet,
        VoidSigner: VoidSigner,
        getDefaultProvider: getDefaultProvider,
        providers: index,
        BaseContract: BaseContract,
        Contract: Contract,
        ContractFactory: ContractFactory,
        BigNumber: BigNumber,
        FixedNumber: FixedNumber,
        constants: index$2,
        get errors () { return ErrorCode; },
        logger: logger,
        utils: utils$4,
        wordlists: wordlists,
        version: version,
        Wordlist: Wordlist
    });

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /* node_modules/@specialdoom/proi-ui/src/components/button/Button.svelte generated by Svelte v3.49.0 */

    const file$b = "node_modules/@specialdoom/proi-ui/src/components/button/Button.svelte";

    function create_fragment$a(ctx) {
    	let button;
    	let button_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", button_class_value = "sd-button " + /*outlinedClass*/ ctx[3] + " " + /*className*/ ctx[2] + " svelte-1s14cd6");
    			button.disabled = /*disabled*/ ctx[0];
    			toggle_class(button, "sd-button-small", /*small*/ ctx[1]);
    			add_location(button, file$b, 12, 0, 280);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[8], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*outlinedClass, className*/ 12 && button_class_value !== (button_class_value = "sd-button " + /*outlinedClass*/ ctx[3] + " " + /*className*/ ctx[2] + " svelte-1s14cd6")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (!current || dirty & /*disabled*/ 1) {
    				prop_dev(button, "disabled", /*disabled*/ ctx[0]);
    			}

    			if (dirty & /*outlinedClass, className, small*/ 14) {
    				toggle_class(button, "sd-button-small", /*small*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let outlinedClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Button', slots, ['default']);
    	let { type = 'primary' } = $$props;
    	let { outlined = false } = $$props;
    	let { disabled = false } = $$props;
    	let { small = false } = $$props;
    	let { className = null } = $$props;
    	const writable_props = ['type', 'outlined', 'disabled', 'small', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Button> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(4, type = $$props.type);
    		if ('outlined' in $$props) $$invalidate(5, outlined = $$props.outlined);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('small' in $$props) $$invalidate(1, small = $$props.small);
    		if ('className' in $$props) $$invalidate(2, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		type,
    		outlined,
    		disabled,
    		small,
    		className,
    		outlinedClass
    	});

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(4, type = $$props.type);
    		if ('outlined' in $$props) $$invalidate(5, outlined = $$props.outlined);
    		if ('disabled' in $$props) $$invalidate(0, disabled = $$props.disabled);
    		if ('small' in $$props) $$invalidate(1, small = $$props.small);
    		if ('className' in $$props) $$invalidate(2, className = $$props.className);
    		if ('outlinedClass' in $$props) $$invalidate(3, outlinedClass = $$props.outlinedClass);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*outlined, type*/ 48) {
    			$$invalidate(3, outlinedClass = outlined
    			? `sd-button-outline sd-outline-${type}`
    			: `sd-${type}`);
    		}
    	};

    	return [
    		disabled,
    		small,
    		className,
    		outlinedClass,
    		type,
    		outlined,
    		$$scope,
    		slots,
    		click_handler
    	];
    }

    class Button extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			type: 4,
    			outlined: 5,
    			disabled: 0,
    			small: 1,
    			className: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Button",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get type() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get small() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set small(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const inputTypes = ['text', 'password'];

    /* node_modules/@specialdoom/proi-ui/src/components/input/Input.svelte generated by Svelte v3.49.0 */
    const file$a = "node_modules/@specialdoom/proi-ui/src/components/input/Input.svelte";

    // (34:2) {#if error}
    function create_if_block$4(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text$1(/*error*/ ctx[3]);
    			attr_dev(div, "class", "sd-error svelte-1xy32op");
    			add_location(div, file$a, 34, 4, 749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*error*/ 8) set_data_dev(t, /*error*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(34:2) {#if error}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let input;
    	let t2;
    	let div_class_value;
    	let mounted;
    	let dispose;
    	let if_block = /*error*/ ctx[3] && create_if_block$4(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text$1(/*label*/ ctx[2]);
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			if (if_block) if_block.c();
    			attr_dev(span, "class", "sd-label svelte-1xy32op");
    			attr_dev(span, "disabled", /*disabled*/ ctx[4]);
    			toggle_class(span, "sd-label-error", /*error*/ ctx[3]);
    			add_location(span, file$a, 21, 2, 478);
    			attr_dev(input, "placeholder", /*placeholder*/ ctx[1]);
    			attr_dev(input, "class", "sd-input svelte-1xy32op");
    			input.disabled = /*disabled*/ ctx[4];
    			toggle_class(input, "sd-input-error", /*error*/ ctx[3]);
    			add_location(input, file$a, 24, 2, 569);
    			attr_dev(div, "class", div_class_value = "sd-input-container " + /*className*/ ctx[5] + " svelte-1xy32op");
    			add_location(div, file$a, 20, 0, 430);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    			append_dev(div, input);
    			set_input_value(input, /*value*/ ctx[0]);
    			/*input_binding*/ ctx[10](input);
    			append_dev(div, t2);
    			if (if_block) if_block.m(div, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[9]),
    					listen_dev(input, "change", /*change_handler*/ ctx[8], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*label*/ 4) set_data_dev(t0, /*label*/ ctx[2]);

    			if (dirty & /*disabled*/ 16) {
    				attr_dev(span, "disabled", /*disabled*/ ctx[4]);
    			}

    			if (dirty & /*error*/ 8) {
    				toggle_class(span, "sd-label-error", /*error*/ ctx[3]);
    			}

    			if (dirty & /*placeholder*/ 2) {
    				attr_dev(input, "placeholder", /*placeholder*/ ctx[1]);
    			}

    			if (dirty & /*disabled*/ 16) {
    				prop_dev(input, "disabled", /*disabled*/ ctx[4]);
    			}

    			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
    				set_input_value(input, /*value*/ ctx[0]);
    			}

    			if (dirty & /*error*/ 8) {
    				toggle_class(input, "sd-input-error", /*error*/ ctx[3]);
    			}

    			if (/*error*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$4(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*className*/ 32 && div_class_value !== (div_class_value = "sd-input-container " + /*className*/ ctx[5] + " svelte-1xy32op")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			/*input_binding*/ ctx[10](null);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Input', slots, []);
    	let { type = 'text' } = $$props;
    	let { placeholder = '' } = $$props;
    	let { value = '' } = $$props;
    	let { label = '' } = $$props;
    	let { error = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { className = null } = $$props;
    	let element;

    	onMount(() => {
    		if (!inputTypes.includes(type)) $$invalidate(7, type = 'text');
    		$$invalidate(6, element.type = type, element);
    	});

    	const writable_props = ['type', 'placeholder', 'value', 'label', 'error', 'disabled', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Input> was created with unknown prop '${key}'`);
    	});

    	function change_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function input_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	function input_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			element = $$value;
    			$$invalidate(6, element);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(7, type = $$props.type);
    		if ('placeholder' in $$props) $$invalidate(1, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('error' in $$props) $$invalidate(3, error = $$props.error);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		inputTypes,
    		type,
    		placeholder,
    		value,
    		label,
    		error,
    		disabled,
    		className,
    		element
    	});

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(7, type = $$props.type);
    		if ('placeholder' in $$props) $$invalidate(1, placeholder = $$props.placeholder);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('label' in $$props) $$invalidate(2, label = $$props.label);
    		if ('error' in $$props) $$invalidate(3, error = $$props.error);
    		if ('disabled' in $$props) $$invalidate(4, disabled = $$props.disabled);
    		if ('className' in $$props) $$invalidate(5, className = $$props.className);
    		if ('element' in $$props) $$invalidate(6, element = $$props.element);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		value,
    		placeholder,
    		label,
    		error,
    		disabled,
    		className,
    		element,
    		type,
    		change_handler,
    		input_input_handler,
    		input_binding
    	];
    }

    class Input extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			type: 7,
    			placeholder: 1,
    			value: 0,
    			label: 2,
    			error: 3,
    			disabled: 4,
    			className: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Input",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get type() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get error() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set error(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var addToCollection = { name: 'addToCollection', paths: ['M10.88,3H5.63a.38.38,0,0,1-.38-.37V1.88A1.12,1.12,0,0,0,4.13.75h-3A1.12,1.12,0,0,0,0,1.88v8.25a1.12,1.12,0,0,0,1.13,1.12h9.75A1.12,1.12,0,0,0,12,10.13v-6A1.12,1.12,0,0,0,10.88,3Zm.37,7.13a.38.38,0,0,1-.37.37H1.13a.38.38,0,0,1-.38-.37V1.88a.38.38,0,0,1,.38-.38h3a.38.38,0,0,1,.37.38v.75A1.12,1.12,0,0,0,5.63,3.75h5.25a.38.38,0,0,1,.37.38Z','M7.5,6.91H6.38V5.78A.37.37,0,0,0,6,5.41a.36.36,0,0,0-.37.37V6.91H4.5a.36.36,0,0,0-.37.37.37.37,0,0,0,.37.38H5.63V8.78A.37.37,0,0,0,6,9.16a.38.38,0,0,0,.38-.38V7.66H7.5a.38.38,0,0,0,.38-.38A.37.37,0,0,0,7.5,6.91Z']};

    var alarm = { name: 'alarm', paths: ['M10.8,6.34a4.8,4.8,0,1,0-9.6,0A4.75,4.75,0,0,0,2.94,10L1.81,11.13a.37.37,0,0,0,0,.52.34.34,0,0,0,.26.11.33.33,0,0,0,.26-.11l1.21-1.21a4.73,4.73,0,0,0,2.46.7,4.8,4.8,0,0,0,2.46-.7l1.21,1.21a.34.34,0,0,0,.26.11.33.33,0,0,0,.26-.11.36.36,0,0,0,0-.52L9.07,10A4.77,4.77,0,0,0,10.8,6.34Zm-8.87,0A4.07,4.07,0,1,1,6,10.4,4.07,4.07,0,0,1,1.93,6.34Z','M7.27,6.65H6.34A.38.38,0,0,1,6,6.28V5a.37.37,0,0,0-.37-.37A.38.38,0,0,0,5.23,5v1.3A1.11,1.11,0,0,0,6.34,7.39h.93A.38.38,0,0,0,7.64,7,.37.37,0,0,0,7.27,6.65Z','M11.94,2.63A7,7,0,0,0,9.56.29a.37.37,0,0,0-.51.13.38.38,0,0,0,.13.51A6.2,6.2,0,0,1,11.32,3a.37.37,0,0,0,.31.17.35.35,0,0,0,.2,0A.37.37,0,0,0,11.94,2.63Z','M2.82.93A.38.38,0,0,0,3,.42.37.37,0,0,0,2.44.29,7,7,0,0,0,.06,2.63a.37.37,0,0,0,.11.51.35.35,0,0,0,.2,0A.37.37,0,0,0,.68,3,6.2,6.2,0,0,1,2.82.93Z']};

    var alert = { name: 'alert', paths: ['M6,4.19a.35.35,0,0,0-.35.36V7.09a.35.35,0,0,0,.7,0V4.55A.35.35,0,0,0,6,4.19Z','M5.75,8.65a.35.35,0,0,0-.1.26.31.31,0,0,0,.1.24.36.36,0,0,0,.5,0,.33.33,0,0,0,.1-.24.35.35,0,0,0-.1-.26A.38.38,0,0,0,5.75,8.65Z','M11.76,8.73,7.56,1.47a1.79,1.79,0,0,0-3.12,0L.24,8.73a1.81,1.81,0,0,0,1.57,2.71h8.38a1.81,1.81,0,0,0,1.57-2.71Zm-.62,1.45a1.08,1.08,0,0,1-1,.55H1.81A1.1,1.1,0,0,1,.86,9.08L5.05,1.82a1.1,1.1,0,0,1,1.9,0l4.19,7.26A1.08,1.08,0,0,1,11.14,10.18Z']};

    var antiClockwise = { name: 'antiClockwise', paths: ['M6.7.74A5.28,5.28,0,0,0,1.57,4.85L.74,3.46a.38.38,0,0,0-.51-.14.39.39,0,0,0-.14.52L1.5,6.19a.33.33,0,0,0,.23.17l.09,0A.33.33,0,0,0,2,6.32l2.35-1.4a.38.38,0,0,0,.14-.51A.39.39,0,0,0,4,4.27l-1.73,1A4.51,4.51,0,1,1,6.7,10.51a.36.36,0,0,0-.37.37.37.37,0,0,0,.37.38A5.26,5.26,0,1,0,6.7.74Z']};

    var application = { name: 'application', paths: ['M2.24,0H.45A.45.45,0,0,0,0,.45V2.24a.45.45,0,0,0,.45.44H2.24a.44.44,0,0,0,.44-.44V.45A.45.45,0,0,0,2.24,0ZM1.79,1.79H.89V.89h.9Z','M6.71,0H4.92a.45.45,0,0,0-.45.45V2.24a.45.45,0,0,0,.45.44H6.71a.45.45,0,0,0,.45-.44V.45A.45.45,0,0,0,6.71,0ZM6.26,1.79H5.37V.89h.89Z','M9.39,2.68h1.79a.45.45,0,0,0,.45-.44V.45A.45.45,0,0,0,11.18,0H9.39A.45.45,0,0,0,9,.45V2.24A.44.44,0,0,0,9.39,2.68ZM9.84.89h.89v.9H9.84Z','M2.24,4.47H.45A.45.45,0,0,0,0,4.92V6.71a.45.45,0,0,0,.45.45H2.24a.45.45,0,0,0,.44-.45V4.92A.45.45,0,0,0,2.24,4.47ZM1.79,6.26H.89V5.37h.9Z','M6.71,4.47H4.92a.45.45,0,0,0-.45.45V6.71a.45.45,0,0,0,.45.45H6.71a.45.45,0,0,0,.45-.45V4.92A.45.45,0,0,0,6.71,4.47ZM6.26,6.26H5.37V5.37h.89Z','M9.39,7.16h1.79a.45.45,0,0,0,.45-.45V4.92a.45.45,0,0,0-.45-.45H9.39A.45.45,0,0,0,9,4.92V6.71A.45.45,0,0,0,9.39,7.16Zm.45-1.79h.89v.89H9.84Z','M2.24,9H.45A.45.45,0,0,0,0,9.39v1.79a.45.45,0,0,0,.45.45H2.24a.45.45,0,0,0,.44-.45V9.39A.44.44,0,0,0,2.24,9Zm-.45,1.79H.89v-.9h.9Z','M6.71,9H4.92a.45.45,0,0,0-.45.44v1.79a.45.45,0,0,0,.45.45H6.71a.45.45,0,0,0,.45-.45V9.39A.45.45,0,0,0,6.71,9Zm-.45,1.79H5.37v-.9h.89Z','M11.87,10,10.6,8.71a.43.43,0,0,0-.63,0L8.71,10a.43.43,0,0,0,0,.63L10,11.87a.48.48,0,0,0,.32.13.44.44,0,0,0,.31-.13l1.27-1.27A.45.45,0,0,0,11.87,10Zm-1.58.95-.64-.63.64-.63.63.63Z']};

    var arrowDown = { name: 'arrowDown', paths: ['M6,8.85a2.26,2.26,0,0,1-1.63-.68L.14,3.94a.44.44,0,0,1,0-.65.46.46,0,0,1,.65,0L5,7.52a1.39,1.39,0,0,0,2,0l4.23-4.23a.46.46,0,0,1,.65,0,.44.44,0,0,1,0,.65L7.63,8.17A2.26,2.26,0,0,1,6,8.85Z']};

    var arrowLeft = { name: 'arrowLeft', paths: ['M8.39,12a.47.47,0,0,1-.33-.14L3.83,7.63a2.29,2.29,0,0,1,0-3.26L8.06.14a.44.44,0,0,1,.65,0,.46.46,0,0,1,0,.65L4.48,5a1.39,1.39,0,0,0,0,2l4.23,4.23a.46.46,0,0,1,0,.65A.47.47,0,0,1,8.39,12Z']};

    var arrowRight = { name: 'arrowRight', paths: ['M3.61,12a.47.47,0,0,1-.32-.14.46.46,0,0,1,0-.65L7.52,7a1.39,1.39,0,0,0,0-2L3.29.79a.46.46,0,0,1,0-.65.44.44,0,0,1,.65,0L8.17,4.37a2.29,2.29,0,0,1,0,3.26L3.94,11.86A.47.47,0,0,1,3.61,12Z']};

    var arrowUp = { name: 'arrowUp', paths: ['M11.54,8.84a.47.47,0,0,1-.33-.14L7,4.47a1.39,1.39,0,0,0-2,0L.79,8.7a.46.46,0,0,1-.65,0,.44.44,0,0,1,0-.65L4.37,3.82a2.34,2.34,0,0,1,3.26,0l4.23,4.23a.44.44,0,0,1,0,.65A.45.45,0,0,1,11.54,8.84Z']};

    var assistant = { name: 'assistant', paths: ['M8.19,5.78A3.64,3.64,0,0,0,9,3.42,3.42,3.42,0,0,0,9,3h1.23a.38.38,0,0,0,0-.76H8.83A3.08,3.08,0,0,0,6,0,3.25,3.25,0,0,0,3,3.42a3.64,3.64,0,0,0,.85,2.36A3.32,3.32,0,0,0,1.06,9.05v2.57a.38.38,0,0,0,.76,0V9.05a2.57,2.57,0,0,1,2.1-2.52L5.68,9.35a.39.39,0,0,0,.64,0L8.08,6.53a2.57,2.57,0,0,1,2.1,2.52v2.57a.38.38,0,1,0,.76,0V9.05A3.32,3.32,0,0,0,8.19,5.78ZM6,.76A2.26,2.26,0,0,1,8,2.2H4A2.26,2.26,0,0,1,6,.76ZM6,8.43,4.85,6.58a2.67,2.67,0,0,0,2.3,0ZM6,6.08A2.49,2.49,0,0,1,3.72,3.42a3.42,3.42,0,0,1,0-.46H8.24a3.42,3.42,0,0,1,0,.46A2.49,2.49,0,0,1,6,6.08Z']};

    var basketball = { name: 'basketball', paths: ['M10.24,1.76a6,6,0,0,0-8.48,0,6,6,0,0,0,0,8.48,6,6,0,0,0,8.48,0A6,6,0,0,0,10.24,1.76ZM6,.71A5.28,5.28,0,0,1,9.47,2L6,5.5,4.51,4A3.89,3.89,0,0,0,5.32.77,5.05,5.05,0,0,1,6,.71ZM4.62.91A3.15,3.15,0,0,1,4,3.51L2.53,2A5.31,5.31,0,0,1,4.62.91ZM2,2.53,3.51,4a3.14,3.14,0,0,1-2.6.61A5.39,5.39,0,0,1,2,2.53ZM.77,5.31a4.15,4.15,0,0,0,.78.09A3.84,3.84,0,0,0,4,4.5L5.5,6,2,9.47A5.27,5.27,0,0,1,.77,5.31Zm5.23,6A5.28,5.28,0,0,1,2.53,10L6,6.5,7.49,8a3.89,3.89,0,0,0-.81,3.24A5.05,5.05,0,0,1,6,11.29Zm1.38-.2A3.15,3.15,0,0,1,8,8.49L9.47,10A5.31,5.31,0,0,1,7.38,11.09ZM10,9.47,8.49,8a3.18,3.18,0,0,1,2.6-.62A5.35,5.35,0,0,1,10,9.47Zm-2-2L6.5,6,10,2.53a5.25,5.25,0,0,1,1.26,4.15A3.89,3.89,0,0,0,8,7.49Z']};

    var batteryEmpty = { name: 'batteryEmpty', paths: ['M11.65,5h-.36V4.05A1.92,1.92,0,0,0,9.36,2.12H1.93A1.93,1.93,0,0,0,0,4.05V8A1.93,1.93,0,0,0,1.93,9.88H9.36A1.92,1.92,0,0,0,11.29,8V7.1h.36A.35.35,0,0,0,12,6.75V5.34A.36.36,0,0,0,11.65,5ZM10.59,8A1.23,1.23,0,0,1,9.36,9.18H1.93A1.23,1.23,0,0,1,.71,8V4.05A1.23,1.23,0,0,1,1.93,2.82H9.36a1.23,1.23,0,0,1,1.23,1.23Z']};

    var batteryFull = { name: 'batteryFull', paths: ['M11.63,5h-.35V4.05A1.92,1.92,0,0,0,9.36,2.13H1.94A1.93,1.93,0,0,0,0,4.05V8A1.93,1.93,0,0,0,1.94,9.87H9.36A1.92,1.92,0,0,0,11.28,8V7.1h.35A.36.36,0,0,0,12,6.75V5.34A.35.35,0,0,0,11.63,5ZM10.58,8A1.22,1.22,0,0,1,9.36,9.17H1.94A1.22,1.22,0,0,1,.72,8V4.05A1.22,1.22,0,0,1,1.94,2.83H9.36a1.22,1.22,0,0,1,1.22,1.22Z','M2.48,4.24a.35.35,0,0,0-.35.35V7.41a.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35V4.59A.35.35,0,0,0,2.48,4.24Z','M4.59,4.24a.35.35,0,0,0-.35.35V7.41a.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35V4.59A.35.35,0,0,0,4.59,4.24Z','M6.7,4.24a.35.35,0,0,0-.35.35V7.41a.36.36,0,0,0,.71,0V4.59A.36.36,0,0,0,6.7,4.24Z','M8.82,4.24a.35.35,0,0,0-.35.35V7.41a.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35V4.59A.35.35,0,0,0,8.82,4.24Z']};

    var beer = { name: 'beer', paths: ['M10.14,3.51a1.43,1.43,0,0,0,0-.29A1.5,1.5,0,0,0,10,2.51a1.5,1.5,0,0,0,.18-.71A2,2,0,0,0,8,0,2.42,2.42,0,0,0,6.65.41,2.55,2.55,0,0,0,4,.36,2.45,2.45,0,0,0,2.71,0,2,2,0,0,0,.55,1.8a1.5,1.5,0,0,0,.18.71,1.5,1.5,0,0,0-.18.71A1.79,1.79,0,0,0,1.69,4.8v6A1.25,1.25,0,0,0,2.94,12H7.78A1.25,1.25,0,0,0,9,10.75V9.84h1a1.45,1.45,0,0,0,1.45-1.45V4.94A1.44,1.44,0,0,0,10.14,3.51ZM1.32,3.22a.85.85,0,0,1,.17-.48.39.39,0,0,0,0-.46.8.8,0,0,1-.17-.48c0-.57.62-1,1.39-1a1.62,1.62,0,0,1,1,.36.39.39,0,0,0,.5,0,1.74,1.74,0,0,1,2.13.05.38.38,0,0,0,.54,0A1.58,1.58,0,0,1,8,.77c.77,0,1.39.46,1.39,1a.8.8,0,0,1-.17.48.39.39,0,0,0,0,.46.85.85,0,0,1,.17.48c0,.57-.62,1-1.39,1a1.58,1.58,0,0,1-1.09-.41.39.39,0,0,0-.54,0,1.74,1.74,0,0,1-2.13.05.39.39,0,0,0-.5,0,1.62,1.62,0,0,1-1,.36C1.94,4.25,1.32,3.79,1.32,3.22Zm6.46,8H7.39V6.13a.39.39,0,0,0-.77,0v5.1H5.75V6.13a.39.39,0,0,0-.78,0v5.1H4.1V6.13a.39.39,0,0,0-.77,0v5.1H2.94a.48.48,0,0,1-.48-.48V5l.25,0A2.36,2.36,0,0,0,4,4.66a2.55,2.55,0,0,0,2.65,0A2.42,2.42,0,0,0,8,5l.25,0v5.75A.49.49,0,0,1,7.78,11.23Zm2.9-2.84a.67.67,0,0,1-.68.67H9V4.8a2.09,2.09,0,0,0,.73-.53H10a.67.67,0,0,1,.68.67Z']};

    var bell = { name: 'bell', paths: ['M11.45,8.36A.36.36,0,0,0,11.09,8,1.09,1.09,0,0,1,10,6.91V5.45a4,4,0,0,0-3.64-4V.36a.36.36,0,1,0-.72,0V1.49A4,4,0,0,0,2,5.45V6.91A1.09,1.09,0,0,1,.91,8a.36.36,0,0,0-.36.36c0,.91,1.48,1.45,3.3,1.69a2.17,2.17,0,0,0,4.31,0C10,9.81,11.45,9.27,11.45,8.36ZM6,11.27a1.47,1.47,0,0,1-1.42-1.14c.47,0,1,0,1.42,0s1,0,1.43-.06A1.47,1.47,0,0,1,6,11.27ZM6,9.45a9.35,9.35,0,0,1-4.5-.82A1.84,1.84,0,0,0,2.73,6.91V5.45a3.27,3.27,0,1,1,6.54,0V6.91A1.84,1.84,0,0,0,10.5,8.63,9.35,9.35,0,0,1,6,9.45Z']};

    var bookmark = { name: 'bookmark', paths: ['M9.08,0H2.92a.38.38,0,0,0-.38.38v10.8a.82.82,0,0,0,1.22.71L6,10.65l2.21,1.24a.8.8,0,0,0,.4.11.82.82,0,0,0,.82-.82V.38A.38.38,0,0,0,9.08,0ZM8.69.77V2.08H3.31V.77Zm0,2.08v.67H3.31V2.85Zm0,8.38L6.4,10a.85.85,0,0,0-.8,0L3.39,11.22l-.08,0V4.29H8.69v6.89A.05.05,0,0,1,8.64,11.23Z']};

    var briefcase = { name: 'briefcase', paths: ['M10.24,2.47H8.47V1.6A1.25,1.25,0,0,0,7.22.35H4.78A1.25,1.25,0,0,0,3.53,1.6v.87H1.76A1.76,1.76,0,0,0,0,4.24V9.88a1.76,1.76,0,0,0,1.76,1.77h8.48A1.76,1.76,0,0,0,12,9.88V4.24A1.76,1.76,0,0,0,10.24,2.47Zm-6-.87a.54.54,0,0,1,.54-.54H7.22a.54.54,0,0,1,.54.54v.87H4.24ZM1.76,3.18h8.48a1.05,1.05,0,0,1,1,1.06V6H8.47V5.65a.36.36,0,1,0-.71,0V6H4.24V5.65a.36.36,0,1,0-.71,0V6H.71V4.24A1.05,1.05,0,0,1,1.76,3.18Zm8.48,7.76H1.76a1.05,1.05,0,0,1-1-1.06V6.71H3.53v.35a.36.36,0,0,0,.71,0V6.71H7.76v.35a.36.36,0,0,0,.71,0V6.71h2.82V9.88A1.05,1.05,0,0,1,10.24,10.94Z']};

    var bulb = { name: 'bulb', paths: ['M5.51,0A4.1,4.1,0,0,0,2,3.41a4,4,0,0,0,.84,3.18,4.83,4.83,0,0,1,1,3,1,1,0,0,0,.51.84L5,11.8a.35.35,0,0,0,.31.2H6.71A.35.35,0,0,0,7,11.8l.68-1.34a1,1,0,0,0,.51-.84V9.41A5,5,0,0,1,9.27,6.46a4,4,0,0,0,.79-2.4A4.06,4.06,0,0,0,5.51,0Zm2,9.38v.21a.26.26,0,0,1-.26.26H4.76a.28.28,0,0,1-.26-.3,6.19,6.19,0,0,0-.19-1.45H7.69A5.15,5.15,0,0,0,7.5,9.41Zm-1,1.88h-1l-.35-.7H6.84ZM8.7,6a6.17,6.17,0,0,0-.77,1.39H4.09a4.68,4.68,0,0,0-.71-1.28A3.35,3.35,0,0,1,5.59.73,2.88,2.88,0,0,1,6,.71,3.35,3.35,0,0,1,9.35,4.06,3.26,3.26,0,0,1,8.7,6Z']};

    var calendar = { name: 'calendar', paths: ['M10.13,1.12H8.63V.74a.38.38,0,0,0-.75,0v.38H4.12V.74a.38.38,0,0,0-.75,0v.38H1.87A1.88,1.88,0,0,0,0,3V9.76a1.88,1.88,0,0,0,1.88,1.87h8.26A1.88,1.88,0,0,0,12,9.76V3A1.88,1.88,0,0,0,10.13,1.12Zm-8.26.75h1.5v.37a.38.38,0,1,0,.75,0V1.87H7.88v.37a.38.38,0,1,0,.75,0V1.87h1.5A1.13,1.13,0,0,1,11.26,3V4.12H.74V3A1.13,1.13,0,0,1,1.87,1.87Zm8.26,9H1.87A1.13,1.13,0,0,1,.74,9.76V4.87H11.26V9.76A1.13,1.13,0,0,1,10.13,10.88Z','M2.09,8.47A.75.75,0,0,0,1.87,9a.75.75,0,0,0,.75.76.75.75,0,0,0,.53-.22A.79.79,0,0,0,3.37,9a.75.75,0,0,0-1.28-.53Z','M2.09,6.22a.77.77,0,0,0-.22.53.75.75,0,0,0,1.5,0,.75.75,0,0,0-1.28-.53Z','M4.34,8.47A.77.77,0,0,0,4.12,9a.79.79,0,0,0,.22.54.81.81,0,0,0,.53.22.84.84,0,0,0,.54-.22A.83.83,0,0,0,5.62,9a.8.8,0,0,0-.21-.53A.79.79,0,0,0,4.34,8.47Z','M4.34,6.22a.77.77,0,0,0-.22.53.75.75,0,0,0,.22.53.77.77,0,0,0,.53.22.73.73,0,0,0,.75-.75.76.76,0,0,0-.21-.53A.79.79,0,0,0,4.34,6.22Z','M6.59,8.47A.8.8,0,0,0,6.38,9a.83.83,0,0,0,.21.54.84.84,0,0,0,.54.22.81.81,0,0,0,.53-.22A.84.84,0,0,0,7.88,9a.76.76,0,0,0-1.29-.53Z','M6.59,6.22a.8.8,0,0,0-.21.53.73.73,0,0,0,.75.75.77.77,0,0,0,.53-.22.79.79,0,0,0,.22-.53.81.81,0,0,0-.22-.53A.79.79,0,0,0,6.59,6.22Z','M8.85,8.47A.75.75,0,0,0,8.63,9a.75.75,0,0,0,.75.76.77.77,0,0,0,.53-.22A.79.79,0,0,0,10.13,9a.75.75,0,0,0-1.28-.53Z','M8.85,6.22a.77.77,0,0,0-.22.53.75.75,0,0,0,.75.75.77.77,0,0,0,.53-.22.75.75,0,0,0,.22-.53.75.75,0,0,0-1.28-.53Z']};

    var camera = { name: 'camera', paths: ['M6,4.37A2.12,2.12,0,1,0,8.12,6.49,2.12,2.12,0,0,0,6,4.37ZM6,7.9A1.41,1.41,0,1,1,7.41,6.49,1.41,1.41,0,0,1,6,7.9Z','M10.94,2.84H9.27a.35.35,0,0,1-.35-.35V2.32A1.07,1.07,0,0,0,7.86,1.26H4.14A1.07,1.07,0,0,0,3.08,2.32v.17a.35.35,0,0,1-.35.35H1.06A1.06,1.06,0,0,0,0,3.9V9.68a1.06,1.06,0,0,0,1.06,1.06h9.88A1.06,1.06,0,0,0,12,9.68V3.9A1.06,1.06,0,0,0,10.94,2.84Zm.35,6.84a.35.35,0,0,1-.35.35H1.06a.35.35,0,0,1-.35-.35V3.9a.35.35,0,0,1,.35-.35H2.73A1.07,1.07,0,0,0,3.79,2.49V2.32A.35.35,0,0,1,4.14,2H7.86a.35.35,0,0,1,.35.35v.17A1.07,1.07,0,0,0,9.27,3.55h1.67a.35.35,0,0,1,.35.35Z']};

    var card = { name: 'card', paths: ['M10.94,1.76H1.06A1.06,1.06,0,0,0,0,2.82V9.18a1.06,1.06,0,0,0,1.06,1.06h9.88A1.06,1.06,0,0,0,12,9.18V2.82A1.06,1.06,0,0,0,10.94,1.76Zm-9.88.71h9.88a.35.35,0,0,1,.35.35v.54H.71V2.82A.35.35,0,0,1,1.06,2.47ZM11.29,4.06v.6H.71v-.6Zm-.35,5.47H1.06a.35.35,0,0,1-.35-.35V5.37H11.29V9.18A.35.35,0,0,1,10.94,9.53Z','M1.84,7H3.68a.36.36,0,0,0,0-.71H1.84a.36.36,0,0,0,0,.71Z','M6.12,7.73H1.84a.36.36,0,0,0,0,.71H6.12a.36.36,0,0,0,0-.71Z']};

    var cart = { name: 'cart', paths: ['M11.8,3.58A1,1,0,0,0,11,3.14L1.88,2.5,1.55,1.34a.33.33,0,0,0-.24-.24L.46.83A.35.35,0,0,0,0,1.07a.35.35,0,0,0,.23.44l.67.21.35,1.2v0L2.67,7.79a1.73,1.73,0,0,0,.59.88,1.42,1.42,0,1,0,2.09.39H8.11a1.41,1.41,0,1,0,2.63.71,1.4,1.4,0,0,0-.41-1,1.73,1.73,0,0,0,.75-1L12,4.47A1,1,0,0,0,11.8,3.58Zm-7.66,6.9a.71.71,0,0,1,0-1.42.71.71,0,0,1,0,1.42Zm5.19,0a.71.71,0,0,1,0-1.42.71.71,0,0,1,0,1.42Zm1.95-6.19L10.4,7.57a1,1,0,0,1-1,.79h-5a1.07,1.07,0,0,1-1-.77L2.09,3.22,11,3.85a.34.34,0,0,1,.31.44Z']};

    var cd = { name: 'cd', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM7.49,7a1.62,1.62,0,0,0,.27-.68l3.55-.11A5.25,5.25,0,0,1,10,9.5ZM4.28,5.72.73,5.84A5.23,5.23,0,0,1,2,2.54L4.54,5A1.75,1.75,0,0,0,4.28,5.72ZM6,5A1.06,1.06,0,1,1,5,6,1.06,1.06,0,0,1,6,5Zm5.25.53-3.54.12A1.76,1.76,0,0,0,6,4.25a1.82,1.82,0,0,0-1,.29L2.54,2a5.26,5.26,0,0,1,8.73,3.45ZM.76,6.54,4.3,6.43A1.77,1.77,0,0,0,6,7.79a1.71,1.71,0,0,0,1-.3L9.5,10A5.33,5.33,0,0,1,6,11.33,5.31,5.31,0,0,1,.76,6.54Z']};

    var chart = { name: 'chart', paths: ['M11.65,11.29H10.53V7.12a.36.36,0,0,0-.35-.36H8.76a.36.36,0,0,0-.35.36v4.17H7.35V9.36A.35.35,0,0,0,7,9H5.59a.36.36,0,0,0-.36.35v1.93H4.18V8.18a.36.36,0,0,0-.36-.35H2.41a.35.35,0,0,0-.35.35v3.11H.71V7.6L3.14,5.78,5.82,7.39a.33.33,0,0,0,.42,0l4.88-4.56a.34.34,0,0,0,0-.49.35.35,0,0,0-.5,0L6,6.65,3.3,5.06a.33.33,0,0,0-.39,0L.71,6.72V.35A.36.36,0,0,0,0,.35v11.3A.35.35,0,0,0,.35,12h11.3a.36.36,0,0,0,0-.71ZM9.12,7.47h.7v3.82h-.7ZM5.94,9.72h.71v1.57H5.94ZM2.76,8.54h.71v2.75H2.76Z']};

    var chat = { name: 'chat', paths: ['M10.22,4.24h-2v-1A1.78,1.78,0,0,0,6.47,1.48H1.78A1.78,1.78,0,0,0,0,3.26V6.91a.84.84,0,0,0,.49.77.94.94,0,0,0,.36.08.82.82,0,0,0,.55-.21l.73-.64H3.75v1A1.78,1.78,0,0,0,5.53,9.68H9.87l.73.64a.87.87,0,0,0,.55.2A.84.84,0,0,0,12,9.68V6A1.78,1.78,0,0,0,10.22,4.24ZM3.75,6v.14H2a.39.39,0,0,0-.25.1L.91,7A.1.1,0,0,1,.8,7a.1.1,0,0,1-.05-.09V3.26a1,1,0,0,1,1-1H6.47a1,1,0,0,1,1,1v1H6.36A.37.37,0,0,0,5.72,4a.44.44,0,0,0-.11.24H5.53A1.78,1.78,0,0,0,3.75,6Zm7.5,3.66a.09.09,0,0,1-.1.09L10.26,9A.38.38,0,0,0,10,8.93H5.53a1,1,0,0,1-1-1V6a1,1,0,0,1,1-1h4.69a1,1,0,0,1,1,1Z','M5.75,6.77A.35.35,0,0,0,5.64,7a.4.4,0,0,0,.11.27A.42.42,0,0,0,6,7.4a.4.4,0,0,0,.27-.11A.4.4,0,0,0,6.38,7a.38.38,0,0,0-.1-.26A.37.37,0,0,0,5.75,6.77Z','M7.62,6.77A.35.35,0,0,0,7.51,7a.36.36,0,0,0,.11.26.37.37,0,0,0,.27.11.38.38,0,0,0,.26-.11A.36.36,0,0,0,8.26,7a.35.35,0,0,0-.11-.26A.38.38,0,0,0,7.62,6.77Z','M9.5,6.77a.34.34,0,0,0,0,.52.35.35,0,0,0,.26.11A.43.43,0,0,0,10,7.29.41.41,0,0,0,10.14,7,.4.4,0,0,0,10,6.76.37.37,0,0,0,9.5,6.77Z','M3.85,4a.36.36,0,0,0-.11.26.4.4,0,0,0,.11.27.36.36,0,0,0,.27.1.33.33,0,0,0,.26-.11.36.36,0,0,0,0-.52A.37.37,0,0,0,3.85,4Z','M2,4a.4.4,0,0,0-.1.26.45.45,0,0,0,.1.27.39.39,0,0,0,.27.1.31.31,0,0,0,.26-.11.37.37,0,0,0,.12-.26A.34.34,0,0,0,2.5,4,.37.37,0,0,0,2,4Z']};

    var choose = { name: 'choose', paths: ['M4.28,9.76a2.28,2.28,0,0,1-1.63-.67L.14,6.57a.44.44,0,0,1,0-.65.46.46,0,0,1,.65,0L3.3,8.44a1.39,1.39,0,0,0,1,.4h0a1.39,1.39,0,0,0,1-.41l5.94-6.06a.46.46,0,0,1,.66.65L5.93,9.07a2.25,2.25,0,0,1-1.64.69Z']};

    var circleArrowDown = { name: 'circleArrowDown', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.52,5.34,6.17,6.69a.25.25,0,0,1-.34,0L4.48,5.34a.34.34,0,0,0-.49,0,.35.35,0,0,0,0,.5L5.33,7.19a.94.94,0,0,0,1.34,0L8,5.84a.35.35,0,0,0,0-.5A.34.34,0,0,0,7.52,5.34Z']};

    var circleArrowLeft = { name: 'circleArrowLeft', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M6.66,4.48a.34.34,0,0,0,0-.49.35.35,0,0,0-.5,0L4.81,5.33a1,1,0,0,0,0,1.34L6.16,8a.34.34,0,0,0,.5,0,.34.34,0,0,0,0-.49L5.31,6.17a.25.25,0,0,1,0-.34Z']};

    var circleArrowRight = { name: 'circleArrowRight', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M5.84,4a.35.35,0,0,0-.5,0,.34.34,0,0,0,0,.49L6.69,5.83a.25.25,0,0,1,0,.34L5.34,7.52a.34.34,0,0,0,0,.49.34.34,0,0,0,.5,0L7.19,6.67a1,1,0,0,0,0-1.34Z']};

    var circleArrowUp = { name: 'circleArrowUp', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M6.67,4.81a1,1,0,0,0-1.34,0L4,6.16a.35.35,0,0,0,0,.5.34.34,0,0,0,.49,0L5.83,5.31a.25.25,0,0,1,.34,0L7.52,6.66a.31.31,0,0,0,.24.1A.32.32,0,0,0,8,6.66a.35.35,0,0,0,0-.5Z']};

    var circleChoose = { name: 'circleChoose', paths: ['M6,12a6,6,0,1,1,6-6A6,6,0,0,1,6,12ZM6,.71A5.29,5.29,0,1,0,11.29,6,5.29,5.29,0,0,0,6,.71Z','M5.45,7.75a.92.92,0,0,1-.66-.28L4,6.67a.35.35,0,0,1,0-.5.34.34,0,0,1,.49,0l.81.8A.2.2,0,0,0,5.45,7h0A.21.21,0,0,0,5.62,7L7.51,5A.35.35,0,0,1,8,5a.36.36,0,0,1,0,.5L6.13,7.46a.92.92,0,0,1-.67.29Z']};

    var circleClose = { name: 'circleClose', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.72,4.28a.35.35,0,0,0-.5,0L6,5.5,4.78,4.28a.35.35,0,0,0-.5.5L5.5,6,4.28,7.22a.35.35,0,0,0,.5.5L6,6.5,7.22,7.72a.35.35,0,0,0,.5-.5L6.5,6,7.72,4.78A.35.35,0,0,0,7.72,4.28Z']};

    var circleMinus = { name: 'circleMinus', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.76,5.65H4.24a.35.35,0,1,0,0,.7H7.76a.35.35,0,1,0,0-.7Z']};

    var circlePlus = { name: 'circlePlus', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.76,5.65H6.35V4.24a.35.35,0,1,0-.7,0V5.65H4.24a.35.35,0,1,0,0,.7H5.65V7.76a.35.35,0,1,0,.7,0V6.35H7.76a.35.35,0,1,0,0-.7Z']};

    var clip = { name: 'clip', paths: ['M2.45,11.26A2.46,2.46,0,0,1,.72,7.06L6,1.77a3.51,3.51,0,0,1,5,5l-3.8,3.81a.35.35,0,0,1-.5-.5l3.81-3.8a2.81,2.81,0,1,0-4-4L1.21,7.56a1.76,1.76,0,0,0,0,2.48,1.74,1.74,0,0,0,2.48,0l4.8-4.8a.69.69,0,0,0,0-1,.71.71,0,0,0-1,0L4.19,7.56a.35.35,0,0,1-.5,0,.37.37,0,0,1,0-.5L7,3.75a1.42,1.42,0,0,1,2,0,1.41,1.41,0,0,1,0,2l-4.8,4.8A2.45,2.45,0,0,1,2.45,11.26Z']};

    var clock = { name: 'clock', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0Zm.35,11.26v-1a.35.35,0,1,0-.7,0v1A5.27,5.27,0,0,1,.74,6.35h1a.35.35,0,1,0,0-.7h-1A5.27,5.27,0,0,1,5.65.74v1a.35.35,0,1,0,.7,0v-1a5.27,5.27,0,0,1,4.91,4.91h-1a.35.35,0,1,0,0,.7h1A5.27,5.27,0,0,1,6.35,11.26Z','M7.41,5.65h-1a.09.09,0,0,1-.09-.09V3.18a.35.35,0,1,0-.7,0V5.56a.79.79,0,0,0,.79.79h1a.35.35,0,0,0,0-.7Z']};

    var clockwise = { name: 'clockwise', paths: ['M11.82,3.31a.37.37,0,0,0-.52.13l-.84,1.41a5.29,5.29,0,1,0-5.17,6.44.38.38,0,1,0,0-.75A4.54,4.54,0,1,1,9.77,5.3L8,4.26a.38.38,0,0,0-.38.65L10,6.32a.33.33,0,0,0,.19.06h.09a.38.38,0,0,0,.23-.18L12,3.82A.38.38,0,0,0,11.82,3.31Z']};

    var clothes = { name: 'clothes', paths: ['M11.92,4.47,9.43,1.34a.43.43,0,0,0-.17-.12L7.73.76a.32.32,0,0,0-.3,0,.35.35,0,0,0-.15.26A1.18,1.18,0,0,1,6,2.12a1.18,1.18,0,0,1-1.28-1A.33.33,0,0,0,4.57.8a.32.32,0,0,0-.3,0l-1.53.46a.43.43,0,0,0-.17.12L.08,4.47a.36.36,0,0,0,0,.47L1.69,6.6a.36.36,0,0,0,.5,0l.39-.37L2.31,9.09a2,2,0,0,0,.5,1.52,2,2,0,0,0,1.47.65H7.72a2,2,0,0,0,1.47-.65,2,2,0,0,0,.5-1.52L9.42,6.24l.39.37a.36.36,0,0,0,.5,0L11.9,4.94A.36.36,0,0,0,11.92,4.47ZM10,5.86l-.82-.77A.35.35,0,0,0,8.83,5a.36.36,0,0,0-.2.35L9,9.16a1.27,1.27,0,0,1-.33,1,1.23,1.23,0,0,1-.94.41H4.28a1.23,1.23,0,0,1-.94-.41,1.27,1.27,0,0,1-.33-1l.36-3.78A.36.36,0,0,0,3.17,5,.4.4,0,0,0,3,5a.34.34,0,0,0-.24.09L2,5.86.82,4.67l2.23-2.8,1.06-.33A1.84,1.84,0,0,0,6,2.82,1.84,1.84,0,0,0,7.89,1.54L9,1.87l2.23,2.8Z']};

    var cloud = { name: 'cloud', paths: ['M10.34,9.59H1.71A1.7,1.7,0,0,1,.09,8.48,1.65,1.65,0,0,1,1.43,6.3l.33,0a.22.22,0,0,0,.18-.14l.11-.32a2.13,2.13,0,0,1,2-1.45l.24,0,.38,0h0a.22.22,0,0,0,.22-.13L5,4a2.74,2.74,0,0,1,2.3-1.6h.12A2.63,2.63,0,0,1,10.07,5a2,2,0,0,1,0,.4L10,6a.22.22,0,0,0,.18.25l.46.08A1.71,1.71,0,0,1,12,7.61,1.68,1.68,0,0,1,11.62,9,1.66,1.66,0,0,1,10.34,9.59ZM4.07,5A1.52,1.52,0,0,0,2.64,6l-.1.31a.84.84,0,0,1-.69.57l-.33,0a1,1,0,0,0-.74.49,1,1,0,0,0-.09.86,1.07,1.07,0,0,0,1,.69h8.63a1,1,0,0,0,1-1.23,1.06,1.06,0,0,0-.87-.81L10,6.83a.85.85,0,0,1-.69-1l.08-.51a1.89,1.89,0,0,0,0-.31,2,2,0,0,0-2-2H7.36A2.09,2.09,0,0,0,5.6,4.28l-.12.26A.85.85,0,0,1,4.71,5H4.62L4.24,5Z']};

    var cloud2 = { name: 'cloud2', paths: ['M12,8.25A1.58,1.58,0,0,0,10.68,7l-.43-.08a.22.22,0,0,1-.17-.24l.08-.48a2.75,2.75,0,0,0,0-.38A2.46,2.46,0,0,0,7.74,3.38H7.63A2.5,2.5,0,0,0,5.68,4.56,2.17,2.17,0,0,0,1.75,5.82,2.2,2.2,0,0,0,2.11,7h0a1.55,1.55,0,0,0-1.26,2,1.6,1.6,0,0,0,1.52,1h8.08A1.55,1.55,0,0,0,12,8.25Zm-8-4a1.58,1.58,0,0,1,1.42.91.23.23,0,0,1-.18.09h0l-.35,0H4.58a2,2,0,0,0-1.9,1.36l-.06.17a1.58,1.58,0,0,1,1.3-2.48Zm7.27,4.92a1,1,0,0,1-.74.35H2.37a1,1,0,0,1-1-.64.89.89,0,0,1,.09-.81.92.92,0,0,1,.69-.45l.3-.05A.79.79,0,0,0,3.14,7l.1-.29a1.41,1.41,0,0,1,1.34-1h.15l.36,0h.09a.81.81,0,0,0,.72-.45L6,5.13A2,2,0,0,1,7.66,4h.08A1.87,1.87,0,0,1,9.6,5.84c0,.08,0,.18,0,.29l-.08.48a.79.79,0,0,0,.64.91l.43.08a1,1,0,0,1,.82.76A1,1,0,0,1,11.19,9.16Z','M3.79,3.08a.3.3,0,0,0,.3-.29V2.2a.3.3,0,0,0-.3-.3.29.29,0,0,0-.29.3v.59A.29.29,0,0,0,3.79,3.08Z','M1.18,5.69A.29.29,0,0,0,.89,5.4H.3a.29.29,0,0,0-.3.29A.3.3,0,0,0,.3,6H.89A.3.3,0,0,0,1.18,5.69Z','M1.5,3.82a.3.3,0,0,0,.21.09.27.27,0,0,0,.21-.09.28.28,0,0,0,0-.41L1.53,3a.31.31,0,0,0-.42,0,.29.29,0,0,0,0,.42Z','M5.8,4A.29.29,0,0,0,6,3.89l.46-.46A.3.3,0,1,0,6.05,3l-.46.46a.31.31,0,0,0,0,.42A.29.29,0,0,0,5.8,4Z']};

    var cloudDownload = { name: 'cloudDownload', paths: ['M12,6a1.73,1.73,0,0,0-1.4-1.34l-.46-.08A.18.18,0,0,1,10,4.37L10,3.86a3.32,3.32,0,0,0,0-.41A2.66,2.66,0,0,0,7.32.81,2.72,2.72,0,0,0,5,2.42l-.13.26a.17.17,0,0,1-.18.1l-.38,0H4.09A2.15,2.15,0,0,0,2,4.19l-.1.31a.18.18,0,0,1-.15.12l-.32,0a1.63,1.63,0,0,0-1.21.78A1.68,1.68,0,0,0,.1,6.88,1.74,1.74,0,0,0,1.75,8H3.18a.36.36,0,0,0,0-.71H1.75a1,1,0,0,1-1-.65.94.94,0,0,1,.09-.83,1,1,0,0,1,.7-.46l.33,0a.88.88,0,0,0,.71-.59l.11-.31a1.49,1.49,0,0,1,1.54-1l.37,0a.87.87,0,0,0,.9-.5l.12-.26a2,2,0,0,1,1.71-1.2,2,2,0,0,1,1.42.53,1.91,1.91,0,0,1,.6,1.4,1.69,1.69,0,0,1,0,.3l-.08.52a.88.88,0,0,0,.72,1l.45.09A1,1,0,0,1,11.06,7a1,1,0,0,1-.75.35H8.82a.36.36,0,0,0,0,.71h1.49A1.69,1.69,0,0,0,11.6,7.4,1.72,1.72,0,0,0,12,6Z','M6.74,9.51,6.26,10V7.31a.36.36,0,0,0-.71,0V10l-.48-.48a.35.35,0,0,0-.5,0,.36.36,0,0,0,0,.49l1.08,1.09a.39.39,0,0,0,.25.1.36.36,0,0,0,.25-.1L7.23,10a.35.35,0,1,0-.49-.49Z']};

    var cloudUpload = { name: 'cloudUpload', paths: ['M12,6a1.73,1.73,0,0,0-1.4-1.34l-.46-.08A.17.17,0,0,1,10,4.37l.08-.51a3.29,3.29,0,0,0,0-.41A2.65,2.65,0,0,0,7.32.8,2.74,2.74,0,0,0,5,2.42l-.12.25a.18.18,0,0,1-.18.11l-.38,0H4.08A2.17,2.17,0,0,0,2,4.19l-.1.31a.19.19,0,0,1-.15.12l-.32,0A1.69,1.69,0,0,0,.09,6.88,1.73,1.73,0,0,0,1.74,8h.73a.36.36,0,0,0,0-.71H1.74a1,1,0,0,1-1-.65.94.94,0,0,1,.09-.83,1,1,0,0,1,.7-.46l.33,0a.89.89,0,0,0,.72-.59l.1-.31a1.47,1.47,0,0,1,1.54-1l.38,0A.88.88,0,0,0,5.52,3l.12-.26a2,2,0,0,1,1.71-1.2,2,2,0,0,1,1.43.54,1.94,1.94,0,0,1,.6,1.4,1.69,1.69,0,0,1,0,.3l-.08.51a.88.88,0,0,0,.71,1l.46.08a1,1,0,0,1,.84.78,1,1,0,0,1-1,1.17H9.53a.36.36,0,0,0,0,.71h.78a1.67,1.67,0,0,0,1.3-.61A1.72,1.72,0,0,0,12,6Z','M6.25,7.07a.34.34,0,0,0-.5,0L4.67,8.15a.35.35,0,0,0,.5.5l.48-.48v2.68A.35.35,0,0,0,6,11.2a.35.35,0,0,0,.35-.35V8.17l.48.48a.35.35,0,0,0,.5-.5Z']};

    var cocktail = { name: 'cocktail', paths: ['M9,.35A.48.48,0,0,0,8.88.27,12,12,0,0,0,6.7,0C6.41,0,5.53,0,5.25.57a.4.4,0,0,0,.19.53l2.19,1L6.9,3.67H1.46a.61.61,0,0,0-.43,1L3.57,7.25A2.7,2.7,0,0,0,5.15,8V11.2H3.36a.4.4,0,0,0,0,.8H7.75a.4.4,0,0,0,0-.8H6V8a2.73,2.73,0,0,0,1.59-.78l2.54-2.54a.62.62,0,0,0,.13-.66.61.61,0,0,0-.56-.38H7.79L8.35,2.5l2.19,1a.39.39,0,0,0,.18,0l.13,0a.43.43,0,0,0,.23-.21C11.5,2.49,10,1.1,9,.35ZM4.14,6.69l-.42-.42H7.38L7,6.69A2.06,2.06,0,0,1,4.14,6.69Zm4-1.22H2.92l-1-1H9.19ZM6.66.8A12.38,12.38,0,0,1,8.61,1,9.66,9.66,0,0,1,10,2.41Z']};

    var coffee = { name: 'coffee', paths: ['M11.37,4.86a1.19,1.19,0,0,0-1.06-.36l0-.11a.65.65,0,0,0-.14-.52.62.62,0,0,0-.48-.22H1a.62.62,0,0,0-.48.22.65.65,0,0,0-.14.52L.88,7.54a3.68,3.68,0,0,0,3.63,3.05H6.15a3.66,3.66,0,0,0,3.62-3l.31,0a1.54,1.54,0,0,0,1.39-.77A1.63,1.63,0,0,0,11.37,4.86Zm-5.22,5H4.51A3,3,0,0,1,1.59,7.41l-.53-3H9.6l-.53,3A3,3,0,0,1,6.15,9.87Zm4.71-3.43a.9.9,0,0,1-1,.41l.27-1.54a.5.5,0,0,1,.69.06A1,1,0,0,1,10.86,6.44Z','M3.18,2.22A1.6,1.6,0,0,0,3.4,3,.36.36,0,0,0,4,2.65a1,1,0,0,1-.11-.43A1,1,0,0,1,4,1.79,1.66,1.66,0,0,0,4.24,1,1.6,1.6,0,0,0,4,.18a.36.36,0,0,0-.5-.12.37.37,0,0,0-.12.5A.93.93,0,0,1,3.51,1a1,1,0,0,1-.11.43A1.7,1.7,0,0,0,3.18,2.22Z','M4.8,2.22A1.6,1.6,0,0,0,5,3a.36.36,0,0,0,.62-.37,1,1,0,0,1-.11-.43,1,1,0,0,1,.11-.43A1.66,1.66,0,0,0,5.86,1a1.6,1.6,0,0,0-.22-.8.36.36,0,0,0-.5-.12A.37.37,0,0,0,5,.56.93.93,0,0,1,5.13,1,1,1,0,0,1,5,1.41,1.7,1.7,0,0,0,4.8,2.22Z','M6.42,2.22a1.6,1.6,0,0,0,.22.8.36.36,0,0,0,.62-.37,1,1,0,0,1-.11-.43,1,1,0,0,1,.11-.43A1.66,1.66,0,0,0,7.48,1a1.6,1.6,0,0,0-.22-.8.36.36,0,0,0-.5-.12.37.37,0,0,0-.12.5A.93.93,0,0,1,6.75,1a1,1,0,0,1-.11.43A1.7,1.7,0,0,0,6.42,2.22Z','M10,11.27H.62a.36.36,0,0,0,0,.72H10a.36.36,0,0,0,0-.72Z']};

    var cog = { name: 'cog', paths: ['M6,4.24A1.76,1.76,0,1,0,7.76,6,1.76,1.76,0,0,0,6,4.24ZM6,7.06A1.06,1.06,0,1,1,7.06,6,1.07,1.07,0,0,1,6,7.06Z','M11.17,4.7h-.65a.12.12,0,0,1-.11-.1,4.6,4.6,0,0,0-.31-.72.14.14,0,0,1,0-.15l.47-.47a.83.83,0,0,0,0-1.17l-.67-.67a.85.85,0,0,0-1.17,0l-.47.47a.15.15,0,0,1-.15,0,3.78,3.78,0,0,0-.72-.3.14.14,0,0,1-.1-.12V.83A.83.83,0,0,0,6.47,0H5.53A.83.83,0,0,0,4.7.83v.65a.14.14,0,0,1-.1.12,3.78,3.78,0,0,0-.72.3.13.13,0,0,1-.15,0l-.47-.47a.85.85,0,0,0-1.17,0l-.67.67a.83.83,0,0,0,0,1.17l.47.47a.12.12,0,0,1,0,.14,5.16,5.16,0,0,0-.31.73.12.12,0,0,1-.11.1H.83A.83.83,0,0,0,0,5.53v.94a.83.83,0,0,0,.83.83h.65a.12.12,0,0,1,.11.1,4.6,4.6,0,0,0,.31.72.14.14,0,0,1,0,.15l-.47.47a.83.83,0,0,0,0,1.17l.67.67a.85.85,0,0,0,1.17,0l.47-.47a.14.14,0,0,1,.14,0,4.22,4.22,0,0,0,.83.33v.74a.83.83,0,0,0,.83.83h.94a.83.83,0,0,0,.83-.83v-.65a.14.14,0,0,1,.1-.12,3.78,3.78,0,0,0,.72-.3.15.15,0,0,1,.15,0l.47.47a.85.85,0,0,0,1.17,0l.67-.67a.83.83,0,0,0,0-1.17l-.47-.47a.12.12,0,0,1,0-.14,5.16,5.16,0,0,0,.31-.73.12.12,0,0,1,.11-.1h.65A.83.83,0,0,0,12,6.47V5.53A.83.83,0,0,0,11.17,4.7Zm.12,1.77a.12.12,0,0,1-.12.13h-.65a.83.83,0,0,0-.79.58,3.35,3.35,0,0,1-.25.62.81.81,0,0,0,.14,1l.46.47a.11.11,0,0,1,0,.17l-.67.67a.1.1,0,0,1-.17,0l-.47-.46a.83.83,0,0,0-1-.14,3.66,3.66,0,0,1-.62.25.83.83,0,0,0-.58.79v.65a.12.12,0,0,1-.13.12H5.53a.12.12,0,0,1-.13-.12v-1a.34.34,0,0,0-.27-.34,4.31,4.31,0,0,1-.93-.34.79.79,0,0,0-.4-.1.76.76,0,0,0-.57.24l-.47.46a.1.1,0,0,1-.17,0l-.67-.67a.11.11,0,0,1,0-.17l.46-.47a.81.81,0,0,0,.14-1,3.35,3.35,0,0,1-.25-.62.83.83,0,0,0-.79-.58H.83a.12.12,0,0,1-.12-.13V5.53A.12.12,0,0,1,.83,5.4h.65a.83.83,0,0,0,.79-.58,3.35,3.35,0,0,1,.25-.62.81.81,0,0,0-.14-1l-.46-.47a.11.11,0,0,1,0-.17l.67-.67a.1.1,0,0,1,.17,0l.47.46a.83.83,0,0,0,1,.14,3.66,3.66,0,0,1,.62-.25.83.83,0,0,0,.58-.79V.83A.12.12,0,0,1,5.53.71h.94A.12.12,0,0,1,6.6.83v.65a.82.82,0,0,0,.59.79,3.92,3.92,0,0,1,.61.25.83.83,0,0,0,1-.14l.47-.46a.1.1,0,0,1,.17,0l.67.67a.11.11,0,0,1,0,.17l-.46.47a.81.81,0,0,0-.14,1,3.35,3.35,0,0,1,.25.62.83.83,0,0,0,.79.58h.65a.12.12,0,0,1,.12.13Z']};

    var collection = { name: 'collection', paths: ['M10.88,3H5.63a.38.38,0,0,1-.38-.37V1.88A1.12,1.12,0,0,0,4.13.75h-3A1.12,1.12,0,0,0,0,1.88v8.25a1.12,1.12,0,0,0,1.13,1.12h9.75A1.12,1.12,0,0,0,12,10.13v-6A1.12,1.12,0,0,0,10.88,3Zm.37,7.13a.38.38,0,0,1-.37.37H1.13a.38.38,0,0,1-.38-.37V1.88a.38.38,0,0,1,.38-.38h3a.38.38,0,0,1,.37.38v.75A1.12,1.12,0,0,0,5.63,3.75h5.25a.38.38,0,0,1,.37.38Z','M7.62,6.3,6.9,6.17l-.34-.65a.66.66,0,0,0-1.12,0l-.34.65-.72.13a.61.61,0,0,0-.49.42A.63.63,0,0,0,4,7.35l.51.53-.11.72a.65.65,0,0,0,.15.5.64.64,0,0,0,.76.15L6,8.93l.65.32a.58.58,0,0,0,.28.07.62.62,0,0,0,.48-.22.65.65,0,0,0,.15-.5l-.11-.72L8,7.35a.63.63,0,0,0,.15-.63A.61.61,0,0,0,7.62,6.3ZM6.87,7.39a.66.66,0,0,0-.17.54l.08.55-.5-.25a.68.68,0,0,0-.56,0l-.5.26.08-.56a.63.63,0,0,0-.17-.53L4.74,7l.55-.1a.61.61,0,0,0,.45-.33L6,6.08l.26.49a.61.61,0,0,0,.45.33l.55.1Z']};

    var compass = { name: 'compass', paths: ['M11.91.31a.67.67,0,0,0-.85-.24L6.73,2.27A3.78,3.78,0,0,0,2.27,6.73L.07,11.06A.65.65,0,0,0,.65,12a.73.73,0,0,0,.29-.07L5.28,9.72A3.83,3.83,0,0,0,6,9.81,3.79,3.79,0,0,0,9.73,5.26L11.93.94A.67.67,0,0,0,11.91.31ZM.88,11.12,2.6,7.73a3.93,3.93,0,0,0,.7,1,3.75,3.75,0,0,0,1,.7ZM8.17,8.17A3.08,3.08,0,0,1,5.29,9a3.14,3.14,0,0,1-1.46-.81A3,3,0,0,1,3,6.7,3,3,0,0,1,6.71,3a3,3,0,0,1,1.46.8A3,3,0,0,1,9,5.29,3,3,0,0,1,8.17,8.17ZM9.4,4.27a3.75,3.75,0,0,0-.7-1,3.53,3.53,0,0,0-1-.7L11.13.86Z','M5.25,5.25A1,1,0,0,0,4.94,6,1.06,1.06,0,1,0,7.06,6a1,1,0,0,0-.31-.75A1.07,1.07,0,0,0,5.25,5.25Zm1,1a.31.31,0,0,1-.44,0A.32.32,0,0,1,5.68,6a.33.33,0,0,1,.1-.23.31.31,0,0,1,.44,0,.33.33,0,0,1,.1.23A.32.32,0,0,1,6.22,6.22Z']};

    var contacts = { name: 'contacts', paths: ['M9.23,0H3.47A1.72,1.72,0,0,0,1.76,1.71V2.82H1.41a.36.36,0,0,0,0,.71h.35V4.71H1.41a.35.35,0,0,0-.35.35.35.35,0,0,0,.35.35h.35V6.59H1.41a.35.35,0,0,0-.35.35.35.35,0,0,0,.35.35h.35V8.47H1.41a.36.36,0,0,0,0,.71h.35v1.11A1.72,1.72,0,0,0,3.47,12H9.23a1.72,1.72,0,0,0,1.71-1.71V1.71A1.72,1.72,0,0,0,9.23,0ZM2.47,10.29V9.18h.35a.36.36,0,1,0,0-.71H2.47V7.29h.35a.35.35,0,0,0,.36-.35.36.36,0,0,0-.36-.35H2.47V5.41h.35a.36.36,0,0,0,.36-.35.35.35,0,0,0-.36-.35H2.47V3.53h.35a.36.36,0,1,0,0-.71H2.47V1.71a1,1,0,0,1,1-1V11.28A1,1,0,0,1,2.47,10.29Zm7.77,0a1,1,0,0,1-1,1H4.13V.71h5.1a1,1,0,0,1,1,1Z','M8.11,5.8a1.52,1.52,0,0,0,.17-.68A1.33,1.33,0,0,0,7,3.73,1.33,1.33,0,0,0,5.76,5.12a1.51,1.51,0,0,0,.16.68A1.34,1.34,0,0,0,5.11,7v.88a.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35V7a.66.66,0,0,1,.65-.65h0A1.07,1.07,0,0,0,7,6.51a1.13,1.13,0,0,0,.51-.12h0A.65.65,0,0,1,8.22,7v.88a.36.36,0,0,0,.71,0V7A1.35,1.35,0,0,0,8.11,5.8ZM7,5.8a.63.63,0,0,1-.56-.68A.63.63,0,0,1,7,4.44a.63.63,0,0,1,.55.68A.63.63,0,0,1,7,5.8Z']};

    var coordinates = { name: 'coordinates', paths: ['M9.73,2.17A4.34,4.34,0,0,0,6,0,4.25,4.25,0,0,0,3.7.65a4.46,4.46,0,0,0-1.39,6l2.8,4.85A1,1,0,0,0,6,12a1,1,0,0,0,.86-.5l2.89-5a.08.08,0,0,0,0,0A4.33,4.33,0,0,0,9.73,2.17Zm-.58,4,0,0-2.86,5a.34.34,0,0,1-.58,0L2.89,6.31A3.77,3.77,0,0,1,4.05,1.22,3.66,3.66,0,0,1,9.15,2.5,3.7,3.7,0,0,1,9.15,6.17Z','M6,2.67A1.67,1.67,0,1,0,7.64,4.33,1.66,1.66,0,0,0,6,2.67ZM6,5.33a1,1,0,1,1,1-1A1,1,0,0,1,6,5.33Z']};

    var coupon = { name: 'coupon', paths: ['M11.9,3.4a.37.37,0,0,0,0-.5L9.1.1a.37.37,0,0,0-.5,0A1.49,1.49,0,0,1,6.53.1.36.36,0,0,0,6,.1L.1,6a.37.37,0,0,0,0,.5A1.47,1.47,0,0,1,.1,8.6a.37.37,0,0,0,0,.5l2.8,2.8a.37.37,0,0,0,.5,0,1.49,1.49,0,0,1,2.07,0,.36.36,0,0,0,.5,0L11.9,6a.37.37,0,0,0,0-.5A1.47,1.47,0,0,1,11.9,3.4Zm-.73,2.3L5.7,11.17a2.21,2.21,0,0,0-2.53,0L.83,8.83a2.18,2.18,0,0,0,0-2.53L6.3.83a2.21,2.21,0,0,0,2.53,0l2.34,2.34A2.18,2.18,0,0,0,11.17,5.7Z','M5.85,3.72a.35.35,0,0,0-.44-.24.37.37,0,0,0-.24.44l1.2,4.13a.36.36,0,0,0,.34.26h.1a.35.35,0,0,0,.24-.44Z','M8.12,5.22a.71.71,0,1,0,.72.7A.71.71,0,0,0,8.12,5.22Z','M4.13,5.15a.7.7,0,0,0-.7.7.71.71,0,1,0,.7-.7Z']};

    var crown = { name: 'crown', paths: ['M12,5a.75.75,0,0,0-1.5,0,.77.77,0,0,0,.06.3c-.63.83-1.37,1.57-1.69,1.57s-1.59-2-2.44-4.34a.75.75,0,1,0-1.17-.61.77.77,0,0,0,.33.61c-.85,2.3-2,4.31-2.45,4.34-.31,0-1.05-.75-1.7-1.59A.67.67,0,0,0,1.5,5a.74.74,0,0,0-.75-.75A.75.75,0,0,0,.47,5.71L.92,9.78a1.15,1.15,0,0,0,1.15,1H10a1.15,1.15,0,0,0,1.15-1l.45-4.08A.75.75,0,0,0,12,5ZM10.35,9.7a.4.4,0,0,1-.4.36H2.07a.4.4,0,0,1-.4-.36L1.29,6.31C1.86,7,2.59,7.64,3.2,7.64h0C4.24,7.56,5.38,5.1,6,3.55c.63,1.55,1.79,4,2.87,4.09.57,0,1.29-.67,1.85-1.32Z']};

    var desktop = { name: 'desktop', paths: ['M10.33.67H1.67A1.66,1.66,0,0,0,0,2.33V7.67A1.66,1.66,0,0,0,1.67,9.33h3.2l-.44,1.34H4a.33.33,0,0,0,0,.66H8a.33.33,0,0,0,0-.66H7.57L7.13,9.33h3.2A1.66,1.66,0,0,0,12,7.67V2.33A1.66,1.66,0,0,0,10.33.67Zm-3.46,10H5.13l.44-1.34h.86Zm4.46-3a1,1,0,0,1-1,1H1.67a1,1,0,0,1-1-1V2.33a1,1,0,0,1,1-1h8.66a1,1,0,0,1,1,1Z','M10.33,2H1.67a.34.34,0,0,0-.34.33V7.67A.34.34,0,0,0,1.67,8h8.66a.34.34,0,0,0,.34-.33V2.33A.34.34,0,0,0,10.33,2ZM10,7.33H2V2.67h8Z']};

    var diamond = { name: 'diamond', paths: ['M11.92,4.68,9.27,1.33A.35.35,0,0,0,9,1.19H3a.35.35,0,0,0-.28.14L.08,4.68a.36.36,0,0,0,0,.47l5.49,5.49a.58.58,0,0,0,.82,0L11.9,5.15A.36.36,0,0,0,11.92,4.68Zm-1-.13H8.09L7.34,1.9H8.82Zm-7,.71,1.32,4-4-4Zm3.52,0L6,9.43,4.61,5.26ZM4.64,4.55,5.39,1.9H6.61l.75,2.65Zm3.49.71h2.66l-4,4Zm-5-3.36H4.66L3.91,4.55H1.08Z']};

    var dollar = { name: 'dollar', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.49,4.75a.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35c0-.82-.78-1.47-1.84-1.59V2.82a.35.35,0,0,0-.7,0v.34c-1.06.12-1.84.77-1.84,1.59s.78,1.46,1.84,1.58v1.8C5,8,4.51,7.67,4.51,7.25a.35.35,0,0,0-.35-.35.35.35,0,0,0-.35.35c0,.82.78,1.47,1.84,1.59v.34a.35.35,0,0,0,.7,0V8.84c1.06-.12,1.84-.77,1.84-1.59S7.41,5.79,6.35,5.67V3.87C7,4,7.49,4.33,7.49,4.75Zm-3,0c0-.42.5-.78,1.14-.88V5.62C5,5.52,4.51,5.16,4.51,4.75Zm3,2.5c0,.42-.5.78-1.14.88V6.38C7,6.48,7.49,6.84,7.49,7.25Z']};

    var download = { name: 'download', paths: ['M5.72,7.48a.39.39,0,0,0,.56,0l2.4-2.4a.4.4,0,0,0-.56-.56L6.4,6.23V.4a.4.4,0,0,0-.8,0V6.23L3.88,4.52a.4.4,0,1,0-.56.56Z','M11.6,8a.4.4,0,0,0-.4.4V10A1.2,1.2,0,0,1,10,11.2H2A1.2,1.2,0,0,1,.8,10V8.4a.4.4,0,1,0-.8,0V10a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V8.4A.4.4,0,0,0,11.6,8Z']};

    var earphone = { name: 'earphone', paths: ['M10.4,4.17h0a4.38,4.38,0,0,0-8.74,0h0A1.6,1.6,0,0,0,0,5.77v1.6a1.6,1.6,0,0,0,3.2,0V5.77a1.59,1.59,0,0,0-.8-1.38,3.6,3.6,0,0,1,7.2,0,1.59,1.59,0,0,0-.8,1.38v1.6a1.59,1.59,0,0,0,.92,1.44,3.91,3.91,0,0,1-2.5,1.52,1.19,1.19,0,0,0-1.11-.76,1.2,1.2,0,1,0,1.13,1.56A4.9,4.9,0,0,0,10.62,9,1.6,1.6,0,0,0,12,7.37V5.77A1.6,1.6,0,0,0,10.4,4.17Zm-8,3.2a.8.8,0,0,1-1.6,0V5.77a.8.8,0,0,1,1.6,0Zm3.71,3.8a.4.4,0,1,1,.4-.4A.4.4,0,0,1,6.11,11.17Zm5.09-3.8a.8.8,0,1,1-1.6,0V5.77a.8.8,0,0,1,1.6,0Z']};

    var earth = { name: 'earth', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0Zm5.26,5.65H9.51A7.61,7.61,0,0,0,8.06,1.12,5.31,5.31,0,0,1,11.26,5.65ZM5.65.75v4.9H3.19C3.28,3.16,4.34,1.08,5.65.75Zm0,5.6v4.9c-1.31-.33-2.37-2.41-2.46-4.9Zm.7,4.9V6.35H8.81C8.72,8.84,7.66,10.92,6.35,11.25Zm0-5.6V.75c1.31.33,2.37,2.41,2.46,4.9ZM3.94,1.12A7.61,7.61,0,0,0,2.49,5.65H.74A5.31,5.31,0,0,1,3.94,1.12ZM.74,6.35H2.49a7.61,7.61,0,0,0,1.45,4.53A5.31,5.31,0,0,1,.74,6.35Zm7.32,4.53A7.61,7.61,0,0,0,9.51,6.35h1.75A5.31,5.31,0,0,1,8.06,10.88Z']};

    var edit = { name: 'edit', paths: ['M11.54,1.28,10.71.45a1.59,1.59,0,0,0-2.22,0l-1,1L1.31,7.63h0l-.73.72a.46.46,0,0,0-.11.22l-.47,3a.44.44,0,0,0,.11.33A.39.39,0,0,0,.39,12H.45l3-.47a.36.36,0,0,0,.21-.11L10.5,4.53l1-1A1.58,1.58,0,0,0,11.54,1.28Zm-1.87,3L4.08,9.85,2.14,7.91l5.59-5.6.7.71Zm-6.5,6.5-2.31.37.36-2.31.36-.36L3.53,10.4ZM11,2.94l-.76.77-1.5-1.5-.45-.45L9,1a.81.81,0,0,1,1.12,0l.83.83A.78.78,0,0,1,11,2.94Z']};

    var empty = { name: 'empty', paths: ['M10.24,2.09H7.77v-1A1.07,1.07,0,0,0,6.71,0H5.29A1.07,1.07,0,0,0,4.23,1.06v1H1.76A1.05,1.05,0,0,0,.7,3.15V4.56a.36.36,0,0,0,.35.36h.36v5.31A1.76,1.76,0,0,0,3.17,12H8.83a1.76,1.76,0,0,0,1.76-1.77V4.92H11a.36.36,0,0,0,.35-.36V3.15A1.05,1.05,0,0,0,10.24,2.09Zm-5.3-1A.35.35,0,0,1,5.29.71H6.71a.35.35,0,0,1,.35.35v1H4.94Zm5,9.17a1.06,1.06,0,0,1-1.06,1.06H3.17a1.06,1.06,0,0,1-1.06-1.06V4.92H9.89Zm.7-6H1.41V3.15a.35.35,0,0,1,.35-.36h8.48a.35.35,0,0,1,.35.36Z','M3.88,9.88a.35.35,0,0,0,.35-.35V6.7a.35.35,0,0,0-.35-.35.34.34,0,0,0-.35.35V9.53A.35.35,0,0,0,3.88,9.88Z','M6,9.88a.35.35,0,0,0,.35-.35V6.7a.35.35,0,1,0-.7,0V9.53A.35.35,0,0,0,6,9.88Z','M8.12,9.88a.35.35,0,0,0,.35-.35V6.7a.34.34,0,0,0-.35-.35.35.35,0,0,0-.35.35V9.53A.35.35,0,0,0,8.12,9.88Z']};

    var enter = { name: 'enter', paths: ['M11.54.46a.46.46,0,0,0-.46.46V6.46A1.39,1.39,0,0,1,9.69,7.85H1.58l2-2a.46.46,0,0,0,0-.65.47.47,0,0,0-.66,0L.14,8a.44.44,0,0,0,0,.65L2.9,11.4a.46.46,0,0,0,.66,0,.46.46,0,0,0,0-.65l-2-2H9.69A2.31,2.31,0,0,0,12,6.46V.92A.47.47,0,0,0,11.54.46Z']};

    var euro = { name: 'euro', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M6.2,3.56A2.11,2.11,0,0,1,8.11,4.88a.36.36,0,0,0,.47.18.34.34,0,0,0,.17-.47A2.83,2.83,0,0,0,6.2,2.85,2.86,2.86,0,0,0,3.59,4.73h-.8a.35.35,0,0,0-.35.35.35.35,0,0,0,.35.35h.6A3.43,3.43,0,0,0,3.34,6a3.18,3.18,0,0,0,.06.62H2.79a.36.36,0,0,0,0,.71h.83A2.84,2.84,0,0,0,6.2,9.13,2.81,2.81,0,0,0,8.75,7.39a.35.35,0,0,0-.17-.47.36.36,0,0,0-.47.18A2.12,2.12,0,0,1,6.2,8.43,2.11,2.11,0,0,1,4.4,7.32H6a.36.36,0,0,0,0-.71H4.13A2.51,2.51,0,0,1,4.05,6a2.6,2.6,0,0,1,.06-.56H6a.35.35,0,0,0,.35-.35A.35.35,0,0,0,6,4.73H4.37A2.12,2.12,0,0,1,6.2,3.56Z']};

    var eye = { name: 'eye', paths: ['M11.69,5.24C10.64,4.17,8.52,2.37,6,2.37S1.36,4.17.31,5.24a1.09,1.09,0,0,0,0,1.52C1.36,7.83,3.48,9.63,6,9.63s4.64-1.8,5.69-2.87A1.09,1.09,0,0,0,11.69,5.24ZM11.22,6.3C10.43,7.1,8.36,9,6,9S1.57,7.1.78,6.3a.44.44,0,0,1,0-.6C1.57,4.9,3.64,3,6,3S10.43,4.9,11.22,5.7A.43.43,0,0,1,11.22,6.3Z','M6,4.35A1.65,1.65,0,1,0,7.65,6,1.65,1.65,0,0,0,6,4.35ZM6,7A1,1,0,1,1,7,6,1,1,0,0,1,6,7Z']};

    var file$9 = { name: 'file', paths: ['M8.82,12H3.18a1.76,1.76,0,0,1-1.77-1.76V1.76A1.76,1.76,0,0,1,3.18,0H8.82a1.76,1.76,0,0,1,1.77,1.76v8.48A1.76,1.76,0,0,1,8.82,12ZM3.18.71A1.05,1.05,0,0,0,2.12,1.76v8.48a1.05,1.05,0,0,0,1.06,1H8.82a1.05,1.05,0,0,0,1.06-1V1.76a1.05,1.05,0,0,0-1.06-1Z','M5.29,4.24H3.88a.36.36,0,0,1-.35-.36V2.47a.35.35,0,0,1,.35-.35H5.29a.36.36,0,0,1,.36.35V3.88A.36.36,0,0,1,5.29,4.24Zm-1-.71h.7V2.82h-.7Z','M8.12,5.65H3.88a.36.36,0,0,1,0-.71H8.12a.36.36,0,0,1,0,.71Z','M8.12,7.76H3.88a.35.35,0,0,1-.35-.35.35.35,0,0,1,.35-.35H8.12a.35.35,0,0,1,.35.35A.35.35,0,0,1,8.12,7.76Z','M8.12,9.88H3.88a.35.35,0,0,1-.35-.35.35.35,0,0,1,.35-.35H8.12a.35.35,0,0,1,.35.35A.35.35,0,0,1,8.12,9.88Z','M8.12,3.53H6.71a.36.36,0,1,1,0-.71H8.12a.36.36,0,0,1,0,.71Z']};

    var fileChoose = { name: 'fileChoose', paths: ['M10.28,4.13,6.46.31A1.06,1.06,0,0,0,5.71,0H3.18A1.76,1.76,0,0,0,1.41,1.76v8.48A1.76,1.76,0,0,0,3.18,12H8.82a1.76,1.76,0,0,0,1.77-1.76V4.88A1.06,1.06,0,0,0,10.28,4.13ZM6.35,1.2l3,3h-2A1.07,1.07,0,0,1,6.35,3.18Zm3.53,9a1.05,1.05,0,0,1-1.06,1H3.18a1.05,1.05,0,0,1-1.06-1V1.76a1.05,1.05,0,0,1,1.06-1H5.65V3.18A1.76,1.76,0,0,0,7.41,4.94H9.88Z','M7.52,6.64,5.62,8.58a.21.21,0,0,1-.17.07.24.24,0,0,1-.17-.07l-.81-.8a.34.34,0,0,0-.49,0,.35.35,0,0,0,0,.5l.8.8a1,1,0,0,0,.67.28h0a.91.91,0,0,0,.67-.28L8,7.14a.36.36,0,0,0,0-.5A.35.35,0,0,0,7.52,6.64Z']};

    var fileEmpty = { name: 'fileEmpty', paths: ['M10.28,4.13,6.46.31A1.06,1.06,0,0,0,5.71,0H3.18A1.76,1.76,0,0,0,1.41,1.76v8.48A1.76,1.76,0,0,0,3.18,12H8.82a1.76,1.76,0,0,0,1.77-1.76V4.88A1.06,1.06,0,0,0,10.28,4.13ZM6.35,1.2l3,3h-2A1.07,1.07,0,0,1,6.35,3.18ZM8.82,11.29H3.18a1.05,1.05,0,0,1-1.06-1V1.76a1.05,1.05,0,0,1,1.06-1H5.65V3.18A1.76,1.76,0,0,0,7.41,4.94H9.88v5.3A1.05,1.05,0,0,1,8.82,11.29Z']};

    var fileMinus = { name: 'fileMinus', paths: ['M10.28,4.13,6.46.31A1.06,1.06,0,0,0,5.71,0H3.18A1.76,1.76,0,0,0,1.41,1.76v8.48A1.76,1.76,0,0,0,3.18,12H8.82a1.76,1.76,0,0,0,1.77-1.76V4.88A1.06,1.06,0,0,0,10.28,4.13ZM6.35,1.2l3,3h-2A1.07,1.07,0,0,1,6.35,3.18ZM8.82,11.29H3.18a1.05,1.05,0,0,1-1.06-1V1.76a1.05,1.05,0,0,1,1.06-1H5.65V3.18A1.76,1.76,0,0,0,7.41,4.94H9.88v5.3A1.05,1.05,0,0,1,8.82,11.29Z','M7.41,7.19H4.59a.34.34,0,0,0-.35.35.35.35,0,0,0,.35.35H7.41a.35.35,0,0,0,.35-.35A.34.34,0,0,0,7.41,7.19Z']};

    var filePlus = { name: 'filePlus', paths: ['M10.28,4.13,6.46.31A1.06,1.06,0,0,0,5.71,0H3.18A1.76,1.76,0,0,0,1.41,1.76v8.48A1.76,1.76,0,0,0,3.18,12H8.82a1.76,1.76,0,0,0,1.77-1.76V4.88A1.06,1.06,0,0,0,10.28,4.13ZM6.35,1.2l3,3h-2A1.06,1.06,0,0,1,6.35,3.18ZM8.82,11.3H3.18a1.06,1.06,0,0,1-1.06-1.06V1.76A1.06,1.06,0,0,1,3.18.7H5.65V3.18A1.76,1.76,0,0,0,7.41,4.94H9.88v5.3A1.06,1.06,0,0,1,8.82,11.3Z','M7.41,7.19H6.35V6.13a.35.35,0,1,0-.7,0V7.19H4.59a.36.36,0,0,0-.36.35.35.35,0,0,0,.36.35H5.65V9a.35.35,0,1,0,.7,0V7.89H7.41a.35.35,0,0,0,.36-.35A.36.36,0,0,0,7.41,7.19Z']};

    var fileText = { name: 'fileText', paths: ['M10.28,4.13,6.46.31A1.06,1.06,0,0,0,5.71,0H3.18A1.76,1.76,0,0,0,1.41,1.76v8.48A1.76,1.76,0,0,0,3.18,12H8.82a1.76,1.76,0,0,0,1.77-1.76V4.88A1.06,1.06,0,0,0,10.28,4.13ZM6.35,1.2l3,3h-2A1.07,1.07,0,0,1,6.35,3.18ZM8.82,11.29H3.18a1.05,1.05,0,0,1-1.06-1V1.76a1.05,1.05,0,0,1,1.06-1H5.65V3.18A1.76,1.76,0,0,0,7.41,4.94H9.88v5.3A1.05,1.05,0,0,1,8.82,11.29Z','M8.12,9.53H3.88a.36.36,0,0,0,0,.71H8.12a.36.36,0,0,0,0-.71Z','M8.12,7.76H3.88a.36.36,0,0,0,0,.71H8.12a.36.36,0,0,0,0-.71Z','M8.12,6H3.88a.36.36,0,0,0,0,.71H8.12a.36.36,0,0,0,0-.71Z']};

    var filter = { name: 'filter', paths: ['M10.49,1a1,1,0,0,0-1-1H2.52a1,1,0,0,0-1,1V2.16a1,1,0,0,0,.26.68L4.54,6.1a.35.35,0,0,1,.08.22V11a1,1,0,0,0,1,1,1,1,0,0,0,.48-.12l.69-.36a1,1,0,0,0,.56-.92V6.32a.35.35,0,0,1,.08-.22l2.79-3.25a1,1,0,0,0,.25-.7Zm-8-.33H9.45A.35.35,0,0,1,9.8,1l0,1H2.18V1A.35.35,0,0,1,2.52.69Zm4.42,5a1,1,0,0,0-.25.67V10.6a.35.35,0,0,1-.18.31l-.69.36A.35.35,0,0,1,5.31,11V6.32a1,1,0,0,0-.25-.67L2.58,2.77H9.42Z']};

    var flag = { name: 'flag', paths: ['M4.5,11H.35a.36.36,0,0,0,0,.71H4.5a.36.36,0,0,0,0-.71Z','M10.75,4,12,1.45A.35.35,0,0,0,11.89,1a.33.33,0,0,0-.42,0,4.64,4.64,0,0,1-2.12.56A4.57,4.57,0,0,1,7.24,1,5.09,5.09,0,0,0,4.76.33,5.15,5.15,0,0,0,2.27,1a.34.34,0,0,0-.16.3V9.58H1.53a.36.36,0,0,0,0,.71H3.31a.36.36,0,0,0,0-.71h-.5V6.12a4.5,4.5,0,0,1,1.95-.48,4.38,4.38,0,0,1,2.11.57,5.27,5.27,0,0,0,2.48.66,5.33,5.33,0,0,0,2.49-.66A.41.41,0,0,0,12,6a.35.35,0,0,0-.06-.28ZM9.35,6.17A4.38,4.38,0,0,1,7.24,5.6a5.27,5.27,0,0,0-2.48-.66,5.09,5.09,0,0,0-1.95.4V1.51A4.52,4.52,0,0,1,4.76,1a4.44,4.44,0,0,1,2.11.56,5.09,5.09,0,0,0,2.48.67A5,5,0,0,0,10.92,2L10,3.9a.32.32,0,0,0,0,.35l1.08,1.53A4.57,4.57,0,0,1,9.35,6.17Z']};

    var focus = { name: 'focus', paths: ['M11.65,5.65H10.57A4.59,4.59,0,0,0,6.35,1.43V.35a.35.35,0,0,0-.7,0V1.43A4.59,4.59,0,0,0,1.43,5.65H.35a.35.35,0,1,0,0,.7H1.43a4.59,4.59,0,0,0,4.22,4.22v1.08a.35.35,0,0,0,.7,0V10.57a4.59,4.59,0,0,0,4.22-4.22h1.08a.35.35,0,0,0,0-.7ZM6.35,9.86v-1a.35.35,0,0,0-.7,0v1A3.87,3.87,0,0,1,2.14,6.35h1a.35.35,0,0,0,0-.7h-1A3.87,3.87,0,0,1,5.65,2.14v1a.35.35,0,0,0,.7,0v-1A3.87,3.87,0,0,1,9.86,5.65h-1a.35.35,0,0,0,0,.7h1A3.87,3.87,0,0,1,6.35,9.86Z']};

    var form = { name: 'form', paths: ['M9,.75H7.85A.86.86,0,0,0,7,0H5a.86.86,0,0,0-.85.75H3A1.88,1.88,0,0,0,1.13,2.63v7.5A1.87,1.87,0,0,0,3,12H9a1.88,1.88,0,0,0,1.88-1.87V2.63A1.88,1.88,0,0,0,9,.75ZM4.88.88A.12.12,0,0,1,5,.75H7a.13.13,0,0,1,.13.13V2.12A.13.13,0,0,1,7,2.25H5a.12.12,0,0,1-.12-.13Zm5.25,9.25A1.13,1.13,0,0,1,9,11.25H3a1.12,1.12,0,0,1-1.12-1.12V2.63A1.12,1.12,0,0,1,3,1.5H4.13v.62A.87.87,0,0,0,5,3H7a.88.88,0,0,0,.88-.88V1.5H9a1.13,1.13,0,0,1,1.13,1.13Z','M8.25,9H3.75a.38.38,0,0,0,0,.75h4.5a.38.38,0,1,0,0-.75Z','M8.25,6.75H3.75a.38.38,0,0,0,0,.75h4.5a.38.38,0,1,0,0-.75Z','M8.25,4.5H3.75a.38.38,0,0,0,0,.75h4.5a.38.38,0,1,0,0-.75Z']};

    var headphone = { name: 'headphone', paths: ['M10.4,6.4V5.2a4.4,4.4,0,0,0-8.8,0V6.4A1.6,1.6,0,0,0,0,8V9.6a1.6,1.6,0,0,0,3.2,0V8a1.59,1.59,0,0,0-.8-1.38V5.2a3.6,3.6,0,0,1,7.2,0V6.62A1.59,1.59,0,0,0,8.8,8V9.6a1.6,1.6,0,0,0,3.2,0V8A1.6,1.6,0,0,0,10.4,6.4Zm-8,3.2a.8.8,0,0,1-1.6,0V8A.8.8,0,0,1,2.4,8Zm8.8,0a.8.8,0,1,1-1.6,0V8a.8.8,0,1,1,1.6,0Z']};

    var heart = { name: 'heart', paths: ['M11.13,2.38A3.7,3.7,0,0,0,8.38,1.15,3.66,3.66,0,0,0,6,2a3.6,3.6,0,0,0-2.38-.87A3.7,3.7,0,0,0,.87,2.38,3.74,3.74,0,0,0,.63,6.86a8.67,8.67,0,0,0,5.13,4l.24,0,.24,0a8.67,8.67,0,0,0,5.13-4A3.74,3.74,0,0,0,11.13,2.38Zm-.41,4.06a8,8,0,0,1-4.65,3.63H5.93A8,8,0,0,1,1.28,6.44,3,3,0,0,1,1.45,2.9a2.92,2.92,0,0,1,2.17-1,2.87,2.87,0,0,1,2.05.85l.06,0a.38.38,0,0,0,.54,0l.06,0a2.87,2.87,0,0,1,2.05-.85,2.92,2.92,0,0,1,2.17,1A3,3,0,0,1,10.72,6.44Z']};

    var help = { name: 'help', paths: ['M6.33,2.86a1.53,1.53,0,0,0-1.86,1.5.35.35,0,0,0,.35.35.35.35,0,0,0,.35-.35.83.83,0,0,1,.31-.65.8.8,0,0,1,.7-.16.82.82,0,0,1,.63.62A.86.86,0,0,1,6.52,5a2.17,2.17,0,0,0-.87,1.71.35.35,0,1,0,.7,0A1.5,1.5,0,0,1,7,5.55a1.53,1.53,0,0,0-.63-2.69Z','M5.75,8.58a.31.31,0,0,0-.1.24.32.32,0,0,0,.1.25.34.34,0,0,0,.5,0,.32.32,0,0,0,.1-.25.35.35,0,0,0-.1-.25A.36.36,0,0,0,5.75,8.58Z','M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z']};

    var hint = { name: 'hint', paths: ['M6,8.8a.4.4,0,0,1-.4-.4V6a.4.4,0,0,1,.8,0V8.4A.4.4,0,0,1,6,8.8Z','M6,4a.43.43,0,0,1-.28-.11A.42.42,0,0,1,5.6,3.6a.38.38,0,0,1,.12-.28.4.4,0,0,1,.56,0,.38.38,0,0,1,.12.28.41.41,0,0,1-.11.28A.42.42,0,0,1,6,4Z','M10.2,12H1.8A1.81,1.81,0,0,1,0,10.2V1.8A1.81,1.81,0,0,1,1.8,0h8.4A1.81,1.81,0,0,1,12,1.8v8.4A1.81,1.81,0,0,1,10.2,12ZM1.8.8a1,1,0,0,0-1,1v8.4a1,1,0,0,0,1,1h8.4a1,1,0,0,0,1-1V1.8a1,1,0,0,0-1-1Z']};

    var home = { name: 'home', paths: ['M11.88,5.66,6.58,1.54a1,1,0,0,0-1.16,0L.12,5.66A.32.32,0,0,0,0,6a.31.31,0,0,0,.3.22H1a.31.31,0,0,1,.31.31V9.7a1,1,0,0,0,1,1H9.79a1,1,0,0,0,1-1V6.54a.31.31,0,0,1,.31-.31h.63A.31.31,0,0,0,12,6,.32.32,0,0,0,11.88,5.66ZM7,10H5.05V7.18a.32.32,0,0,1,.32-.32H6.63A.32.32,0,0,1,7,7.18Zm3.16-3.48V9.7a.32.32,0,0,1-.32.32H7.58V7.18a1,1,0,0,0-1-.95H5.37a1,1,0,0,0-1,.95V10H2.21a.32.32,0,0,1-.32-.32V6.54a.94.94,0,0,0-.7-.91L5.81,2a.33.33,0,0,1,.38,0l4.62,3.59A.94.94,0,0,0,10.11,6.54Z']};

    var hourglass = { name: 'hourglass', paths: ['M4.28,9.76a.36.36,0,0,0,.35.36H7.37a.36.36,0,0,0,0-.71H4.63A.35.35,0,0,0,4.28,9.76Z','M9.56,2.59h.2a.83.83,0,0,0,.83-.83V.82A.83.83,0,0,0,9.76,0H2.24a.83.83,0,0,0-.83.82v.94a.83.83,0,0,0,.83.83h.2A7.92,7.92,0,0,0,4.11,5.86L4.22,6l-.11.14A7.92,7.92,0,0,0,2.44,9.41h-.2a.83.83,0,0,0-.83.83v.94a.83.83,0,0,0,.83.82H9.76a.83.83,0,0,0,.83-.82v-.94a.83.83,0,0,0-.83-.83h-.2A7.92,7.92,0,0,0,7.89,6.14L7.78,6l.11-.14A7.92,7.92,0,0,0,9.56,2.59ZM7.06,6.21l.26.35A6.82,6.82,0,0,1,8.9,9.79a.35.35,0,0,0,.35.33h.51a.12.12,0,0,1,.12.12v.94a.11.11,0,0,1-.12.11H2.24a.11.11,0,0,1-.12-.11v-.94a.12.12,0,0,1,.12-.12h.51a.36.36,0,0,0,.35-.33A6.82,6.82,0,0,1,4.68,6.56l.26-.35a.36.36,0,0,0,0-.42l-.26-.35A6.82,6.82,0,0,1,3.1,2.21a.36.36,0,0,0-.35-.33H2.24a.12.12,0,0,1-.12-.12V.82A.11.11,0,0,1,2.24.71H9.76a.11.11,0,0,1,.12.11v.94a.12.12,0,0,1-.12.12H9.25a.35.35,0,0,0-.35.33A6.82,6.82,0,0,1,7.32,5.44l-.26.35A.36.36,0,0,0,7.06,6.21Z']};

    var hyperlink = { name: 'hyperlink', paths: ['M3.24,12A3.24,3.24,0,0,1,1,6.47L2.46,5A.4.4,0,0,1,3,5a.4.4,0,0,1,0,.57L1.52,7A2.38,2.38,0,0,0,.8,8.76a2.42,2.42,0,0,0,.72,1.73,2.49,2.49,0,0,0,3.44,0L6.47,9A.4.4,0,0,1,7,9a.4.4,0,0,1,0,.56L5.53,11.05A3.23,3.23,0,0,1,3.24,12Z','M9.26,7.15A.43.43,0,0,1,9,7a.4.4,0,0,1,0-.57L10.49,5A2.44,2.44,0,0,0,7,1.51L5.53,3A.4.4,0,0,1,5,3a.42.42,0,0,1,0-.57L6.47,1a3.24,3.24,0,0,1,4.58,4.58L9.55,7A.44.44,0,0,1,9.26,7.15Z','M3.24,9.16A.38.38,0,0,1,3,9a.39.39,0,0,1,0-.56L8.48,3A.4.4,0,0,1,9,3.52L3.52,9A.39.39,0,0,1,3.24,9.16Z']};

    var idCard = { name: 'idCard', paths: ['M2.47,6.35H5.65a.35.35,0,0,0,0-.7H2.47a.35.35,0,1,0,0,.7Z','M2.47,4.59H5.65a.36.36,0,0,0,0-.71H2.47a.36.36,0,0,0,0,.71Z','M10.94,1.76H1.06A1.06,1.06,0,0,0,0,2.82V9.18a1.06,1.06,0,0,0,1.06,1.06h9.88A1.06,1.06,0,0,0,12,9.18V2.82A1.06,1.06,0,0,0,10.94,1.76Zm.35,7.42a.35.35,0,0,1-.35.35H1.06a.35.35,0,0,1-.35-.35V2.82a.35.35,0,0,1,.35-.35h9.88a.35.35,0,0,1,.35.35Z','M9.53,7.41H2.47a.36.36,0,0,0,0,.71H9.53a.36.36,0,0,0,0-.71Z','M9.53,3.77H7.66a.35.35,0,0,0-.35.35V6.24a.35.35,0,0,0,.35.35H9.53a.35.35,0,0,0,.35-.35V4.12A.35.35,0,0,0,9.53,3.77ZM9.18,5.89H8V4.48H9.18Z']};

    var juice = { name: 'juice', paths: ['M8.32,1.53A2.2,2.2,0,0,0,6.15,3.41H4.88L4.57,1.68A1.59,1.59,0,0,0,3.44.44L1.89,0A.31.31,0,0,0,1.5.22a.32.32,0,0,0,.22.39l1.55.44a.94.94,0,0,1,.67.75l.29,1.61H3.46a.74.74,0,0,0-.75.85l.81,6.53A1.38,1.38,0,0,0,4.9,12H6.3a1.38,1.38,0,0,0,1.38-1.22l.61-4.87h0a2.2,2.2,0,0,0,0-4.39ZM7.74,5.17A1.54,1.54,0,0,1,6.79,4h1a.12.12,0,0,1,.09,0,.13.13,0,0,1,0,.1ZM3.37,4.08a.12.12,0,0,1,.09,0h.89L5,7.39H3.73l-.4-3.21A.13.13,0,0,1,3.37,4.08Zm3.68,6.63a.76.76,0,0,1-.75.67H4.9a.76.76,0,0,1-.75-.67L3.81,8H5.06l.23,1.25a.32.32,0,0,0,.31.26h.06a.31.31,0,0,0,.25-.37L5.71,8H7.39Zm.42-3.32H5.59L5,4H6.15A2.2,2.2,0,0,0,7.66,5.81Zm.9-2.11.12-1a.74.74,0,0,0-.75-.85h-1A1.56,1.56,0,1,1,8.37,5.28Z']};

    var key = { name: 'key', paths: ['M11.44,1.4,10.86.81a1.08,1.08,0,0,0-1.48,0l-.3.3L8.27.3A1.06,1.06,0,0,0,6.79.3L6.21.88a1,1,0,0,0,0,1.48L7,3.17,5.24,5A3.68,3.68,0,0,0,3.89,4.7,3.64,3.64,0,0,0,.83,10.31,3.67,3.67,0,0,0,3.91,12,3.64,3.64,0,0,0,7.3,7l4.14-4.14A1,1,0,0,0,11.44,1.4Zm-.51,1L6.62,6.68a.35.35,0,0,0-.07.41,2.93,2.93,0,1,1-5-.46A2.89,2.89,0,0,1,3.89,5.42a3,3,0,0,1,1.28.29.35.35,0,0,0,.41-.07L7.79,3.43a.35.35,0,0,0,.1-.26.35.35,0,0,0-.1-.25L6.72,1.85a.32.32,0,0,1,0-.46L7.31.81a.33.33,0,0,1,.45,0L8.83,1.88a.38.38,0,0,0,.51,0l.55-.56a.34.34,0,0,1,.46,0l.58.59A.31.31,0,0,1,10.93,2.36Z','M2.89,7.32a1.47,1.47,0,0,0-.42,1,1.45,1.45,0,0,0,.42,1,1.45,1.45,0,0,0,2,0,1.41,1.41,0,0,0,.43-1,1.44,1.44,0,0,0-.43-1A1.49,1.49,0,0,0,2.89,7.32ZM4.42,8.86a.74.74,0,0,1-1,0,.71.71,0,0,1-.21-.51.68.68,0,0,1,.21-.51.72.72,0,0,1,.51-.22.7.7,0,0,1,.51.22.68.68,0,0,1,.21.51A.71.71,0,0,1,4.42,8.86Z']};

    var leaves = { name: 'leaves', paths: ['M11.89.64a.4.4,0,0,0-.33-.1c-.13,0-3.3.57-4.81,2.08-1.91,1.9-1.2,3.18-.61,3.77l.13.11c-.16.29-.31.59-.44.87a6.83,6.83,0,0,0-1-2,1.45,1.45,0,0,0,.23-1A2.53,2.53,0,0,0,4,2.8,7.43,7.43,0,0,0,.39,1.74a.34.34,0,0,0-.31.14A.38.38,0,0,0,0,2.22,7.34,7.34,0,0,0,1.89,5.43a2.73,2.73,0,0,0,1.63.69,1.43,1.43,0,0,0,.75-.22,5.13,5.13,0,0,1,1,2.94A8.41,8.41,0,0,0,5,10.72H3.85a.37.37,0,0,0-.38.37.38.38,0,0,0,.38.38h3a.37.37,0,0,0,.37-.38.36.36,0,0,0-.37-.37H5.72A9.2,9.2,0,0,1,6.91,6.89,1.85,1.85,0,0,0,7.57,7,3.48,3.48,0,0,0,9.91,5.79C11.42,4.28,12,1.11,12,1A.37.37,0,0,0,11.89.64ZM2.35,4.84A5.78,5.78,0,0,1,.92,2.54a5.91,5.91,0,0,1,2.58.85,1.9,1.9,0,0,1,.81,1.09.76.76,0,0,1-.19.57C3.72,5.56,3.13,5.45,2.35,4.84Zm7,.42c-1.1,1.09-2,1.32-2.71.6s-.49-1.61.61-2.71a8.92,8.92,0,0,1,3.86-1.76A8.83,8.83,0,0,1,9.38,5.26Z']};

    var lifeBuoy = { name: 'lifeBuoy', paths: ['M11.2,3A6,6,0,0,0,3,.8,6,6,0,0,0,.21,4.45,5.89,5.89,0,0,0,.81,9,6,6,0,1,0,11.2,3Zm-.45,5.33L8.9,7.27a3.16,3.16,0,0,0,0-2.54l1.83-1.05A5.28,5.28,0,0,1,10.75,8.33ZM7.24,8.14A2.45,2.45,0,0,1,6,8.47,2.47,2.47,0,0,1,4.77,3.86,2.41,2.41,0,0,1,6,3.53,2.47,2.47,0,0,1,7.24,8.14Zm3.15-5.08L8.56,4.12a3.08,3.08,0,0,0-.68-.67L8.94,1.61A5.27,5.27,0,0,1,10.39,3.06ZM8.33,1.26,7.27,3.09A3.21,3.21,0,0,0,6,2.82a3.22,3.22,0,0,0-1.26.29L3.67,1.26A5.26,5.26,0,0,1,6,.7,5.33,5.33,0,0,1,8.33,1.26Zm-5.26.36L4.13,3.46a2.85,2.85,0,0,0-.68.66L1.62,3.06A5.23,5.23,0,0,1,3.07,1.62Zm-2.18,3a5.36,5.36,0,0,1,.36-1L3.1,4.73a3.16,3.16,0,0,0,0,2.54L1.27,8.33A5.21,5.21,0,0,1,.89,4.63Zm.72,4.31L3.45,7.88a3,3,0,0,0,.67.67L3.06,10.39A5.27,5.27,0,0,1,1.61,8.94Zm2.06,1.8L4.73,8.91A3.25,3.25,0,0,0,6,9.18a3.22,3.22,0,0,0,1.26-.29l1.07,1.85A5.22,5.22,0,0,1,6,11.3,5.34,5.34,0,0,1,3.67,10.74Zm5.27-.36L7.88,8.54a3.28,3.28,0,0,0,.68-.66l1.82,1.06A5.33,5.33,0,0,1,8.94,10.38Z']};

    var list$1 = { name: 'list', paths: ['M.46,2.31H11.54a.47.47,0,0,0,0-.93H.46a.47.47,0,0,0,0,.93Z','M11.54,5.54H.46a.46.46,0,0,0,0,.92H11.54a.46.46,0,0,0,0-.92Z','M11.54,9.69H.46a.47.47,0,0,0,0,.93H11.54a.47.47,0,0,0,0-.93Z']};

    var listChoose = { name: 'listChoose', paths: ['M4.79,1.57h6.72a.49.49,0,1,0,0-1H4.79a.49.49,0,1,0,0,1Z','M11.51,5.51H4.79a.49.49,0,1,0,0,1h6.72a.49.49,0,0,0,0-1Z','M11.51,10.43H4.79a.49.49,0,1,0,0,1h6.72a.49.49,0,0,0,0-1Z','M1.79.25,1.06,1,.84.77a.5.5,0,0,0-.7,0,.5.5,0,0,0,0,.7l.38.37a.74.74,0,0,0,.54.23h0a.85.85,0,0,0,.54-.23L2.49.93a.48.48,0,0,0,0-.69A.48.48,0,0,0,1.79.25Z','M1.79,5.16l-.73.75L.84,5.69a.5.5,0,0,0-.7,0,.49.49,0,0,0,0,.69l.38.38A.77.77,0,0,0,1.06,7h0a.76.76,0,0,0,.54-.23l.88-.9a.48.48,0,0,0,0-.69A.49.49,0,0,0,1.79,5.16Z','M1.79,10.08l-.73.75-.22-.22a.48.48,0,0,0-.7,0,.49.49,0,0,0,0,.69l.38.38a.77.77,0,0,0,.54.22h0a.76.76,0,0,0,.54-.23l.88-.9a.49.49,0,0,0-.7-.69Z']};

    var listItem = { name: 'listItem', paths: ['M4.15,2.31h7.39a.47.47,0,0,0,0-.93H4.15a.47.47,0,0,0,0,.93Z','M11.54,5.54H4.15a.46.46,0,1,0,0,.92h7.39a.46.46,0,0,0,0-.92Z','M11.54,9.69H4.15a.47.47,0,0,0,0,.93h7.39a.47.47,0,0,0,0-.93Z','M.13,1.52A.51.51,0,0,0,0,1.85a.45.45,0,0,0,.14.32.44.44,0,0,0,.64,0,.4.4,0,0,0,.14-.32.47.47,0,0,0-.14-.34A.48.48,0,0,0,.13,1.52Z','M.14,5.68a.44.44,0,0,0,0,.64.4.4,0,0,0,.32.14.4.4,0,0,0,.32-.14.44.44,0,0,0,0-.64A.45.45,0,0,0,.14,5.68Z','M.13,9.83a.46.46,0,0,0-.13.32.47.47,0,0,0,.14.33.44.44,0,0,0,.64,0,.43.43,0,0,0,.14-.33.4.4,0,0,0-.14-.32A.48.48,0,0,0,.13,9.83Z']};

    var locked = { name: 'locked', paths: ['M10.35,4.65h-1V3.31a3.31,3.31,0,0,0-6.62,0V4.65h-1A1.16,1.16,0,0,0,.49,5.81v5A1.16,1.16,0,0,0,1.65,12h8.7a1.16,1.16,0,0,0,1.16-1.17v-5A1.16,1.16,0,0,0,10.35,4.65ZM3.43,3.31a2.57,2.57,0,0,1,5.14,0V4.65H3.43Zm7.35,7.52a.43.43,0,0,1-.43.43H1.65a.43.43,0,0,1-.43-.43v-5a.43.43,0,0,1,.43-.43h8.7a.43.43,0,0,1,.43.43Z','M6.37,8.55V7.48a.37.37,0,0,0-.74,0V8.55a.78.78,0,0,0-.15.1.79.79,0,0,0-.22.53.74.74,0,0,0,1.48,0,.79.79,0,0,0-.22-.53A.78.78,0,0,0,6.37,8.55Z']};

    var login = { name: 'login', paths: ['M5.08,8.68l2.4-2.4a.39.39,0,0,0,0-.56l-2.4-2.4a.4.4,0,1,0-.56.56L6.23,5.6H.4a.4.4,0,0,0,0,.8H6.23L4.52,8.12a.39.39,0,0,0,0,.56.39.39,0,0,0,.56,0Z','M10,0H5.2a.4.4,0,0,0,0,.8H10A1.2,1.2,0,0,1,11.2,2v8A1.2,1.2,0,0,1,10,11.2H5.2a.4.4,0,0,0,0,.8H10a2,2,0,0,0,2-2V2A2,2,0,0,0,10,0Z']};

    var logout = { name: 'logout', paths: ['M11.88,5.72l-2.4-2.4a.4.4,0,1,0-.56.56L10.63,5.6H4.8a.4.4,0,0,0,0,.8h5.83L8.92,8.12a.39.39,0,0,0,0,.56.39.39,0,0,0,.56,0l2.4-2.4A.39.39,0,0,0,11.88,5.72Z','M6.8,11.2H2A1.2,1.2,0,0,1,.8,10V2A1.2,1.2,0,0,1,2,.8H6.8a.4.4,0,0,0,0-.8H2A2,2,0,0,0,0,2v8a2,2,0,0,0,2,2H6.8a.4.4,0,0,0,0-.8Z']};

    var mail = { name: 'mail', paths: ['M10,1.5H2a2,2,0,0,0-2,2v5a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2v-5A2,2,0,0,0,10,1.5Zm1.21,7.21L8.82,5.78l2.43-1.43V8.5A1.91,1.91,0,0,1,11.21,8.71ZM2,2.25h8a1.26,1.26,0,0,1,1.25,1.23L6.8,6.09a1.8,1.8,0,0,1-1.6,0L.75,3.48A1.26,1.26,0,0,1,2,2.25ZM.79,8.71a1.91,1.91,0,0,1,0-.21V4.35L3.18,5.78ZM2,9.75a1.21,1.21,0,0,1-.82-.33L3.84,6.16l1,.58A2.4,2.4,0,0,0,6,7a2.4,2.4,0,0,0,1.18-.29l1-.58,2.66,3.26a1.21,1.21,0,0,1-.82.33Z']};

    var medal = { name: 'medal', paths: ['M9.78.15A.35.35,0,0,0,9.49,0h-2a.36.36,0,0,0-.33.23L6,3.37,4.82.23A.36.36,0,0,0,4.49,0h-2a.35.35,0,0,0-.29.15.35.35,0,0,0,0,.33L4.41,6.4a3,3,0,1,0,3.18,0L9.82.48A.35.35,0,0,0,9.78.15ZM4.24.71,5.62,4.37,5,5.94H5L3,.71ZM8.33,9A2.33,2.33,0,1,1,6,6.64,2.33,2.33,0,0,1,8.33,9ZM7,5.94H5.79l2-5.23H9Z']};

    var medal2 = { name: 'medal2', paths: ['M10.13,10.51,8.55,6.31l1.22-.57a.31.31,0,0,0,.16-.4L9.42,4l.51-1.39a.31.31,0,0,0-.16-.4L8.42,1.54,7.79.19A.31.31,0,0,0,7.39,0L6,.53,4.61,0a.31.31,0,0,0-.4.17L3.58,1.54l-1.35.62a.31.31,0,0,0-.16.4L2.58,4,2.07,5.34a.31.31,0,0,0,.16.4l1.22.56L1.87,10.51a.31.31,0,0,0,.06.32.33.33,0,0,0,.3.1l1.55-.28,1,1.23A.3.3,0,0,0,5,12h0a.33.33,0,0,0,.25-.21L6,9.94l.69,1.85a.33.33,0,0,0,.25.21H7a.3.3,0,0,0,.25-.12l1-1.23,1.55.28a.33.33,0,0,0,.3-.1A.31.31,0,0,0,10.13,10.51ZM3.22,3.84,2.77,2.61,4,2.07a.41.41,0,0,0,.16-.16L4.66.72l1.23.45a.28.28,0,0,0,.22,0L7.34.72l.55,1.19A.33.33,0,0,0,8,2.07l1.19.54L8.78,3.84a.28.28,0,0,0,0,.22l.45,1.23L8,5.84A.28.28,0,0,0,7.89,6L7.34,7.18,6.11,6.73a.31.31,0,0,0-.22,0l-1.23.45L4.12,6A.33.33,0,0,0,4,5.84L2.77,5.29l.45-1.23A.28.28,0,0,0,3.22,3.84ZM4.91,11l-.75-.94A.31.31,0,0,0,3.85,10l-1.18.21L3.87,7l.34.73a.31.31,0,0,0,.4.16L6,7.37l.24.09Zm3.24-1a.31.31,0,0,0-.31.11L7.09,11,6.34,9l.5-1.34.55.2a.23.23,0,0,0,.11,0,.31.31,0,0,0,.29-.18L8.12,7l1.21,3.2Z']};

    var megaphone = { name: 'megaphone', paths: ['M11.16,2.9,9.94,2.29V1.07A1.09,1.09,0,0,0,8.57,0L1.92,2A1.79,1.79,0,0,0,.64,3.68V5.11A1.8,1.8,0,0,0,1.92,6.82L2.39,7l1.16,4.78a.35.35,0,0,0,.34.27H4a.36.36,0,0,0,.26-.43L3.18,7.18,8.57,8.75a1,1,0,0,0,.3,0A1.08,1.08,0,0,0,9.94,7.72V6.29l1.22-.61a.34.34,0,0,0,.2-.32V3.22A.35.35,0,0,0,11.16,2.9ZM9.22,7.72a.32.32,0,0,1-.1.25.35.35,0,0,1-.35.09L2.12,6.13a1.07,1.07,0,0,1-.77-1V3.68a1.07,1.07,0,0,1,.77-1L8.77.73l.1,0a.36.36,0,0,1,.35.36Zm1.43-2.58-.71.36V3.09l.71.35Z']};

    var message = { name: 'message', paths: ['M9.53,1.48H2.47A2.48,2.48,0,0,0,0,4V6.78A2.48,2.48,0,0,0,2.47,9.25H9.09l1.15,1A1.06,1.06,0,0,0,12,9.46V4A2.48,2.48,0,0,0,9.53,1.48Zm1.76,8a.35.35,0,0,1-.58.26L9.45,8.63a.32.32,0,0,0-.23-.09H2.47A1.76,1.76,0,0,1,.71,6.78V4A1.76,1.76,0,0,1,2.47,2.19H9.53A1.76,1.76,0,0,1,11.29,4Z','M2.82,5.09a.52.52,0,0,0,0,.75A.53.53,0,0,0,3.19,6a.5.5,0,0,0,.37-.15.55.55,0,0,0,.16-.38.52.52,0,0,0-.16-.37A.53.53,0,0,0,2.82,5.09Z','M5.64,5.09a.52.52,0,0,0-.16.37.55.55,0,0,0,.16.38A.53.53,0,0,0,6,6a.52.52,0,0,0,.38-.15.54.54,0,0,0,.15-.38.51.51,0,0,0-.15-.37A.54.54,0,0,0,5.64,5.09Z','M8.46,5.09a.51.51,0,0,0-.15.37.54.54,0,0,0,.15.38A.55.55,0,0,0,8.84,6a.51.51,0,0,0,.37-.15.55.55,0,0,0,.16-.38.52.52,0,0,0-.16-.37A.54.54,0,0,0,8.46,5.09Z']};

    var microphone = { name: 'microphone', paths: ['M9.87,6.19a.39.39,0,0,0-.77,0A2.92,2.92,0,0,1,6,8.9,2.92,2.92,0,0,1,2.9,6.19a.39.39,0,0,0-.77,0A3.63,3.63,0,0,0,5.61,9.64v1.59H4.45a.39.39,0,1,0,0,.77h3.1a.39.39,0,1,0,0-.77H6.39V9.64A3.63,3.63,0,0,0,9.87,6.19Z','M6,7.74A1.94,1.94,0,0,0,7.94,5.81V1.94a1.94,1.94,0,0,0-3.88,0V5.81A1.94,1.94,0,0,0,6,7.74ZM4.84,1.94a1.16,1.16,0,1,1,2.32,0V5.81a1.16,1.16,0,0,1-2.32,0Z']};

    var minus = { name: 'minus', paths: ['M11.54,6.46H.46a.46.46,0,0,1,0-.92H11.54a.46.46,0,0,1,0,.92Z']};

    var money = { name: 'money', paths: ['M4.67,9A1.67,1.67,0,1,0,3,7.33,1.66,1.66,0,0,0,4.67,9Zm0-2.67a1,1,0,1,1-1,1A1,1,0,0,1,4.67,6.33Z','M11.67,2H3a.33.33,0,0,0-.33.33v1h-1a.34.34,0,0,0-.34.34v1h-1A.33.33,0,0,0,0,5V9.67A.33.33,0,0,0,.33,10H9a.33.33,0,0,0,.33-.33v-1h1a.34.34,0,0,0,.34-.34v-1h1A.33.33,0,0,0,12,7V2.33A.33.33,0,0,0,11.67,2Zm-3,7.33h-8v-4h8ZM10,8H9.33V5A.33.33,0,0,0,9,4.67H2V4h8Zm1.33-1.33h-.66v-3a.34.34,0,0,0-.34-.34h-7V2.67h8Z']};

    var moon = { name: 'moon', paths: ['M11.79,5.59a.4.4,0,0,0-.41,0,3.62,3.62,0,0,1-4.53-.46A3.6,3.6,0,0,1,6.39.62a.4.4,0,0,0,0-.41A.44.44,0,0,0,6,0,6,6,0,0,0,0,6a6,6,0,0,0,6,6,5.93,5.93,0,0,0,4.24-1.76A5.91,5.91,0,0,0,12,5.94.39.39,0,0,0,11.79,5.59ZM9.68,9.68A5.2,5.2,0,1,1,5.36.84a4.44,4.44,0,0,0,.92,4.88,4.46,4.46,0,0,0,4.88.92A5.15,5.15,0,0,1,9.68,9.68Z']};

    var mouse = { name: 'mouse', paths: ['M7,0H5A3.15,3.15,0,0,0,1.89,3.14V8.86A3.15,3.15,0,0,0,5,12H7a3.15,3.15,0,0,0,3.14-3.14V3.14A3.15,3.15,0,0,0,7,0ZM5,.63h.65V3.16a.32.32,0,0,0,.64,0V.63H7a2.5,2.5,0,0,1,2.5,2.51V5H2.53V3.14A2.5,2.5,0,0,1,5,.63ZM7,11.37H5a2.5,2.5,0,0,1-2.5-2.51V5.61H9.47V8.86A2.5,2.5,0,0,1,7,11.37Z']};

    var music = { name: 'music', paths: ['M11.35,2.44a.39.39,0,0,0-.46-.07S10,2.82,8.81,1.5A4.05,4.05,0,0,0,5,.06a.38.38,0,0,0-.28.37V2.11a.25.25,0,0,0,0,.17V8.11a2.22,2.22,0,0,0-1.2-.34,3.13,3.13,0,0,0-1.41.35A2.33,2.33,0,0,0,.71,11a1.91,1.91,0,0,0,1.78,1,3.25,3.25,0,0,0,1.41-.34,3.16,3.16,0,0,0,1.35-1.28,2.07,2.07,0,0,0,.23-.8h0V2.48a2.72,2.72,0,0,1,2.35.81A2.29,2.29,0,0,0,9.71,4,2.61,2.61,0,0,0,11.39,2.9.36.36,0,0,0,11.35,2.44ZM4.58,10a2.2,2.2,0,0,1-1,1c-.86.43-1.89.3-2.18-.28s.2-1.47,1.09-1.91a2.46,2.46,0,0,1,1.07-.27,1.19,1.19,0,0,1,1.11.55A1.07,1.07,0,0,1,4.58,10Zm5-6.76a1.62,1.62,0,0,1-1.27-.53,3.53,3.53,0,0,0-2.46-1l-.39,0v-1A3.51,3.51,0,0,1,8.27,2,3.53,3.53,0,0,0,10,3.14,1.31,1.31,0,0,1,9.61,3.27Z']};

    var mute = { name: 'mute', paths: ['M11.88,11.32,9.41,8.85V7.31h.4A1.19,1.19,0,0,0,11,6.11V5.89a1.19,1.19,0,0,0-1.2-1.2h-.4V1.29A1.21,1.21,0,0,0,8.21.08a1.16,1.16,0,0,0-.75.28L3.86,3.29.68.12a.39.39,0,0,0-.56,0,.39.39,0,0,0,0,.56L2.9,3.47H1.39a.39.39,0,0,0-.4.4V8.13a.39.39,0,0,0,.4.4H3.64l3.82,3.11a1.16,1.16,0,0,0,.75.28,1.21,1.21,0,0,0,1.2-1.21V10l1.91,1.9a.39.39,0,0,0,.56,0A.39.39,0,0,0,11.88,11.32ZM9.81,5.49a.39.39,0,0,1,.4.4v.22a.39.39,0,0,1-.4.4h-.4v-1ZM8,1a.4.4,0,0,1,.65.31V8.05L4.43,3.86ZM1.79,4.27h1.6V7.73H1.79Zm6.82,6.44A.4.4,0,0,1,8,11L4.19,7.94V4.75L8.61,9.18Z']};

    var navigation = { name: 'navigation', paths: ['M11.78.55a1.27,1.27,0,0,0-1.5-.47L.8,3.79A1.23,1.23,0,0,0,0,5.1,1.24,1.24,0,0,0,1.06,6.21l3.71.6a.49.49,0,0,1,.42.42l.6,3.71a1.26,1.26,0,0,0,2.41.26l3.71-9.48A1.22,1.22,0,0,0,11.78.55ZM1.18,5.47A.49.49,0,0,1,.75,5a.5.5,0,0,1,.32-.53L10.55.78l.17,0L5.27,6.2a1.07,1.07,0,0,0-.38-.13Zm10-4L7.5,10.93a.48.48,0,0,1-.47.32.49.49,0,0,1-.5-.43l-.6-3.71a1.14,1.14,0,0,0-.13-.38l5.45-5.45A.34.34,0,0,1,11.21,1.44Z']};

    var no = { name: 'no', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M2.8,3.3a.35.35,0,0,0-.28-.1.33.33,0,0,0-.25.15A4.53,4.53,0,0,0,1.41,6,4.6,4.6,0,0,0,6,10.59a4.53,4.53,0,0,0,2.65-.86.33.33,0,0,0,.15-.25.35.35,0,0,0-.1-.28ZM6,9.88A3.88,3.88,0,0,1,2.12,6a3.82,3.82,0,0,1,.5-1.89L7.89,9.38A3.82,3.82,0,0,1,6,9.88Z','M6,1.41a4.53,4.53,0,0,0-2.65.86.33.33,0,0,0-.15.25.35.35,0,0,0,.1.28L9.2,8.7a.36.36,0,0,0,.25.1h0a.33.33,0,0,0,.25-.15A4.53,4.53,0,0,0,10.59,6,4.6,4.6,0,0,0,6,1.41ZM9.38,7.89,4.11,2.62A3.82,3.82,0,0,1,6,2.12,3.88,3.88,0,0,1,9.88,6,3.82,3.82,0,0,1,9.38,7.89Z']};

    var pad = { name: 'pad', paths: ['M9.17,0H2.83A1.76,1.76,0,0,0,1.06,1.77v8.46A1.76,1.76,0,0,0,2.83,12H9.17a1.76,1.76,0,0,0,1.77-1.76V1.77A1.76,1.76,0,0,0,9.17,0Zm1.06,10.22a1.06,1.06,0,0,1-1.06,1.06H2.83a1.06,1.06,0,0,1-1.06-1.06V1.77A1.06,1.06,0,0,1,2.83.71H9.17a1.06,1.06,0,0,1,1.06,1.06Z','M9.17,1.42H2.83a.35.35,0,0,0-.36.35V8.82a.35.35,0,0,0,.36.35H9.17a.35.35,0,0,0,.36-.35v-7A.35.35,0,0,0,9.17,1.42ZM8.82,8.47H3.18V2.12H8.82Z','M5.5,9.79a.69.69,0,0,0-.21.49.71.71,0,0,0,.21.5.7.7,0,0,0,1,0,.71.71,0,0,0,.21-.5.69.69,0,0,0-.21-.49A.74.74,0,0,0,5.5,9.79Z']};

    var phone = { name: 'phone', paths: ['M7.84,0H4.16A1.7,1.7,0,0,0,2.47,1.7v8.6A1.7,1.7,0,0,0,4.16,12H7.84a1.7,1.7,0,0,0,1.69-1.7V1.7A1.7,1.7,0,0,0,7.84,0Zm1,10.3a1,1,0,0,1-1,1H4.16a1,1,0,0,1-1-1V1.7a1,1,0,0,1,1-1H7.84a1,1,0,0,1,1,1Z','M7.9,1.41H4.1a.36.36,0,0,0-.36.35V8.82a.36.36,0,0,0,.36.35H7.9a.36.36,0,0,0,.36-.35V1.76A.36.36,0,0,0,7.9,1.41ZM7.55,8.46H4.45V2.11h3.1Z','M5.5,9.73a.75.75,0,0,0-.21.5.71.71,0,0,0,.21.5.73.73,0,0,0,.5.21.72.72,0,0,0,.71-.71.73.73,0,0,0-.21-.5A.74.74,0,0,0,5.5,9.73Z']};

    var picture = { name: 'picture', paths: ['M10.24,1.41H1.76A1.76,1.76,0,0,0,0,3.18V8.82a1.76,1.76,0,0,0,1.76,1.77h8.48A1.76,1.76,0,0,0,12,8.82V3.18A1.76,1.76,0,0,0,10.24,1.41Zm-8.48.71h8.48a1.05,1.05,0,0,1,1,1.06V7.34a6.85,6.85,0,0,1-3.37-1,6.49,6.49,0,0,0-3.4-1h0A5.86,5.86,0,0,0,.71,6.87V3.18A1.05,1.05,0,0,1,1.76,2.12Zm8.48,7.76H1.76a1.05,1.05,0,0,1-1-1.06v-1A5.52,5.52,0,0,1,4.51,6h0a5.8,5.8,0,0,1,3.06.92,7.67,7.67,0,0,0,3.71,1.13v.77A1.05,1.05,0,0,1,10.24,9.88Z','M9.18,5.58A1.06,1.06,0,1,0,8.12,4.52,1.06,1.06,0,0,0,9.18,5.58Zm0-1.41a.36.36,0,0,1,0,.71.36.36,0,1,1,0-.71Z']};

    var pieChart = { name: 'pieChart', paths: ['M7.33.15A6,6,0,0,0,6,0,6,6,0,0,0,4.67,11.85,6,6,0,0,0,6,12,6,6,0,0,0,7.33.15ZM10.88,4l-4.4,1.5,1-4.53A5.33,5.33,0,0,1,10.88,4ZM6,.71a5.67,5.67,0,0,1,.82.07L5.72,5.65h-5a5.79,5.79,0,0,1,.12-.82A5.26,5.26,0,0,1,6,.71Zm5.16,6.46A5.26,5.26,0,0,1,6,11.29a5.18,5.18,0,0,1-1.17-.13A5.3,5.3,0,0,1,.72,6.35H6a.2.2,0,0,0,.11,0l5-1.7A5.18,5.18,0,0,1,11.16,7.17Z']};

    var pin = { name: 'pin', paths: ['M11.63,3.71,8.28.36A1.28,1.28,0,0,0,6.5.36L6.38.48A1.24,1.24,0,0,0,6,1.37a1.26,1.26,0,0,0,.37.89l0,0-2.95,3a3,3,0,0,0-3.35.59.36.36,0,0,0,0,.52L2.62,8.86.44,11a.35.35,0,0,0,0,.51.36.36,0,0,0,.25.11A.36.36,0,0,0,1,11.55L3.13,9.37l2.51,2.51a.36.36,0,0,0,.52,0,3,3,0,0,0,.58-3.35l3-3,0,0a1.3,1.3,0,0,0,1.78,0l.12-.12A1.26,1.26,0,0,0,12,4.6,1.22,1.22,0,0,0,11.63,3.71ZM11.12,5,11,5.09a.54.54,0,0,1-.75,0L10,4.8a.37.37,0,0,0-.52,0L6,8.2A.38.38,0,0,0,6,8.65a2.23,2.23,0,0,1-.1,2.44l-5-5A2.27,2.27,0,0,1,3.34,6,.38.38,0,0,0,3.79,6l3.4-3.4a.37.37,0,0,0,0-.52L6.9,1.74a.52.52,0,0,1-.16-.37A.55.55,0,0,1,6.9,1L7,.87a.54.54,0,0,1,.75,0l3.35,3.35a.54.54,0,0,1,.15.38A.51.51,0,0,1,11.12,5Z']};

    var plane = { name: 'plane', paths: ['M12,.4a.36.36,0,0,0-.11-.29A.37.37,0,0,0,11.6,0,4.49,4.49,0,0,0,8.77,1.3L6.87,3.2,1.13,2.64a.7.7,0,0,0-.5.2l-.42.42A.72.72,0,0,0,.45,4.43L4.25,6,2.68,7.81l-.89-.27-.13,0A.83.83,0,0,0,1.13,9l1.92,1.92a.84.84,0,0,0,1.43-.53.3.3,0,0,0,0-.13l-.27-.89L6,7.75l1.57,3.8a.72.72,0,0,0,.67.45.69.69,0,0,0,.5-.21l.42-.42a.71.71,0,0,0,.2-.57L8.8,5.13l1.9-1.9A4.49,4.49,0,0,0,12,.4ZM8.27,4.6a.75.75,0,0,0-.22.6l.58,5.64-.38.38L6.69,7.46A.75.75,0,0,0,6,7a.72.72,0,0,0-.48.18l-2,1.72a.36.36,0,0,0-.11.39l.32,1s-.09,0-.14,0L1.66,8.42s0-.06,0-.09a.05.05,0,0,1,0-.05l1,.32a.36.36,0,0,0,.39-.11l1.73-2A.74.74,0,0,0,5,5.82a.71.71,0,0,0-.44-.51L.74,3.79l.39-.4L6.87,4a.75.75,0,0,0,.53-.22l1.9-1.9a3.69,3.69,0,0,1,1.89-1,3.69,3.69,0,0,1-1,1.89Z']};

    var planet = { name: 'planet', paths: ['M11.51.49c-.77-.77-2.32-.62-4.18.39A5,5,0,0,0,6,.7,5.3,5.3,0,0,0,.7,6,5.45,5.45,0,0,0,.88,7.32C-.13,9.2-.28,10.72.5,11.5a1.86,1.86,0,0,0,1.37.5,6.2,6.2,0,0,0,2.8-.89A5.07,5.07,0,0,0,6,11.29,5.3,5.3,0,0,0,11.3,6a5,5,0,0,0-.18-1.33C12.14,2.79,12.28,1.27,11.51.49ZM11,1c.45.46.37,1.48-.21,2.76A5.44,5.44,0,0,0,8.25,1.2C9.51.63,10.56.54,11,1ZM6,1.4a4.67,4.67,0,0,1,1.28.19,4.6,4.6,0,0,1,3.08,3A15.57,15.57,0,0,1,7.83,7.82a16,16,0,0,1-3.24,2.54A4.59,4.59,0,0,1,6,1.4ZM1,11c-.46-.46-.37-1.48.21-2.76a5.31,5.31,0,0,0,2.55,2.55C2.49,11.37,1.45,11.45,1,11Zm5-.41-.4,0h0A17.07,17.07,0,0,0,8.33,8.32a17,17,0,0,0,2.25-2.74h0c0,.14,0,.27,0,.41A4.6,4.6,0,0,1,6,10.59Z']};

    var plus = { name: 'plus', paths: ['M11.54,5.54H6.46V.46a.46.46,0,0,0-.92,0V5.54H.46a.46.46,0,0,0,0,.92H5.54v5.08a.46.46,0,1,0,.92,0V6.46h5.08a.46.46,0,0,0,0-.92Z']};

    var pound = { name: 'pound', paths: ['M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z','M7.56,8.28a.35.35,0,0,0-.47.18c-.08,0-.24,0-.49-.13a1.59,1.59,0,0,0-1.2-.14A7.49,7.49,0,0,0,5.3,6.5L5.24,6H6.51a.35.35,0,0,0,.36-.35.36.36,0,0,0-.36-.35H5.19a2.19,2.19,0,0,1,.24-1.13,1.09,1.09,0,0,1,.73-.59,1.26,1.26,0,0,1,.91.21.37.37,0,0,0,.49,0,.35.35,0,0,0,0-.5,2,2,0,0,0-1.43-.41,1.72,1.72,0,0,0-1.31.94,2.82,2.82,0,0,0-.34,1.49H3.93a.36.36,0,0,0-.36.35A.35.35,0,0,0,3.93,6h.6c0,.21,0,.42.07.62a3.87,3.87,0,0,1,0,2.08.35.35,0,0,0,.54.43A1.15,1.15,0,0,1,6.26,9,1.67,1.67,0,0,0,7,9.18a.94.94,0,0,0,.3,0,.76.76,0,0,0,.43-.38A.36.36,0,0,0,7.56,8.28Z']};

    var power = { name: 'power', paths: ['M8.7,1.53a.39.39,0,0,0-.51.15.38.38,0,0,0,.15.51,4.84,4.84,0,1,1-4.68,0,.38.38,0,0,0,.15-.51.39.39,0,0,0-.51-.15,5.58,5.58,0,1,0,5.4,0Z','M6,4.47a.37.37,0,0,0,.37-.38V.37a.37.37,0,0,0-.74,0V4.09A.37.37,0,0,0,6,4.47Z']};

    var rain = { name: 'rain', paths: ['M12,5.4a1.71,1.71,0,0,0-1.38-1.32L10.13,4A.22.22,0,0,1,10,3.75L10,3.23a2.1,2.1,0,0,0,0-.41A2.63,2.63,0,0,0,7.45.2H7.33A2.74,2.74,0,0,0,5,1.8l-.12.26c0,.08-.09.12-.22.13l-.38,0-.24,0a2.12,2.12,0,0,0-2,1.45l-.11.32A.24.24,0,0,1,1.76,4l-.33,0A1.65,1.65,0,0,0,.09,6.27,1.7,1.7,0,0,0,1.71,7.38h8.63a1.66,1.66,0,0,0,1.28-.6A1.68,1.68,0,0,0,12,5.4Zm-.84,1a1,1,0,0,1-.79.38H1.71a1.07,1.07,0,0,1-1-.69,1,1,0,0,1,.09-.87,1.05,1.05,0,0,1,.74-.48l.33,0a.84.84,0,0,0,.69-.57l.1-.31a1.5,1.5,0,0,1,1.43-1h.17l.38,0h.09a.85.85,0,0,0,.77-.49l.12-.26A2.09,2.09,0,0,1,7.36.84h.09a2,2,0,0,1,2,2,1.71,1.71,0,0,1,0,.31l-.08.52a.85.85,0,0,0,.69,1l.46.09a1.06,1.06,0,0,1,.87.81A1,1,0,0,1,11.13,6.37Z','M3.47,8.64A.31.31,0,0,0,3.16,9v1.26a.32.32,0,1,0,.63,0V9A.32.32,0,0,0,3.47,8.64Z','M6,9.9a.33.33,0,0,0-.32.32v1.26a.32.32,0,0,0,.64,0V10.22A.33.33,0,0,0,6,9.9Z','M8.53,8.64A.32.32,0,0,0,8.21,9v1.26a.32.32,0,1,0,.63,0V9A.31.31,0,0,0,8.53,8.64Z']};

    var refresh = { name: 'refresh', paths: ['M11.9,4.8a.32.32,0,0,0-.45,0l-.93,1A4.53,4.53,0,0,0,3.3,2.36a.32.32,0,0,0,.38.51A3.89,3.89,0,0,1,9.89,6.08L8.66,5a.31.31,0,1,0-.42.46L9.93,7a.34.34,0,0,0,.21.08h0a.33.33,0,0,0,.22-.11l1.54-1.69A.32.32,0,0,0,11.9,4.8Z','M8.32,9.13A3.89,3.89,0,0,1,2.11,5.92L3.34,7a.31.31,0,1,0,.42-.46L2.07,5A.36.36,0,0,0,1.84,5a.37.37,0,0,0-.22.1L.08,6.75a.32.32,0,0,0,0,.45.3.3,0,0,0,.22.08.3.3,0,0,0,.23-.1l.93-1a4.5,4.5,0,0,0,3.86,4.32,5,5,0,0,0,.67,0A4.54,4.54,0,0,0,8.7,9.64a.32.32,0,0,0,.06-.45A.32.32,0,0,0,8.32,9.13Z']};

    var rocket = { name: 'rocket', paths: ['M10,6.93l.2-.25h0c2.93-3.59,1.48-6,1.42-6.16a.43.43,0,0,0-.12-.11A3.57,3.57,0,0,0,9.69,0,7,7,0,0,0,5.35,1.8,2.28,2.28,0,0,0,5.06,2h0a1.91,1.91,0,0,0-2.69.41C.2,4.61,1.14,6.18,1.18,6.25l.11.11a2,2,0,0,0,1.1.23A3.48,3.48,0,0,0,3.46,8.54a3.57,3.57,0,0,0,2,1.07,2,2,0,0,0,.23,1.09.25.25,0,0,0,.11.12,2.06,2.06,0,0,0,1,.23A4,4,0,0,0,9.56,9.63,1.91,1.91,0,0,0,10,6.94Zm-.91,2.2a3.39,3.39,0,0,1-2.32,1.22,1.42,1.42,0,0,1-.54-.1,1.72,1.72,0,0,1-.06-.9.32.32,0,0,0-.07-.28.35.35,0,0,0-.27-.13A2.69,2.69,0,0,1,4,8a2.68,2.68,0,0,1-.9-1.85.35.35,0,0,0-.42-.34,1.63,1.63,0,0,1-.9-.06c-.12-.3-.37-1.35,1.13-2.85.71-.72,1.33-.79,1.93-.2a.33.33,0,0,0,.25.11h0c.14,0,.21-.06.47-.29l.18-.14.06,0A6.32,6.32,0,0,1,9.69.71,3.32,3.32,0,0,1,11,1c.19.41.93,2.4-1.41,5.26l0,.07-.15.17c-.22.27-.42.49-.18.73S10,8.18,9.06,9.13Z','M2.83,9.16a.37.37,0,0,0-.5,0L.55,11a.35.35,0,0,0,.25.6.35.35,0,0,0,.25-.1L2.83,9.66A.35.35,0,0,0,2.83,9.16Z','M1.49,8.32A.35.35,0,1,0,1,7.83l-.9.89a.37.37,0,0,0,0,.5.35.35,0,0,0,.25.1.35.35,0,0,0,.25-.1Z','M3.67,10.5l-.89.89a.35.35,0,0,0,0,.5.34.34,0,0,0,.5,0L4.17,11a.35.35,0,0,0-.5-.5Z','M6.36,3.36A1.61,1.61,0,0,0,7.5,6.11a1.63,1.63,0,0,0,1.14-.47,1.62,1.62,0,0,0,0-2.28A1.65,1.65,0,0,0,6.36,3.36ZM8.14,5.14a.94.94,0,0,1-1.29,0,.91.91,0,0,1,0-1.28.89.89,0,0,1,.65-.27.87.87,0,0,1,.64.27.89.89,0,0,1,0,1.28Z']};

    var ruler = { name: 'ruler', paths: ['M11.68,2.66,9.33.32a1.13,1.13,0,0,0-1.57,0L4.89,3.19h0L1.49,6.58h0L.32,7.75a1.11,1.11,0,0,0,0,1.58l2.35,2.34a1.1,1.1,0,0,0,1.57,0l7.44-7.43a1.11,1.11,0,0,0,0-1.58Zm-.53,1L3.72,11.15a.39.39,0,0,1-.53,0L.85,8.8a.36.36,0,0,1,0-.52l.91-.91.87.87a.36.36,0,0,0,.26.11.38.38,0,0,0,.26-.11.37.37,0,0,0,0-.53l-.87-.87L3.45,5.67l.87.87a.4.4,0,0,0,.27.11.38.38,0,0,0,.26-.11.39.39,0,0,0,0-.53L4,5.15,5.15,4,6,4.84A.34.34,0,0,0,6.28,5a.36.36,0,0,0,.27-.11.37.37,0,0,0,0-.52l-.87-.87L6.85,2.28l.87.86A.34.34,0,0,0,8,3.25a.33.33,0,0,0,.26-.11.36.36,0,0,0,0-.52l-.87-.87L8.28.84A.39.39,0,0,1,8.55.73a.36.36,0,0,1,.26.11l2.34,2.35a.36.36,0,0,1,0,.52Z']};

    var scissors = { name: 'scissors', paths: ['M10.64,9.48l-.46-1.12a1.77,1.77,0,0,0-.95-.95,1.85,1.85,0,0,0-1.35,0l-1,.41L6.38,6.55,8.9.49A.35.35,0,0,0,8.71,0a.35.35,0,0,0-.46.19L6,5.63,3.75.22A.35.35,0,0,0,3.29,0,.35.35,0,0,0,3.1.49L5.62,6.55,5.09,7.82l-1-.41a1.85,1.85,0,0,0-1.35,0,1.77,1.77,0,0,0-.95.95L1.36,9.48a1.75,1.75,0,0,0,1,2.3l.24.11a1.65,1.65,0,0,0,.57.11,1.5,1.5,0,0,0,1.38-.92L6,7.47l1.5,3.61A1.5,1.5,0,0,0,8.88,12a1.65,1.65,0,0,0,.57-.11l.24-.11A1.75,1.75,0,0,0,10.64,9.48ZM3.85,10.81a.79.79,0,0,1-1,.42l-.24-.1A1,1,0,0,1,2,9.75l.46-1.12A1.08,1.08,0,0,1,3,8.07,1,1,0,0,1,3.45,8a1,1,0,0,1,.4.08l1,.4Zm5.57.32-.24.1a.78.78,0,0,1-.6,0,.77.77,0,0,1-.43-.42l-1-2.34,1-.4a1,1,0,0,1,.81,0,1.08,1.08,0,0,1,.57.56L10,9.75A1,1,0,0,1,9.42,11.13Z']};

    var search = { name: 'search', paths: ['M11.87,11.27,8.32,7.71a4.65,4.65,0,0,0,1.11-3A4.72,4.72,0,1,0,4.71,9.43a4.65,4.65,0,0,0,3-1.11l3.56,3.55a.41.41,0,0,0,.6,0A.42.42,0,0,0,11.87,11.27ZM4.71,8.57A3.86,3.86,0,1,1,8.57,4.71,3.86,3.86,0,0,1,4.71,8.57Z']};

    var signal = { name: 'signal', paths: ['M4.15,12a.47.47,0,0,1-.46-.46V6a.47.47,0,0,1,.93,0v5.54A.47.47,0,0,1,4.15,12Z','M7.85,12a.47.47,0,0,1-.47-.46V3.23a.47.47,0,0,1,.93,0v8.31A.47.47,0,0,1,7.85,12Z','M11.54,12a.46.46,0,0,1-.46-.46V.46A.46.46,0,0,1,11.54,0,.47.47,0,0,1,12,.46V11.54A.47.47,0,0,1,11.54,12Z','M.46,12A.47.47,0,0,1,0,11.54V8.77a.46.46,0,0,1,.46-.46.45.45,0,0,1,.46.46v2.77A.46.46,0,0,1,.46,12Z']};

    var snow = { name: 'snow', paths: ['M10.8,7l-1.21.69L6.71,6,9.59,4.34,10.8,5a.26.26,0,0,0,.17,0,.37.37,0,0,0,.31-.17.36.36,0,0,0-.13-.49l-.86-.49.78-.45a.35.35,0,1,0-.36-.61l-.77.45v-1a.36.36,0,0,0-.71,0v1.4L6.35,5.39V2.06l1.21-.7A.35.35,0,0,0,7.21.75l-.86.5V.35a.35.35,0,0,0-.7,0v.9L4.79.75a.35.35,0,0,0-.35.61l1.21.7V5.39L2.77,3.73V2.33a.36.36,0,0,0-.71,0v1l-.77-.45a.35.35,0,1,0-.36.61l.78.45-.86.49a.37.37,0,0,0-.13.49A.37.37,0,0,0,1,5.08.26.26,0,0,0,1.2,5l1.21-.69L5.29,6,2.41,7.66,1.2,7a.36.36,0,0,0-.48.12.37.37,0,0,0,.13.49l.86.49-.78.45A.36.36,0,0,0,.8,9a.38.38,0,0,0,.31.18.41.41,0,0,0,.18,0l.77-.45v1a.36.36,0,0,0,.71,0V8.27L5.65,6.61V9.94l-1.21.7a.35.35,0,0,0-.13.48.36.36,0,0,0,.48.13l.86-.5v.9a.35.35,0,0,0,.7,0v-.9l.86.5a.33.33,0,0,0,.17,0,.35.35,0,0,0,.18-.65l-1.21-.7V6.61L9.23,8.27v1.4a.36.36,0,0,0,.71,0v-1l.77.45a.41.41,0,0,0,.18,0A.38.38,0,0,0,11.2,9a.36.36,0,0,0-.13-.48l-.78-.45.86-.49A.35.35,0,1,0,10.8,7Z']};

    var snowAndRain = { name: 'snowAndRain', paths: ['M10.27,7H1.78A1.64,1.64,0,0,1,.19,6,1.6,1.6,0,0,1,.34,4.57a1.58,1.58,0,0,1,1.17-.76l.32-.05A.19.19,0,0,0,2,3.62l.11-.31A2.12,2.12,0,0,1,4.33,1.9l.38,0c.11,0,.18-.05.22-.12l.12-.26A2.64,2.64,0,0,1,7.31,0h.11A2.58,2.58,0,0,1,10,2.56,3.17,3.17,0,0,1,10,3l-.08.5a.22.22,0,0,0,.17.25l.46.08a1.66,1.66,0,0,1,1.35,1.3A1.62,1.62,0,0,1,10.27,7ZM4.1,2.5a1.48,1.48,0,0,0-1.4,1l-.11.31a.82.82,0,0,1-.68.56l-.32,0a1,1,0,0,0-.73.48,1,1,0,0,0-.09.85,1.05,1.05,0,0,0,1,.67h8.49a1,1,0,0,0,.78-.36,1,1,0,0,0,.21-.85,1,1,0,0,0-.85-.79L10,4.33a.82.82,0,0,1-.67-1l.08-.51c0-.12,0-.22,0-.31a2,2,0,0,0-2-1.95H7.34A2,2,0,0,0,5.61,1.82l-.12.26a.84.84,0,0,1-.76.48H4.64l-.38-.05Z','M3.51,10.15a.31.31,0,0,1-.31-.31V8.6a.31.31,0,0,1,.31-.31.31.31,0,0,1,.31.31V9.84A.31.31,0,0,1,3.51,10.15Z','M6,11.4a.31.31,0,0,1-.31-.32V9.84a.31.31,0,0,1,.62,0v1.24A.31.31,0,0,1,6,11.4Z','M8.49,8.91a.28.28,0,0,1-.22-.09.34.34,0,0,1-.1-.22.36.36,0,0,1,.09-.22.32.32,0,0,1,.44,0,.32.32,0,0,1,.1.23.31.31,0,0,1-.31.31Z','M9.24,10.59a.28.28,0,0,1-.22-.1.27.27,0,0,1-.09-.21A.31.31,0,0,1,9,10.06a.31.31,0,0,1,.44,0,.31.31,0,0,1,.09.22.33.33,0,0,1-.31.31Z','M7.86,10.15a.27.27,0,0,1-.21-.09.28.28,0,0,1-.1-.22.31.31,0,0,1,.09-.22.33.33,0,0,1,.44,0,.33.33,0,0,1,.09.22.35.35,0,0,1-.08.22A.33.33,0,0,1,7.86,10.15Z','M8.67,12a.33.33,0,0,1-.31-.31.28.28,0,0,1,.09-.22.31.31,0,0,1,.43,0,.29.29,0,0,1,.1.23.27.27,0,0,1-.09.21A.28.28,0,0,1,8.67,12Z']};

    var star = { name: 'star', paths: ['M11.66,5.77a1.22,1.22,0,0,0-.66-2L8.52,3.31a.42.42,0,0,1-.29-.21L7.07.88a1.21,1.21,0,0,0-2.14,0L3.77,3.1a.42.42,0,0,1-.29.21L1,3.73a1.22,1.22,0,0,0-.66,2L2.09,7.56a.44.44,0,0,1,.12.34l-.37,2.48a1.19,1.19,0,0,0,.28,1,1.23,1.23,0,0,0,1.45.3l2.25-1.11a.38.38,0,0,1,.36,0l2.25,1.11a1.25,1.25,0,0,0,.53.13,1.22,1.22,0,0,0,.92-.43,1.19,1.19,0,0,0,.28-1L9.79,7.9a.47.47,0,0,1,.11-.34ZM9,8l.36,2.48a.41.41,0,0,1-.09.32.43.43,0,0,1-.49.1L6.53,9.81A1.09,1.09,0,0,0,6,9.68a1.16,1.16,0,0,0-.54.13L3.22,10.92a.43.43,0,0,1-.49-.1.41.41,0,0,1-.09-.32L3,8a1.21,1.21,0,0,0-.33-1L.92,5.2a.37.37,0,0,1-.09-.4.36.36,0,0,1,.31-.27L3.61,4.1a1.21,1.21,0,0,0,.87-.62L5.64,1.25a.43.43,0,0,1,.72,0L7.52,3.48a1.21,1.21,0,0,0,.87.62l2.47.43a.36.36,0,0,1,.31.27.37.37,0,0,1-.09.4L9.33,7A1.21,1.21,0,0,0,9,8Z']};

    var sun = { name: 'sun', paths: ['M6,2.82A3.18,3.18,0,1,0,9.18,6,3.19,3.19,0,0,0,6,2.82ZM6,8.47A2.47,2.47,0,1,1,8.47,6,2.48,2.48,0,0,1,6,8.47Z','M6,1.41a.35.35,0,0,0,.35-.35V.35a.35.35,0,0,0-.7,0v.71A.35.35,0,0,0,6,1.41Z','M6,10.59a.35.35,0,0,0-.35.35v.71a.35.35,0,0,0,.7,0v-.71A.35.35,0,0,0,6,10.59Z','M11.65,5.65h-.71a.35.35,0,0,0,0,.7h.71a.35.35,0,0,0,0-.7Z','M1.06,5.65H.35a.35.35,0,1,0,0,.7h.71a.35.35,0,0,0,0-.7Z','M9.74,1.76l-.5.5a.37.37,0,0,0,0,.5.36.36,0,0,0,.5,0l.5-.5a.35.35,0,1,0-.5-.5Z','M2.26,9.24l-.5.5a.35.35,0,0,0,0,.5.34.34,0,0,0,.5,0l.5-.5a.35.35,0,0,0-.5-.5Z','M9.74,9.24a.35.35,0,0,0-.5.5l.5.5a.34.34,0,0,0,.5,0,.35.35,0,0,0,0-.5Z','M2.26,2.76a.39.39,0,0,0,.25.1.39.39,0,0,0,.25-.1.37.37,0,0,0,0-.5l-.5-.5a.35.35,0,1,0-.5.5Z']};

    var tag = { name: 'tag', paths: ['M11.22,0H7A.76.76,0,0,0,6.4.23L.23,6.4A.75.75,0,0,0,0,7a.79.79,0,0,0,.23.56l4.26,4.26a.79.79,0,0,0,.56.23.75.75,0,0,0,.55-.23L11.77,5.6A.76.76,0,0,0,12,5.05V.78A.78.78,0,0,0,11.22,0Zm0,5.1L5.1,11.27s0,0,0,0L.73,7a.08.08,0,0,1,0-.11L7,.71h4.27a.07.07,0,0,1,.07.07Z','M8.68,2.32a.7.7,0,0,0,0,1,.67.67,0,0,0,.5.21.69.69,0,0,0,.5-.21.72.72,0,0,0,0-1A.74.74,0,0,0,8.68,2.32Z']};

    var team = { name: 'team', paths: ['M10.9,4.89A1.78,1.78,0,0,0,11.17,4a1.6,1.6,0,0,0-1.5-1.67A1.59,1.59,0,0,0,8.17,4a1.77,1.77,0,0,0,.26.94,1.56,1.56,0,0,0-.69.46,2.72,2.72,0,0,0,0-.42A1.9,1.9,0,0,0,6,2.94a1.9,1.9,0,0,0-1.78,2,2.72,2.72,0,0,0,0,.42,1.56,1.56,0,0,0-.69-.46A1.77,1.77,0,0,0,3.83,4a1.59,1.59,0,0,0-1.5-1.67A1.6,1.6,0,0,0,.83,4a1.78,1.78,0,0,0,.27.94A1.61,1.61,0,0,0,0,6.41V7.54a.34.34,0,1,0,.67,0V6.41a1,1,0,0,1,1-1h.09a1.45,1.45,0,0,0,.62.15A1.46,1.46,0,0,0,3,5.46H3a1,1,0,0,1,1,1H4A1.92,1.92,0,0,0,3.19,8v1.4a.33.33,0,0,0,.33.33.33.33,0,0,0,.33-.33V8A1.27,1.27,0,0,1,5.12,6.72h.13a1.51,1.51,0,0,0,1.5,0h.13A1.27,1.27,0,0,1,8.15,8v1.4a.33.33,0,0,0,.33.33.33.33,0,0,0,.33-.33V8A1.92,1.92,0,0,0,8,6.42H8a1,1,0,0,1,1-1H9a1.38,1.38,0,0,0,1.25,0h.09a1,1,0,0,1,.95,1V7.54a.34.34,0,1,0,.67,0V6.41A1.61,1.61,0,0,0,10.9,4.89ZM1.5,4a.92.92,0,0,1,.83-1,.93.93,0,0,1,.84,1,.93.93,0,0,1-.84,1A.93.93,0,0,1,1.5,4Zm3.39,1A1.23,1.23,0,0,1,6,3.61,1.23,1.23,0,0,1,7.11,4.93,1.23,1.23,0,0,1,6,6.25,1.23,1.23,0,0,1,4.89,4.93ZM8.83,4a.93.93,0,0,1,.84-1,.92.92,0,0,1,.83,1,.93.93,0,0,1-.83,1A.93.93,0,0,1,8.83,4Z']};

    var telephone = { name: 'telephone', paths: ['M11.66,8.62l-1-1a1.34,1.34,0,0,0-1.86,0L8.33,8c-.11.12-.31.1-.49,0a22.72,22.72,0,0,1-2-1.85A22.91,22.91,0,0,1,4,4.15c-.1-.14-.17-.35,0-.48l.44-.45a1.3,1.3,0,0,0,0-1.86l-1-1a1.34,1.34,0,0,0-1.86,0c-1.65,1.65-2,3.5-1,5A24.49,24.49,0,0,0,3.37,8.63,24.94,24.94,0,0,0,6.7,11.47,3.09,3.09,0,0,0,8.48,12a4.62,4.62,0,0,0,3.18-1.56,1.3,1.3,0,0,0,0-1.86ZM11.16,10c-1.39,1.39-2.92,1.72-4,.92A24.42,24.42,0,0,1,3.87,8.13,25,25,0,0,1,1.11,4.88C.3,3.74.64,2.23,2,.84A.64.64,0,0,1,2.45.66a.64.64,0,0,1,.43.18l1,1a.64.64,0,0,1,.18.43.64.64,0,0,1-.18.43l-.45.44a1.08,1.08,0,0,0,0,1.42A23.42,23.42,0,0,0,5.33,6.67,23.42,23.42,0,0,0,7.42,8.58a1.09,1.09,0,0,0,1.41,0l.45-.44a.62.62,0,0,1,.86,0l1,1a.61.61,0,0,1,.17.43A.59.59,0,0,1,11.16,10Z']};

    var text = { name: 'text', paths: ['M9.18,0H2.82A1.76,1.76,0,0,0,1.06,1.76v8.48A1.76,1.76,0,0,0,2.82,12H9.18a1.76,1.76,0,0,0,1.76-1.76V1.76A1.76,1.76,0,0,0,9.18,0Zm1.06,10.24a1.06,1.06,0,0,1-1.06,1H2.82a1.06,1.06,0,0,1-1.06-1V1.76a1.06,1.06,0,0,1,1.06-1H9.18a1.06,1.06,0,0,1,1.06,1.05Z','M8.12,2.82H3.88a.36.36,0,0,0,0,.71H8.12a.36.36,0,0,0,0-.71Z','M8.12,5.65H3.88a.35.35,0,1,0,0,.7H8.12a.35.35,0,1,0,0-.7Z','M8.12,8.47H3.88a.36.36,0,0,0,0,.71H8.12a.36.36,0,0,0,0-.71Z']};

    var thunder = { name: 'thunder', paths: ['M11.86,5.1a1.67,1.67,0,0,0-1.35-1.29l-.46-.08a.22.22,0,0,1-.17-.25L10,3a3,3,0,0,0,0-.4A2.57,2.57,0,0,0,7.42,0H7.31A2.65,2.65,0,0,0,5.05,1.57l-.12.26A.22.22,0,0,1,4.72,2h0l-.37,0-.23,0a2.11,2.11,0,0,0-2,1.43L2,3.63a.24.24,0,0,1-.18.14l-.32,0a1.66,1.66,0,0,0-1.17.76A1.64,1.64,0,0,0,.2,6,1.68,1.68,0,0,0,1.79,7H6L4.83,8.46a.32.32,0,0,0-.07.25.34.34,0,0,0,.15.22l1.55.91L5.07,11.49a.31.31,0,0,0,0,.44.31.31,0,0,0,.2.07.32.32,0,0,0,.24-.11L7.17,10a.32.32,0,0,0,.07-.25.3.3,0,0,0-.15-.21L5.54,8.58,6.84,7h3.42a1.59,1.59,0,0,0,1.25-.59A1.64,1.64,0,0,0,11.86,5.1Zm-.82,1a1,1,0,0,1-.78.36H1.79a1,1,0,0,1-1-.67A1,1,0,0,1,.88,4.9a1,1,0,0,1,.72-.47l.32,0a.81.81,0,0,0,.68-.55l.11-.31a1.47,1.47,0,0,1,1.4-1h.16l.37,0h.1a.83.83,0,0,0,.75-.48l.12-.26A2.07,2.07,0,0,1,7.33.62h.09A2,2,0,0,1,9.37,2.57c0,.09,0,.19,0,.31l-.08.5a.84.84,0,0,0,.67,1l.45.08a1,1,0,0,1,.86.8A1,1,0,0,1,11,6.06Z']};

    var tie = { name: 'tie', paths: ['M8.2,2.18,8.58,1a.76.76,0,0,0-.11-.7A.77.77,0,0,0,7.83,0H4.17a.77.77,0,0,0-.64.33.76.76,0,0,0-.11.7L3.8,2.18A1.7,1.7,0,0,0,5,3.27L3.39,10.06a.38.38,0,0,0,.15.38l2.26,1.5a.36.36,0,0,0,.4,0l2.26-1.5a.37.37,0,0,0,.15-.38L7,3.27A1.7,1.7,0,0,0,8.2,2.18ZM6.32,3.35l.35,1.49L4.92,6.59l.76-3.24ZM4.47,2,4.09.81a.08.08,0,0,1,0-.07s0,0,.07,0H7.83s.06,0,.07,0a.08.08,0,0,1,0,.07L7.53,2a1,1,0,0,1-1,.69H5.43A1,1,0,0,1,4.47,2Zm.16,5.91,0,0L6.86,5.65l.36,1.56-2.9,2.9L4.13,10ZM6,11.22l-1.08-.71L7.41,8l.46,2Z']};

    var umbrella = { name: 'umbrella', paths: ['M6.35.81V.35a.35.35,0,0,0-.7,0V.81A5.76,5.76,0,0,0,0,6.35a.36.36,0,0,0,.35.36.36.36,0,0,0,.36-.36.76.76,0,0,1,.77-.77.77.77,0,0,1,.78.77.36.36,0,0,0,.35.36A.35.35,0,0,0,3,6.35a.78.78,0,0,1,1.56,0,.36.36,0,0,0,.35.36.35.35,0,0,0,.35-.36.79.79,0,0,1,.45-.7.59.59,0,0,0,0,.14v5a.5.5,0,0,1-1,0v-.62a.36.36,0,0,0-.71,0v.62a1.2,1.2,0,0,0,2.4,0v-5a.59.59,0,0,0,0-.14.79.79,0,0,1,.45.7.35.35,0,0,0,.35.36.36.36,0,0,0,.35-.36A.78.78,0,0,1,9,6.35a.35.35,0,0,0,.35.36.36.36,0,0,0,.35-.36.77.77,0,0,1,.78-.77.76.76,0,0,1,.77.77.36.36,0,1,0,.71,0A5.76,5.76,0,0,0,6.35.81Zm4.17,4.06a1.48,1.48,0,0,0-1.13.52,1.49,1.49,0,0,0-2.26,0,1.49,1.49,0,0,0-2.26,0,1.49,1.49,0,0,0-2.26,0,1.48,1.48,0,0,0-1.13-.52A1.56,1.56,0,0,0,1,5,5.24,5.24,0,0,1,6,1.5,5.24,5.24,0,0,1,11.05,5,1.56,1.56,0,0,0,10.52,4.87Z']};

    var unlocked = { name: 'unlocked', paths: ['M10.1,5.07H3.58V3.12a2.42,2.42,0,1,1,4.84,0,.35.35,0,0,0,.7,0,3.12,3.12,0,1,0-6.24,0v2h-1A1.11,1.11,0,0,0,.8,6.17V10.9A1.1,1.1,0,0,0,1.9,12h8.2a1.1,1.1,0,0,0,1.1-1.1V6.17A1.11,1.11,0,0,0,10.1,5.07Zm.4,5.83a.4.4,0,0,1-.4.41H1.9a.4.4,0,0,1-.4-.41V6.17a.4.4,0,0,1,.4-.4h8.2a.4.4,0,0,1,.4.4Z','M6.35,8.75v-1a.35.35,0,1,0-.7,0v1a.71.71,0,0,0-.14.1.69.69,0,1,0,1,1,.69.69,0,0,0,0-1A.71.71,0,0,0,6.35,8.75Z']};

    var upload = { name: 'upload', paths: ['M3.88,3.08,5.6,1.37V7.2a.4.4,0,1,0,.8,0V1.37L8.12,3.08a.39.39,0,0,0,.56,0,.39.39,0,0,0,0-.56L6.28.12a.39.39,0,0,0-.56,0l-2.4,2.4a.4.4,0,0,0,.56.56Z','M11.6,8a.4.4,0,0,0-.4.4V10A1.2,1.2,0,0,1,10,11.2H2A1.2,1.2,0,0,1,.8,10V8.4a.4.4,0,1,0-.8,0V10a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V8.4A.4.4,0,0,0,11.6,8Z']};

    var user = { name: 'user', paths: ['M8.19,5.78A3.64,3.64,0,0,0,9,3.42,3.25,3.25,0,0,0,6,0,3.25,3.25,0,0,0,3,3.42a3.64,3.64,0,0,0,.85,2.36A3.32,3.32,0,0,0,1.06,9.05v2.57a.38.38,0,0,0,.76,0V9.05A2.57,2.57,0,0,1,4.38,6.48h.29a2.64,2.64,0,0,0,2.66,0h.29a2.57,2.57,0,0,1,2.56,2.57v2.57a.38.38,0,1,0,.76,0V9.05A3.32,3.32,0,0,0,8.19,5.78ZM3.72,3.42A2.49,2.49,0,0,1,6,.76,2.49,2.49,0,0,1,8.28,3.42,2.49,2.49,0,0,1,6,6.08,2.49,2.49,0,0,1,3.72,3.42Z']};

    var van = { name: 'van', paths: ['M10.42,1.89h-5A1.6,1.6,0,0,0,3.82,3.16h-1a2.19,2.19,0,0,0-2,1.39L.06,6.43A.72.72,0,0,0,0,6.72V7.89a.94.94,0,0,0,.66.89,1.58,1.58,0,0,0,1.55,1.33A1.6,1.6,0,0,0,3.76,8.84H7.61a1.6,1.6,0,0,0,1.55,1.27A1.58,1.58,0,0,0,10.7,8.84h.35a.94.94,0,0,0,.95-1V3.47A1.58,1.58,0,0,0,10.42,1.89ZM2.21,9.47a.95.95,0,1,1,1-.94A.95.95,0,0,1,2.21,9.47ZM2.21,7A1.56,1.56,0,0,0,.71,8.07a.3.3,0,0,1-.08-.18V6.67L1.4,4.78a1.56,1.56,0,0,1,1.46-1h.93V8.21h0A1.59,1.59,0,0,0,2.21,7Zm7,2.52a.95.95,0,1,1,.95-.94A.95.95,0,0,1,9.16,9.47Zm2.21-1.58a.32.32,0,0,1-.32.32H10.7A1.57,1.57,0,0,0,9.16,7,1.59,1.59,0,0,0,7.61,8.21H4.42V3.47a1,1,0,0,1,1-.94h5.05a1,1,0,0,1,.95.94Z']};

    var vip = { name: 'vip', paths: ['M8.14,5.63A3.56,3.56,0,0,0,9,3.32,3.17,3.17,0,0,0,6,0,3.17,3.17,0,0,0,3,3.32a3.56,3.56,0,0,0,.83,2.31A3.24,3.24,0,0,0,1.18,8.82v2.51a.36.36,0,0,0,.37.37.37.37,0,0,0,.37-.37V8.82a2.5,2.5,0,0,1,2.5-2.5h.27a.53.53,0,0,0-.07.49l.17.52a1,1,0,0,0,.5.56l-.69,3a.35.35,0,0,0,.15.39l1,.7a.4.4,0,0,0,.42,0l1-.7a.35.35,0,0,0,.15-.39l-.69-3a1,1,0,0,0,.5-.56l.17-.52a.53.53,0,0,0-.07-.49h.27a2.5,2.5,0,0,1,2.5,2.5v2.51a.37.37,0,0,0,.37.37.36.36,0,0,0,.37-.37V8.82A3.24,3.24,0,0,0,8.14,5.63ZM6.5,7.1a.25.25,0,0,1-.24.17H5.74A.25.25,0,0,1,5.5,7.1l-.1-.3H6.6ZM6,.72a2.44,2.44,0,0,1,2.23,2.6A2.43,2.43,0,0,1,6,5.92a2.43,2.43,0,0,1-2.23-2.6A2.44,2.44,0,0,1,6,.72ZM6,11.2l-.62-.41L6,8.11l.62,2.68Z']};

    var volume = { name: 'volume', paths: ['M9.87,4.67H9.46V1.22A1.22,1.22,0,0,0,8.24,0a1.19,1.19,0,0,0-.76.28L3.61,3.43H1.32a.41.41,0,0,0-.41.41V8.16a.41.41,0,0,0,.41.41H3.61l3.87,3.15a1.19,1.19,0,0,0,.76.28,1.22,1.22,0,0,0,1.22-1.22V7.33h.41a1.22,1.22,0,0,0,1.22-1.21V5.88A1.22,1.22,0,0,0,9.87,4.67ZM1.73,4.24H3.35V7.76H1.73Zm6.92,6.54A.41.41,0,0,1,8,11.1L4.16,8V4L8,.9a.41.41,0,0,1,.66.32Zm1.62-4.66a.4.4,0,0,1-.4.4H9.46v-1h.41a.4.4,0,0,1,.4.4Z']};

    var wallet = { name: 'wallet', paths: ['M11.46,4.41V2.9A1.79,1.79,0,0,0,9.67,1.11H1.79A1.79,1.79,0,0,0,0,2.9V9.1a1.79,1.79,0,0,0,1.79,1.79H9.67A1.79,1.79,0,0,0,11.46,9.1V7.59a1.23,1.23,0,0,0,.54-1V5.42A1.23,1.23,0,0,0,11.46,4.41Zm-.18,2.17a.49.49,0,0,1-.49.49H7.13a.49.49,0,0,1-.49-.49V5.42a.49.49,0,0,1,.49-.49h3.66a.49.49,0,0,1,.49.49Zm-1.61,3.6H1.79A1.07,1.07,0,0,1,.72,9.1V2.9A1.07,1.07,0,0,1,1.79,1.82H9.67A1.07,1.07,0,0,1,10.74,2.9V4.21H7.13A1.21,1.21,0,0,0,5.92,5.42V6.58A1.21,1.21,0,0,0,7.13,7.79h3.61V9.1A1.07,1.07,0,0,1,9.67,10.18Z','M7.26,5.75a.34.34,0,0,0,0,.5.33.33,0,0,0,.25.11.36.36,0,0,0,.25-.11A.37.37,0,0,0,7.86,6a.33.33,0,0,0-.1-.25A.35.35,0,0,0,7.26,5.75Z']};

    var wifi = { name: 'wifi', paths: ['M11.65,4.7a.36.36,0,0,1-.25-.11,7.65,7.65,0,0,0-10.8,0,.35.35,0,0,1-.5,0,.36.36,0,0,1,0-.49,8.33,8.33,0,0,1,11.8,0,.36.36,0,0,1-.25.6Z','M9.76,6.58a.31.31,0,0,1-.24-.1,5,5,0,0,0-7,0,.36.36,0,0,1-.49,0A.35.35,0,0,1,2,6a5.66,5.66,0,0,1,8,0,.35.35,0,0,1,0,.5A.32.32,0,0,1,9.76,6.58Z','M7.88,8.46a.35.35,0,0,1-.25-.1,2.31,2.31,0,0,0-3.26,0,.35.35,0,0,1-.5-.5,3,3,0,0,1,4.26,0,.35.35,0,0,1-.25.6Z','M6,10.35a.41.41,0,0,1-.25-.11.32.32,0,0,1-.1-.25.31.31,0,0,1,.1-.24.36.36,0,0,1,.5,0,.35.35,0,0,1,.1.25.32.32,0,0,1-.1.25A.41.41,0,0,1,6,10.35Z']};

    var wine = { name: 'wine', paths: ['M8.47,6.72a3.36,3.36,0,0,0,.85-2.57L8.94.32A.36.36,0,0,0,8.59,0H3.41a.36.36,0,0,0-.35.32L2.68,4.15a3.31,3.31,0,0,0,3,3.63v3.51H4.12a.36.36,0,0,0,0,.71H7.88a.36.36,0,0,0,0-.71H6.35V7.78A3.33,3.33,0,0,0,8.47,6.72Zm-.2-6,.3,3.11H3.43L3.73.71ZM3.39,4.52H8.61A2.62,2.62,0,0,1,4.05,6.25,2.65,2.65,0,0,1,3.39,4.52Z']};

    var wrench = { name: 'wrench', paths: ['M2.43,12a2.46,2.46,0,0,1-2-1.09A2.5,2.5,0,0,1,.77,7.77L4.55,4A3.67,3.67,0,0,1,5.63,1.09,3.75,3.75,0,0,1,9.32.15a.62.62,0,0,1,.43.44.59.59,0,0,1-.16.59L8.21,2.55l.26,1,1,.26L10.82,2.4a.63.63,0,0,1,1,.27,3.71,3.71,0,0,1-.94,3.69,3.68,3.68,0,0,1-2.63,1.1H8L4.15,11.29A2.41,2.41,0,0,1,2.43,12ZM5.08,4.46,1.27,8.27A1.81,1.81,0,0,0,1,10.52a1.75,1.75,0,0,0,2.67.27L7.53,6.91l.06-.07a.36.36,0,0,1,.31-.11A3,3,0,0,0,11.2,3L9.9,4.32a.63.63,0,0,1-.43.17l-.16,0L8.24,4.19a.65.65,0,0,1-.44-.44L7.52,2.68a.59.59,0,0,1,.16-.59L9,.79a3,3,0,0,0-3.72,3.3.33.33,0,0,1-.11.31Z']};

    var yuan = { name: 'yuan', paths: ['M7.9,5.12a.36.36,0,0,0,0-.71H6.84l.72-.72a.35.35,0,0,0-.5-.5L6,4.27,4.94,3.21a.35.35,0,0,0-.5.5l.71.7H4.1a.36.36,0,0,0,0,.71H5.65V6.31H4.1A.36.36,0,0,0,4.1,7H5.65V8.56a.35.35,0,0,0,.7,0V7H7.9a.36.36,0,0,0,0-.71H6.35V5.12Z','M6,0a6,6,0,1,0,6,6A6,6,0,0,0,6,0ZM6,11.29A5.29,5.29,0,1,1,11.29,6,5.29,5.29,0,0,1,6,11.29Z']};

    var zoomIn = { name: 'zoomIn', paths: ['M11.87,11.27,8.32,7.71a4.65,4.65,0,0,0,1.11-3A4.72,4.72,0,1,0,4.71,9.43a4.65,4.65,0,0,0,3-1.11l3.56,3.55a.41.41,0,0,0,.6,0A.42.42,0,0,0,11.87,11.27ZM4.71,8.57A3.86,3.86,0,1,1,8.57,4.71,3.86,3.86,0,0,1,4.71,8.57Z','M6,4.29H5.14V3.43a.43.43,0,1,0-.85,0v.86H3.43a.43.43,0,1,0,0,.85h.86V6a.43.43,0,1,0,.85,0V5.14H6a.43.43,0,1,0,0-.85Z']};

    var zoomOut = { name: 'zoomOut', paths: ['M11.87,11.27,8.33,7.73a4.66,4.66,0,0,0,1.1-3A4.72,4.72,0,1,0,4.71,9.43a4.66,4.66,0,0,0,3-1.1l3.54,3.54a.41.41,0,0,0,.6,0A.42.42,0,0,0,11.87,11.27ZM4.71,8.57A3.86,3.86,0,1,1,8.57,4.71,3.86,3.86,0,0,1,4.71,8.57Z','M6,4.29H3.43a.43.43,0,1,0,0,.85H6a.43.43,0,1,0,0-.85Z']};

    const icons$1 = {addToCollection,alarm,alert,antiClockwise,application,arrowDown,arrowLeft,arrowRight,arrowUp,assistant,basketball,batteryEmpty,batteryFull,beer,bell,bookmark,briefcase,bulb,calendar,camera,card,cart,cd,chart,chat,choose,circleArrowDown,circleArrowLeft,circleArrowRight,circleArrowUp,circleChoose,circleClose,circleMinus,circlePlus,clip,clock,clockwise,clothes,cloud,cloud2,cloudDownload,cloudUpload,cocktail,coffee,cog,collection,compass,contacts,coordinates,coupon,crown,desktop,diamond,dollar,download,earphone,earth,edit,empty,enter,euro,eye,file: file$9,fileChoose,fileEmpty,fileMinus,filePlus,fileText,filter,flag,focus,form,headphone,heart,help,hint,home,hourglass,hyperlink,idCard,juice,key,leaves,lifeBuoy,list: list$1,listChoose,listItem,locked,login,logout,mail,medal,medal2,megaphone,message,microphone,minus,money,moon,mouse,music,mute,navigation,no,pad,phone,picture,pieChart,pin,plane,planet,plus,pound,power,rain,refresh,rocket,ruler,scissors,search,signal,snow,snowAndRain,star,sun,tag,team,telephone,text,thunder,tie,umbrella,unlocked,upload,user,van,vip,volume,wallet,wifi,wine,wrench,yuan,zoomIn,zoomOut};

    /* node_modules/@specialdoom/proi-ui/icons/src/components/Icon.svelte generated by Svelte v3.49.0 */
    const file$8 = "node_modules/@specialdoom/proi-ui/icons/src/components/Icon.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (8:0) {#if icons[type]}
    function create_if_block$3(ctx) {
    	let svg;
    	let title;
    	let t0_value = icons$1[/*type*/ ctx[0]].name + "";
    	let t0;
    	let t1;
    	let g;
    	let svg_data_name_value;
    	let each_value = icons$1[/*type*/ ctx[0]].paths;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			title = svg_element("title");
    			t0 = text$1(t0_value);
    			t1 = text$1("-icon");
    			g = svg_element("g");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(title, file$8, 9, 8, 287);
    			attr_dev(g, "data-name", "content");
    			add_location(g, file$8, 10, 8, 335);
    			attr_dev(svg, "data-name", svg_data_name_value = icons$1[/*type*/ ctx[0]].name);
    			attr_dev(svg, "viewBox", "0 0 12 12");
    			set_style(svg, "width", /*scale*/ ctx[2] + "px");
    			set_style(svg, "height", /*scale*/ ctx[2] + "px");
    			add_location(svg, file$8, 8, 4, 176);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, title);
    			append_dev(title, t0);
    			append_dev(title, t1);
    			append_dev(svg, g);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(g, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*type*/ 1 && t0_value !== (t0_value = icons$1[/*type*/ ctx[0]].name + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*icons, type, color*/ 3) {
    				each_value = icons$1[/*type*/ ctx[0]].paths;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(g, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*type*/ 1 && svg_data_name_value !== (svg_data_name_value = icons$1[/*type*/ ctx[0]].name)) {
    				attr_dev(svg, "data-name", svg_data_name_value);
    			}

    			if (dirty & /*scale*/ 4) {
    				set_style(svg, "width", /*scale*/ ctx[2] + "px");
    			}

    			if (dirty & /*scale*/ 4) {
    				set_style(svg, "height", /*scale*/ ctx[2] + "px");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(8:0) {#if icons[type]}",
    		ctx
    	});

    	return block;
    }

    // (12:12) {#each icons[type].paths as path}
    function create_each_block$1(ctx) {
    	let path;
    	let path_d_value;

    	const block = {
    		c: function create() {
    			path = svg_element("path");
    			attr_dev(path, "d", path_d_value = /*path*/ ctx[3]);
    			set_style(path, "fill", /*color*/ ctx[1]);
    			add_location(path, file$8, 12, 16, 423);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, path, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*type*/ 1 && path_d_value !== (path_d_value = /*path*/ ctx[3])) {
    				attr_dev(path, "d", path_d_value);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(path, "fill", /*color*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(path);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(12:12) {#each icons[type].paths as path}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let if_block_anchor;
    	let if_block = icons$1[/*type*/ ctx[0]] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (icons$1[/*type*/ ctx[0]]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Icon', slots, []);
    	let { type = 'proiUi' } = $$props;
    	let { color = '#000' } = $$props;
    	let { scale = 20 } = $$props;
    	const writable_props = ['type', 'color', 'scale'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Icon> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('scale' in $$props) $$invalidate(2, scale = $$props.scale);
    	};

    	$$self.$capture_state = () => ({ icons: icons$1, type, color, scale });

    	$$self.$inject_state = $$props => {
    		if ('type' in $$props) $$invalidate(0, type = $$props.type);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    		if ('scale' in $$props) $$invalidate(2, scale = $$props.scale);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [type, color, scale];
    }

    class Icon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$8, create_fragment$8, safe_not_equal, { type: 0, color: 1, scale: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Icon",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get type() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scale() {
    		throw new Error("<Icon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scale(value) {
    		throw new Error("<Icon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const icons = [
      {
        type: 'error',
        iconType: 'no',
        color: '#ee3d48'
      },
      {
        type: 'warning',
        iconType: 'alert',
        color: '#fdb300'
      },
      {
        type: 'success',
        iconType: 'circleChoose',
        color: '#007f50'
      },
      {
        type: 'info',
        iconType: 'hint',
        color: '#257dff'
      }
    ];

    /* node_modules/@specialdoom/proi-ui/src/components/alert/Alert.svelte generated by Svelte v3.49.0 */
    const file$7 = "node_modules/@specialdoom/proi-ui/src/components/alert/Alert.svelte";

    // (22:0) {#if !closed}
    function create_if_block$2(ctx) {
    	let div2;
    	let div0;
    	let icon_1;
    	let t0;
    	let div1;
    	let t1;
    	let div2_class_value;
    	let current;

    	icon_1 = new Icon({
    			props: {
    				type: /*icon*/ ctx[3].iconType,
    				color: /*icon*/ ctx[3].color,
    				scale: "15"
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[9].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[8], null);
    	const default_slot_or_fallback = default_slot || fallback_block(ctx);
    	let if_block = /*closable*/ ctx[1] && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			create_component(icon_1.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			t1 = space();
    			if (if_block) if_block.c();
    			attr_dev(div0, "class", "sd-alert-icon svelte-18w9ril");
    			add_location(div0, file$7, 23, 4, 561);
    			attr_dev(div1, "class", "sd-alert-text svelte-18w9ril");
    			add_location(div1, file$7, 26, 4, 673);
    			attr_dev(div2, "class", div2_class_value = "sd-alert " + /*outlinedClass*/ ctx[4] + " " + /*className*/ ctx[0] + " svelte-18w9ril");
    			add_location(div2, file$7, 22, 2, 505);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(icon_1, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(div1, null);
    			}

    			append_dev(div2, t1);
    			if (if_block) if_block.m(div2, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const icon_1_changes = {};
    			if (dirty & /*icon*/ 8) icon_1_changes.type = /*icon*/ ctx[3].iconType;
    			if (dirty & /*icon*/ 8) icon_1_changes.color = /*icon*/ ctx[3].color;
    			icon_1.$set(icon_1_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[8],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[8], dirty, null),
    						null
    					);
    				}
    			}

    			if (/*closable*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*closable*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div2, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*className*/ 1 && div2_class_value !== (div2_class_value = "sd-alert " + /*outlinedClass*/ ctx[4] + " " + /*className*/ ctx[0] + " svelte-18w9ril")) {
    				attr_dev(div2, "class", div2_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			transition_in(default_slot_or_fallback, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			transition_out(default_slot_or_fallback, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(icon_1);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(22:0) {#if !closed}",
    		ctx
    	});

    	return block;
    }

    // (28:12) Default text
    function fallback_block(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1("Default text");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(28:12) Default text",
    		ctx
    	});

    	return block;
    }

    // (31:4) {#if closable}
    function create_if_block_1$1(ctx) {
    	let div;
    	let icon_1;
    	let current;
    	let mounted;
    	let dispose;

    	icon_1 = new Icon({
    			props: { type: "circleClose", scale: "15" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(icon_1.$$.fragment);
    			attr_dev(div, "class", "sd-alert-close-icon svelte-18w9ril");
    			add_location(div, file$7, 31, 6, 775);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(icon_1, div, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div, "click", /*close*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(icon_1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(icon_1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(icon_1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(31:4) {#if closable}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = !/*closed*/ ctx[2] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!/*closed*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*closed*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let icon;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Alert', slots, ['default']);
    	let { className = null } = $$props;
    	let { type = 'success' } = $$props;
    	let { closable = false } = $$props;
    	let { outlined = false } = $$props;
    	let closed = false;

    	const outlinedClass = outlined
    	? `sd-alert-outlined sd-alert-outlined-${type}`
    	: `sd-alert-${type}`;

    	const close = () => {
    		$$invalidate(2, closed = true);
    	};

    	const writable_props = ['className', 'type', 'closable', 'outlined'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Alert> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('type' in $$props) $$invalidate(6, type = $$props.type);
    		if ('closable' in $$props) $$invalidate(1, closable = $$props.closable);
    		if ('outlined' in $$props) $$invalidate(7, outlined = $$props.outlined);
    		if ('$$scope' in $$props) $$invalidate(8, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Icon,
    		icons,
    		className,
    		type,
    		closable,
    		outlined,
    		closed,
    		outlinedClass,
    		close,
    		icon
    	});

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('type' in $$props) $$invalidate(6, type = $$props.type);
    		if ('closable' in $$props) $$invalidate(1, closable = $$props.closable);
    		if ('outlined' in $$props) $$invalidate(7, outlined = $$props.outlined);
    		if ('closed' in $$props) $$invalidate(2, closed = $$props.closed);
    		if ('icon' in $$props) $$invalidate(3, icon = $$props.icon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*type*/ 64) {
    			$$invalidate(3, icon = icons.filter(item => item.type == type)[0]);
    		}
    	};

    	return [
    		className,
    		closable,
    		closed,
    		icon,
    		outlinedClass,
    		close,
    		type,
    		outlined,
    		$$scope,
    		slots
    	];
    }

    class Alert extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init$1(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			className: 0,
    			type: 6,
    			closable: 1,
    			outlined: 7
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Alert",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get className() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closable() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closable(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outlined() {
    		throw new Error("<Alert>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outlined(value) {
    		throw new Error("<Alert>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/backdrop/Backdrop.svelte generated by Svelte v3.49.0 */

    const file$6 = "node_modules/@specialdoom/proi-ui/src/components/backdrop/Backdrop.svelte";

    function create_fragment$6(ctx) {
    	let div1;
    	let div0;
    	let div1_class_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			add_location(div0, file$6, 11, 2, 227);
    			attr_dev(div1, "class", div1_class_value = "sd-backdrop " + /*className*/ ctx[0] + " svelte-1huq6sf");
    			toggle_class(div1, "sd-backdrop-visible", /*visible*/ ctx[1]);
    			toggle_class(div1, "sd-backdrop-not-visible", !/*visible*/ ctx[1]);
    			add_location(div1, file$6, 5, 0, 86);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div1, "click", /*click_handler*/ ctx[4], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 1 && div1_class_value !== (div1_class_value = "sd-backdrop " + /*className*/ ctx[0] + " svelte-1huq6sf")) {
    				attr_dev(div1, "class", div1_class_value);
    			}

    			if (dirty & /*className, visible*/ 3) {
    				toggle_class(div1, "sd-backdrop-visible", /*visible*/ ctx[1]);
    			}

    			if (dirty & /*className, visible*/ 3) {
    				toggle_class(div1, "sd-backdrop-not-visible", !/*visible*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Backdrop', slots, ['default']);
    	let { className = null } = $$props;
    	let { visible = false } = $$props;
    	const writable_props = ['className', 'visible'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Backdrop> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ className, visible });

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [className, visible, $$scope, slots, click_handler];
    }

    class Backdrop extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$6, create_fragment$6, safe_not_equal, { className: 0, visible: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Backdrop",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get className() {
    		throw new Error("<Backdrop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<Backdrop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get visible() {
    		throw new Error("<Backdrop>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set visible(value) {
    		throw new Error("<Backdrop>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/modal/ModalTitle.svelte generated by Svelte v3.49.0 */
    const file$5 = "node_modules/@specialdoom/proi-ui/src/components/modal/ModalTitle.svelte";

    function create_fragment$5(ctx) {
    	let div1;
    	let div0;
    	let div0_class_value;
    	let t;
    	let span;
    	let icon;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

    	icon = new Icon({
    			props: { type: "circleClose" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			t = space();
    			span = element("span");
    			create_component(icon.$$.fragment);
    			attr_dev(div0, "class", div0_class_value = "sd-title " + /*className*/ ctx[1] + " svelte-460hkm");
    			add_location(div0, file$5, 8, 2, 156);
    			attr_dev(span, "class", "sd-modal-close svelte-460hkm");
    			add_location(span, file$5, 11, 2, 218);
    			attr_dev(div1, "class", "sd-modal-title svelte-460hkm");
    			add_location(div1, file$5, 7, 0, 124);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			append_dev(div1, t);
    			append_dev(div1, span);
    			mount_component(icon, span, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					span,
    					"click",
    					function () {
    						if (is_function(/*close*/ ctx[0])) /*close*/ ctx[0].apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[2],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[2], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 2 && div0_class_value !== (div0_class_value = "sd-title " + /*className*/ ctx[1] + " svelte-460hkm")) {
    				attr_dev(div0, "class", div0_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			transition_in(icon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			transition_out(icon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (default_slot) default_slot.d(detaching);
    			destroy_component(icon);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalTitle', slots, ['default']);
    	let { close } = $$props;
    	let { className = null } = $$props;
    	const writable_props = ['close', 'className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalTitle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('close' in $$props) $$invalidate(0, close = $$props.close);
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(2, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ Icon, close, className });

    	$$self.$inject_state = $$props => {
    		if ('close' in $$props) $$invalidate(0, close = $$props.close);
    		if ('className' in $$props) $$invalidate(1, className = $$props.className);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [close, className, $$scope, slots];
    }

    class ModalTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$5, create_fragment$5, safe_not_equal, { close: 0, className: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalTitle",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*close*/ ctx[0] === undefined && !('close' in props)) {
    			console.warn("<ModalTitle> was created without expected prop 'close'");
    		}
    	}

    	get close() {
    		throw new Error("<ModalTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set close(value) {
    		throw new Error("<ModalTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get className() {
    		throw new Error("<ModalTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<ModalTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/modal/Modal.svelte generated by Svelte v3.49.0 */
    const file$4 = "node_modules/@specialdoom/proi-ui/src/components/modal/Modal.svelte";

    // (20:6) <ModalTitle {close}>
    function create_default_slot_1$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(/*title*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 2) set_data_dev(t, /*title*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(20:6) <ModalTitle {close}>",
    		ctx
    	});

    	return block;
    }

    // (13:0) <Backdrop {visible}>
    function create_default_slot$1(ctx) {
    	let div1;
    	let div0;
    	let modaltitle;
    	let t;
    	let current;

    	modaltitle = new ModalTitle({
    			props: {
    				close: /*close*/ ctx[2],
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[3].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			create_component(modaltitle.$$.fragment);
    			t = space();
    			if (default_slot) default_slot.c();
    			attr_dev(div0, "class", "sd-modal-dialog svelte-cbcu8u");
    			add_location(div0, file$4, 18, 4, 373);
    			attr_dev(div1, "class", "sd-modal svelte-cbcu8u");
    			toggle_class(div1, "sd-modal-show", /*visible*/ ctx[0]);
    			toggle_class(div1, "sd-modal-not-show", !/*visible*/ ctx[0]);
    			add_location(div1, file$4, 13, 2, 261);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			mount_component(modaltitle, div0, null);
    			append_dev(div0, t);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modaltitle_changes = {};

    			if (dirty & /*$$scope, title*/ 18) {
    				modaltitle_changes.$$scope = { dirty, ctx };
    			}

    			modaltitle.$set(modaltitle_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			if (dirty & /*visible*/ 1) {
    				toggle_class(div1, "sd-modal-show", /*visible*/ ctx[0]);
    			}

    			if (dirty & /*visible*/ 1) {
    				toggle_class(div1, "sd-modal-not-show", !/*visible*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modaltitle.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modaltitle.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(modaltitle);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(13:0) <Backdrop {visible}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let backdrop;
    	let current;

    	backdrop = new Backdrop({
    			props: {
    				visible: /*visible*/ ctx[0],
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(backdrop.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(backdrop, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const backdrop_changes = {};
    			if (dirty & /*visible*/ 1) backdrop_changes.visible = /*visible*/ ctx[0];

    			if (dirty & /*$$scope, visible, title*/ 19) {
    				backdrop_changes.$$scope = { dirty, ctx };
    			}

    			backdrop.$set(backdrop_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(backdrop.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(backdrop.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(backdrop, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Modal', slots, ['default']);
    	let { title = '' } = $$props;
    	let { visible = false } = $$props;

    	function close() {
    		$$invalidate(0, visible = false);
    	}

    	const writable_props = ['title', 'visible'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Modal> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
    		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		Backdrop,
    		ModalTitle,
    		title,
    		visible,
    		close
    	});

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('visible' in $$props) $$invalidate(0, visible = $$props.visible);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [visible, title, close, slots, $$scope];
    }

    class Modal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$4, create_fragment$4, safe_not_equal, { title: 1, visible: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Modal",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get title() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get visible() {
    		throw new Error("<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set visible(value) {
    		throw new Error("<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/modal/ModalBody.svelte generated by Svelte v3.49.0 */

    const file$3 = "node_modules/@specialdoom/proi-ui/src/components/modal/ModalBody.svelte";

    function create_fragment$3(ctx) {
    	let div;
    	let div_class_value;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[2].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			attr_dev(div, "class", div_class_value = "sd-modal-body " + /*className*/ ctx[0] + " svelte-1nkzt0l");
    			add_location(div, file$3, 4, 0, 55);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[1],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*className*/ 1 && div_class_value !== (div_class_value = "sd-modal-body " + /*className*/ ctx[0] + " svelte-1nkzt0l")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalBody', slots, ['default']);
    	let { className = null } = $$props;
    	const writable_props = ['className'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalBody> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({ className });

    	$$self.$inject_state = $$props => {
    		if ('className' in $$props) $$invalidate(0, className = $$props.className);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [className, $$scope, slots];
    }

    class ModalBody extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, { className: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalBody",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get className() {
    		throw new Error("<ModalBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set className(value) {
    		throw new Error("<ModalBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/spinner/Logo.svelte generated by Svelte v3.49.0 */

    const file$2 = "node_modules/@specialdoom/proi-ui/src/components/spinner/Logo.svelte";

    function create_fragment$2(ctx) {
    	let svg;
    	let style;
    	let t;
    	let g0;
    	let path0;
    	let path1;
    	let animateTransform0;
    	let g1;
    	let path2;
    	let path3;
    	let animateTransform1;
    	let g2;
    	let path4;
    	let path5;
    	let animateTransform2;
    	let svg_class_value;

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			style = svg_element("style");
    			t = text$1(".st0 {\r\n      fill: none;\r\n      stroke: #2398ab;\r\n      stroke-width: 3;\r\n      stroke-linecap: round;\r\n      stroke-miterlimit: 10;\r\n    }\r\n  \r\n");
    			g0 = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			animateTransform0 = svg_element("animateTransform");
    			g1 = svg_element("g");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			animateTransform1 = svg_element("animateTransform");
    			g2 = svg_element("g");
    			path4 = svg_element("path");
    			path5 = svg_element("path");
    			animateTransform2 = svg_element("animateTransform");
    			attr_dev(style, "type", "text/css");
    			add_location(style, file$2, 16, 2, 350);
    			attr_dev(path0, "class", "st0");
    			attr_dev(path0, "d", "M50,95");
    			add_location(path0, file$2, 27, 4, 546);
    			attr_dev(animateTransform0, "accumulate", "none");
    			attr_dev(animateTransform0, "additive", "replace");
    			attr_dev(animateTransform0, "attributeName", "transform");
    			attr_dev(animateTransform0, "attributeType", "XML");
    			attr_dev(animateTransform0, "calcMode", "linear");
    			attr_dev(animateTransform0, "dur", "3s");
    			attr_dev(animateTransform0, "fill", "remove");
    			attr_dev(animateTransform0, "from", "0 50 50");
    			attr_dev(animateTransform0, "repeatCount", "indefinite");
    			attr_dev(animateTransform0, "restart", "always");
    			attr_dev(animateTransform0, "to", "360 50 50");
    			attr_dev(animateTransform0, "type", "rotate");
    			add_location(animateTransform0, file$2, 29, 6, 667);
    			attr_dev(path1, "class", "st0");
    			attr_dev(path1, "d", "M50,95C25.1,95,5,74.9,5,50S25.1,5,50,5s45,20.1,45,45\t");
    			add_location(path1, file$2, 28, 4, 583);
    			add_location(g0, file$2, 26, 2, 537);
    			attr_dev(path2, "class", "st0");
    			attr_dev(path2, "d", "M50,21");
    			add_location(path2, file$2, 46, 4, 1046);
    			attr_dev(animateTransform1, "accumulate", "none");
    			attr_dev(animateTransform1, "additive", "replace");
    			attr_dev(animateTransform1, "attributeName", "transform");
    			attr_dev(animateTransform1, "attributeType", "XML");
    			attr_dev(animateTransform1, "calcMode", "linear");
    			attr_dev(animateTransform1, "dur", "3s");
    			attr_dev(animateTransform1, "fill", "remove");
    			attr_dev(animateTransform1, "from", "360 50 50");
    			attr_dev(animateTransform1, "repeatCount", "indefinite");
    			attr_dev(animateTransform1, "restart", "always");
    			attr_dev(animateTransform1, "to", "0 50 50");
    			attr_dev(animateTransform1, "type", "rotate");
    			add_location(animateTransform1, file$2, 48, 6, 1162);
    			attr_dev(path3, "class", "st0");
    			attr_dev(path3, "d", "M50,21c16,0,29,13,29,29S66,79,50,79S21,66,21,50\t");
    			add_location(path3, file$2, 47, 4, 1083);
    			add_location(g1, file$2, 45, 2, 1037);
    			attr_dev(path4, "class", "st0");
    			attr_dev(path4, "d", "M50,62");
    			add_location(path4, file$2, 65, 4, 1541);
    			attr_dev(animateTransform2, "accumulate", "none");
    			attr_dev(animateTransform2, "additive", "replace");
    			attr_dev(animateTransform2, "attributeName", "transform");
    			attr_dev(animateTransform2, "attributeType", "XML");
    			attr_dev(animateTransform2, "calcMode", "linear");
    			attr_dev(animateTransform2, "dur", "3s");
    			attr_dev(animateTransform2, "fill", "remove");
    			attr_dev(animateTransform2, "from", "0 50 50");
    			attr_dev(animateTransform2, "repeatCount", "indefinite");
    			attr_dev(animateTransform2, "restart", "always");
    			attr_dev(animateTransform2, "to", "360 50 50");
    			attr_dev(animateTransform2, "type", "rotate");
    			add_location(animateTransform2, file$2, 67, 6, 1662);
    			attr_dev(path5, "class", "st0");
    			attr_dev(path5, "d", "M50,62c-6.6,0-12-5.4-12-12s5.4-12,12-12s12,5.4,12,12\t");
    			add_location(path5, file$2, 66, 4, 1578);
    			add_location(g2, file$2, 64, 2, 1532);
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "id", "spinner");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "x", "0px");
    			attr_dev(svg, "y", "0px");
    			attr_dev(svg, "viewBox", "0 0 100 100");
    			set_style(svg, "enable-background", "new 0 0 100 100");
    			attr_dev(svg, "xml:space", "preserve");
    			attr_dev(svg, "class", svg_class_value = "" + (null_to_empty(/*small*/ ctx[0] ? 'sd-spinner-small' : 'sd-spinner') + " svelte-12w2lat"));
    			add_location(svg, file$2, 4, 0, 52);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, svg, anchor);
    			append_dev(svg, style);
    			append_dev(style, t);
    			append_dev(svg, g0);
    			append_dev(g0, path0);
    			append_dev(g0, path1);
    			append_dev(path1, animateTransform0);
    			append_dev(svg, g1);
    			append_dev(g1, path2);
    			append_dev(g1, path3);
    			append_dev(path3, animateTransform1);
    			append_dev(svg, g2);
    			append_dev(g2, path4);
    			append_dev(g2, path5);
    			append_dev(path5, animateTransform2);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*small*/ 1 && svg_class_value !== (svg_class_value = "" + (null_to_empty(/*small*/ ctx[0] ? 'sd-spinner-small' : 'sd-spinner') + " svelte-12w2lat"))) {
    				attr_dev(svg, "class", svg_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Logo', slots, []);
    	let { small = false } = $$props;
    	const writable_props = ['small'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Logo> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('small' in $$props) $$invalidate(0, small = $$props.small);
    	};

    	$$self.$capture_state = () => ({ small });

    	$$self.$inject_state = $$props => {
    		if ('small' in $$props) $$invalidate(0, small = $$props.small);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [small];
    }

    class Logo extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, { small: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Logo",
    			options,
    			id: create_fragment$2.name
    		});
    	}

    	get small() {
    		throw new Error("<Logo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set small(value) {
    		throw new Error("<Logo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules/@specialdoom/proi-ui/src/components/spinner/Spinner.svelte generated by Svelte v3.49.0 */
    const file$1 = "node_modules/@specialdoom/proi-ui/src/components/spinner/Spinner.svelte";

    // (10:2) {#if label && !small}
    function create_if_block$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(/*label*/ ctx[0]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 1) set_data_dev(t, /*label*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(10:2) {#if label && !small}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let span;
    	let logo;
    	let t;
    	let current;

    	logo = new Logo({
    			props: { small: /*small*/ ctx[1] },
    			$$inline: true
    		});

    	let if_block = /*label*/ ctx[0] && !/*small*/ ctx[1] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			span = element("span");
    			create_component(logo.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			attr_dev(span, "class", "sd-spinner-container svelte-j9d734");
    			add_location(span, file$1, 7, 0, 117);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			mount_component(logo, span, null);
    			append_dev(span, t);
    			if (if_block) if_block.m(span, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const logo_changes = {};
    			if (dirty & /*small*/ 2) logo_changes.small = /*small*/ ctx[1];
    			logo.$set(logo_changes);

    			if (/*label*/ ctx[0] && !/*small*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(span, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(logo.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(logo.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(logo);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Spinner', slots, []);
    	let { label = '' } = $$props;
    	let { small = false } = $$props;
    	const writable_props = ['label', 'small'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Spinner> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('small' in $$props) $$invalidate(1, small = $$props.small);
    	};

    	$$self.$capture_state = () => ({ Logo, label, small });

    	$$self.$inject_state = $$props => {
    		if ('label' in $$props) $$invalidate(0, label = $$props.label);
    		if ('small' in $$props) $$invalidate(1, small = $$props.small);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [label, small];
    }

    class Spinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, { label: 0, small: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Spinner",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get label() {
    		throw new Error("<Spinner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<Spinner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get small() {
    		throw new Error("<Spinner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set small(value) {
    		throw new Error("<Spinner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const UPPERCASE = /[\p{Lu}]/u;
    const LOWERCASE = /[\p{Ll}]/u;
    const LEADING_CAPITAL = /^[\p{Lu}](?![\p{Lu}])/gu;
    const IDENTIFIER = /([\p{Alpha}\p{N}_]|$)/u;
    const SEPARATORS = /[_.\- ]+/;

    const LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);
    const SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');
    const NUMBERS_AND_IDENTIFIER = new RegExp('\\d+' + IDENTIFIER.source, 'gu');

    const preserveCamelCase = (string, toLowerCase, toUpperCase) => {
    	let isLastCharLower = false;
    	let isLastCharUpper = false;
    	let isLastLastCharUpper = false;

    	for (let i = 0; i < string.length; i++) {
    		const character = string[i];

    		if (isLastCharLower && UPPERCASE.test(character)) {
    			string = string.slice(0, i) + '-' + string.slice(i);
    			isLastCharLower = false;
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = true;
    			i++;
    		} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {
    			string = string.slice(0, i - 1) + '-' + string.slice(i - 1);
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = false;
    			isLastCharLower = true;
    		} else {
    			isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;
    			isLastLastCharUpper = isLastCharUpper;
    			isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;
    		}
    	}

    	return string;
    };

    const preserveConsecutiveUppercase = (input, toLowerCase) => {
    	LEADING_CAPITAL.lastIndex = 0;

    	return input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));
    };

    const postProcess = (input, toUpperCase) => {
    	SEPARATORS_AND_IDENTIFIER.lastIndex = 0;
    	NUMBERS_AND_IDENTIFIER.lastIndex = 0;

    	return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))
    		.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));
    };

    const camelCase = (input, options) => {
    	if (!(typeof input === 'string' || Array.isArray(input))) {
    		throw new TypeError('Expected the input to be `string | string[]`');
    	}

    	options = {
    		pascalCase: false,
    		preserveConsecutiveUppercase: false,
    		...options
    	};

    	if (Array.isArray(input)) {
    		input = input.map(x => x.trim())
    			.filter(x => x.length)
    			.join('-');
    	} else {
    		input = input.trim();
    	}

    	if (input.length === 0) {
    		return '';
    	}

    	const toLowerCase = options.locale === false ?
    		string => string.toLowerCase() :
    		string => string.toLocaleLowerCase(options.locale);
    	const toUpperCase = options.locale === false ?
    		string => string.toUpperCase() :
    		string => string.toLocaleUpperCase(options.locale);

    	if (input.length === 1) {
    		return options.pascalCase ? toUpperCase(input) : toLowerCase(input);
    	}

    	const hasUpperCase = input !== toLowerCase(input);

    	if (hasUpperCase) {
    		input = preserveCamelCase(input, toLowerCase, toUpperCase);
    	}

    	input = input.replace(LEADING_SEPARATORS, '');

    	if (options.preserveConsecutiveUppercase) {
    		input = preserveConsecutiveUppercase(input, toLowerCase);
    	} else {
    		input = toLowerCase(input);
    	}

    	if (options.pascalCase) {
    		input = toUpperCase(input.charAt(0)) + input.slice(1);
    	}

    	return postProcess(input, toUpperCase);
    };

    var camelcase = camelCase;
    // TODO: Remove this for the next major release
    var _default = camelCase;
    camelcase.default = _default;

    var proxies = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.proxies = void 0;
    exports.proxies = {
        // tableland mainnet mainnets
        ethereum: "",
        optimism: "",
        polygon: "",
        // tableland testnet testnets
        "ethereum-goerli": "0xDA8EA22d092307874f30A1F277D1388dca0BA97a",
        "optimism-kovan": "0xf2C9Fc73884A9c6e6Db58778176Ab67989139D06",
        "polygon-mumbai": "0x4b48841d4b32C4650E4ABc117A03FE8B51f38F68",
        // tableland staging testnets
        "optimism-kovan-staging": "0x7E57BaA6724c7742de6843094002c4e58FF6c7c3",
        localhost: "",
    };

    });

    var __awaiter$e = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    var _a;
    function getSigner() {
        return __awaiter$e(this, void 0, void 0, function* () {
            yield globalThis.ethereum.request({ method: "eth_requestAccounts" });
            const provider = new Web3Provider(globalThis.ethereum);
            const signer = provider.getSigner();
            return signer;
        });
    }
    // From https://www.npmjs.com/package/btoa
    const polyfills = {
        btoa: function (str) {
            const buffer = Buffer.from(str, "binary");
            return buffer.toString("base64");
        },
    };
    const btoa$1 = (_a = globalThis.btoa) !== null && _a !== void 0 ? _a : polyfills.btoa;
    const SUPPORTED_CHAINS = {
        // Testnet
        "ethereum-goerli": {
            name: "goerli",
            phrase: "Ethereum Goerli",
            chainId: 5,
            contract: proxies.proxies["ethereum-goerli"],
            host: "https://testnet.tableland.network",
            rpcRelay: true,
        },
        "optimism-kovan": {
            name: "optimism-kovan",
            phrase: "Optimism Kovan",
            chainId: 69,
            contract: proxies.proxies["optimism-kovan"],
            host: "https://testnet.tableland.network",
            rpcRelay: true,
        },
        "polygon-mumbai": {
            name: "maticmum",
            phrase: "Polygon Testnet",
            chainId: 80001,
            contract: proxies.proxies["polygon-mumbai"],
            host: "https://testnet.tableland.network",
            rpcRelay: true,
        },
        // staging
        "optimism-kovan-staging": {
            name: "optimism-kovan",
            phrase: "Optimism Kovan",
            chainId: 69,
            contract: proxies.proxies["optimism-kovan-staging"],
            host: "https://staging.tableland.network",
            rpcRelay: true,
        },
        "local-tableland": {
            name: "localhost",
            phrase: "Local Tableland",
            chainId: 31337,
            contract: "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
            host: "http://localhost:8080",
            rpcRelay: true,
        },
        // Testing
        custom: {
            name: "localhost",
            phrase: "Custom Chain",
            chainId: 31337,
            // If building locally you can put your contract address and host here or use the contract connection option
            contract: "",
            host: "",
            rpcRelay: true,
        },
    };
    // Take an Object with any symantic for key naming and return a new Object with keys that are lowerCamelCase
    // Example: `camelCaseKeys({structure_hash: "123"})` returns `{structureHash: "123"}`
    function camelCaseKeys(obj) {
        return Object.fromEntries(Object.entries(obj).map((entry) => {
            const key = entry[0];
            const val = entry[1];
            return [camelcase(key), val];
        }));
    }
    // Helper function to enable waiting until a transaction has been materialized by the Validator.
    // Uses simple polling with exponential backoff up to a maximum timeout.
    // Potential optimization could be had if the Validator supports subscribing to transaction
    // receipts via Websockets or long-poling in the future
    function waitConfirm(txnHash, options) {
        var _a;
        return __awaiter$e(this, void 0, void 0, function* () {
            // default timeout 2 minutes
            const timeout = getTimeout(options);
            // determines how often to check for materialization before timeout
            const rate = (_a = options === null || options === void 0 ? void 0 : options.rate) !== null && _a !== void 0 ? _a : 1500;
            const start = Date.now();
            // next tick then try immediately
            yield new Promise((resolve) => setTimeout(resolve, 0));
            let table = yield this.receipt(txnHash);
            let tries = 0;
            while (!table && start + timeout > Date.now()) {
                // increase the time between each call, but never go past the specified timeout
                const waitForMs = rate * Math.pow(2, tries);
                const nextTry = start + timeout < Date.now() + waitForMs
                    ? start + timeout - Date.now()
                    : waitForMs;
                yield new Promise((resolve) => setTimeout(resolve, nextTry));
                table = yield this.receipt(txnHash);
                tries++;
            }
            // Throw and let the caller decide what to do if the timeout is exceeded
            if (!table) {
                throw new Error(`timeout exceeded: could not get transaction receipt: ${txnHash}`);
            }
            return table;
        });
    }
    function getPrefix(options) {
        if (typeof options === "undefined")
            return "";
        return options.prefix || "";
    }
    function shouldSkipConfirm(options) {
        if (typeof options === "undefined")
            return false;
        return !!options.skipConfirm;
    }
    const defaultTimeout = 120 * 1000; // 2 mintues
    function getTimeout(options) {
        if (typeof options === "undefined")
            return defaultTimeout;
        if (typeof options.timeout !== "number")
            return defaultTimeout;
        return options.timeout;
    }

    var __awaiter$d = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function list() {
        var _a;
        return __awaiter$d(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const address = yield this.signer.getAddress();
            const res = yield fetch(`${this.options.host}/chain/${this.options.chainId}/tables/controller/${address}`).then((r) => r.json());
            return res;
        });
    }

    var __awaiter$c = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function SendCall(rpcBody, token) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const headers = {
                "Content-Type": "application/json",
            };
            if (token) {
                headers.Authorization = `Bearer ${token}`;
            }
            const body = JSON.stringify(rpcBody);
            const res = yield fetch(`${this.options.host}/rpc`, {
                method: "POST",
                headers,
                body,
            });
            return parseResponse$1(res);
        });
    }
    // parse the rpc response and throw if any of the different types of errors occur
    function parseResponse$1(res) {
        return __awaiter$c(this, void 0, void 0, function* () {
            if (!res.ok)
                throw new Error(res.statusText);
            const json = yield res.json();
            // NOTE: we are leaving behind the error code because the Error type does not allow for a `code` property
            if (json.error)
                throw new Error(json.error.message);
            if (!json.result)
                throw new Error("Malformed RPC response");
            return json;
        });
    }
    function GeneralizedRPC(method, params) {
        return __awaiter$c(this, void 0, void 0, function* () {
            return {
                jsonrpc: "2.0",
                method: `tableland_${method}`,
                id: 1,
                params: [params],
            };
        });
    }
    function hash$1(query) {
        var _a;
        return __awaiter$c(this, void 0, void 0, function* () {
            const message = yield GeneralizedRPC.call(this, "validateCreateTable", {
                create_statement: query,
            });
            if (!this.token) {
                yield this.siwe();
            }
            const json = yield SendCall.call(this, message, (_a = this.token) === null || _a === void 0 ? void 0 : _a.token);
            return camelCaseKeys(json.result);
        });
    }
    function validateWriteQuery(query) {
        var _a;
        return __awaiter$c(this, void 0, void 0, function* () {
            const message = yield GeneralizedRPC.call(this, "validateWriteQuery", {
                statement: query,
            });
            if (!this.token) {
                yield this.siwe();
            }
            const json = yield SendCall.call(this, message, (_a = this.token) === null || _a === void 0 ? void 0 : _a.token);
            return camelCaseKeys(json.result);
        });
    }
    function read$1(query) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const message = yield GeneralizedRPC.call(this, "runReadQuery", {
                statement: query,
            });
            const json = yield SendCall.call(this, message);
            return camelCaseKeys(json.result.data);
        });
    }
    // Note: This method returns right away, once the write request has been sent to a validator for
    //       writing to the Tableland smart contract. However, the write is not confirmed until a validator
    //       has picked up the write event from the smart contract, and digested the event locally.
    function write$1(query) {
        var _a;
        return __awaiter$c(this, void 0, void 0, function* () {
            const message = yield GeneralizedRPC.call(this, "relayWriteQuery", {
                statement: query,
            });
            if (!this.token) {
                yield this.siwe();
            }
            const json = yield SendCall.call(this, message, (_a = this.token) === null || _a === void 0 ? void 0 : _a.token);
            return camelCaseKeys(json.result.tx);
        });
    }
    function receipt(txnHash) {
        var _a;
        return __awaiter$c(this, void 0, void 0, function* () {
            const message = yield GeneralizedRPC.call(this, "getReceipt", {
                txn_hash: txnHash,
            });
            if (!this.token) {
                yield this.siwe();
            }
            const json = yield SendCall.call(this, message, (_a = this.token) === null || _a === void 0 ? void 0 : _a.token);
            if (json.result.receipt) {
                return camelCaseKeys(json.result.receipt);
            }
            return undefined;
        });
    }
    function setController$2(tableId, controller, caller) {
        var _a, _b;
        return __awaiter$c(this, void 0, void 0, function* () {
            caller = caller !== null && caller !== void 0 ? caller : (yield ((_a = this.signer) === null || _a === void 0 ? void 0 : _a.getAddress()));
            if (typeof caller === "undefined") {
                throw new Error("must have a signer to set controller");
            }
            const message = yield GeneralizedRPC.call(this, "setController", {
                token_id: tableId,
                controller,
                caller,
            });
            if (!this.token) {
                yield this.siwe();
            }
            const json = yield SendCall.call(this, message, (_b = this.token) === null || _b === void 0 ? void 0 : _b.token);
            return camelCaseKeys(json.result.tx);
        });
    }

    var ethers_1 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

    var Ownable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Ownable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class Ownable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.Ownable__factory = Ownable__factory;
    Ownable__factory.abi = _abi;

    });

    var access$1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Ownable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "Ownable__factory", { enumerable: true, get: function () { return Ownable__factory_1.Ownable__factory; } });

    });

    var ERC721Enumerable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721Enumerable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenOfOwnerByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721Enumerable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721Enumerable__factory = ERC721Enumerable__factory;
    ERC721Enumerable__factory.abi = _abi;

    });

    var IERC721Enumerable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721Enumerable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenOfOwnerByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721Enumerable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721Enumerable__factory = IERC721Enumerable__factory;
    IERC721Enumerable__factory.abi = _abi;

    });

    var IERC721Metadata__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721Metadata__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721Metadata__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721Metadata__factory = IERC721Metadata__factory;
    IERC721Metadata__factory.abi = _abi;

    });

    var extensions$2 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721Metadata__factory = exports.IERC721Enumerable__factory = exports.ERC721Enumerable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721Enumerable__factory", { enumerable: true, get: function () { return ERC721Enumerable__factory_1.ERC721Enumerable__factory; } });

    Object.defineProperty(exports, "IERC721Enumerable__factory", { enumerable: true, get: function () { return IERC721Enumerable__factory_1.IERC721Enumerable__factory; } });

    Object.defineProperty(exports, "IERC721Metadata__factory", { enumerable: true, get: function () { return IERC721Metadata__factory_1.IERC721Metadata__factory; } });

    });

    var ERC721__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "string",
                    name: "name_",
                    type: "string",
                },
                {
                    internalType: "string",
                    name: "symbol_",
                    type: "string",
                },
            ],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "";
    const isSuperArgs = (xs) => xs.length > 1;
    class ERC721__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(name_, symbol_, overrides) {
            return super.deploy(name_, symbol_, overrides || {});
        }
        getDeployTransaction(name_, symbol_, overrides) {
            return super.getDeployTransaction(name_, symbol_, overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721__factory = ERC721__factory;
    ERC721__factory.bytecode = _bytecode;
    ERC721__factory.abi = _abi;

    });

    var IERC721__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721__factory = IERC721__factory;
    IERC721__factory.abi = _abi;

    });

    var IERC721Receiver__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721Receiver__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "onERC721Received",
            outputs: [
                {
                    internalType: "bytes4",
                    name: "",
                    type: "bytes4",
                },
            ],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721Receiver__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721Receiver__factory = IERC721Receiver__factory;
    IERC721Receiver__factory.abi = _abi;

    });

    var ERC721 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721Receiver__factory = exports.IERC721__factory = exports.ERC721__factory = exports.extensions = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.extensions = __importStar(extensions$2);

    Object.defineProperty(exports, "ERC721__factory", { enumerable: true, get: function () { return ERC721__factory_1.ERC721__factory; } });

    Object.defineProperty(exports, "IERC721__factory", { enumerable: true, get: function () { return IERC721__factory_1.IERC721__factory; } });

    Object.defineProperty(exports, "IERC721Receiver__factory", { enumerable: true, get: function () { return IERC721Receiver__factory_1.IERC721Receiver__factory; } });

    });

    var token = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erc721 = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.erc721 = __importStar(ERC721);

    });

    var ERC165__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC165__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
    ];
    class ERC165__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC165__factory = ERC165__factory;
    ERC165__factory.abi = _abi;

    });

    var IERC165__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC165__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
    ];
    class IERC165__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC165__factory = IERC165__factory;
    IERC165__factory.abi = _abi;

    });

    var introspection = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC165__factory = exports.ERC165__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC165__factory", { enumerable: true, get: function () { return ERC165__factory_1.ERC165__factory; } });

    Object.defineProperty(exports, "IERC165__factory", { enumerable: true, get: function () { return IERC165__factory_1.IERC165__factory; } });

    });

    var utils$3 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.introspection = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.introspection = __importStar(introspection);

    });

    var contracts$3 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utils = exports.token = exports.access = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.access = __importStar(access$1);
    exports.token = __importStar(token);
    exports.utils = __importStar(utils$3);

    });

    var OwnableUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OwnableUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class OwnableUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.OwnableUpgradeable__factory = OwnableUpgradeable__factory;
    OwnableUpgradeable__factory.abi = _abi;

    });

    var access = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OwnableUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "OwnableUpgradeable__factory", { enumerable: true, get: function () { return OwnableUpgradeable__factory_1.OwnableUpgradeable__factory; } });

    });

    var IERC1822ProxiableUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC1822ProxiableUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "proxiableUUID",
            outputs: [
                {
                    internalType: "bytes32",
                    name: "",
                    type: "bytes32",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
    ];
    class IERC1822ProxiableUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC1822ProxiableUpgradeable__factory = IERC1822ProxiableUpgradeable__factory;
    IERC1822ProxiableUpgradeable__factory.abi = _abi;

    });

    var draftIERC1822Upgradeable_sol = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC1822ProxiableUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "IERC1822ProxiableUpgradeable__factory", { enumerable: true, get: function () { return IERC1822ProxiableUpgradeable__factory_1.IERC1822ProxiableUpgradeable__factory; } });

    });

    var interfaces = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.draftIerc1822UpgradeableSol = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.draftIerc1822UpgradeableSol = __importStar(draftIERC1822Upgradeable_sol);

    });

    var ERC1967UpgradeUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC1967UpgradeUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "previousAdmin",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "newAdmin",
                    type: "address",
                },
            ],
            name: "AdminChanged",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "beacon",
                    type: "address",
                },
            ],
            name: "BeaconUpgraded",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "implementation",
                    type: "address",
                },
            ],
            name: "Upgraded",
            type: "event",
        },
    ];
    class ERC1967UpgradeUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC1967UpgradeUpgradeable__factory = ERC1967UpgradeUpgradeable__factory;
    ERC1967UpgradeUpgradeable__factory.abi = _abi;

    });

    var ERC1967 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC1967UpgradeUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC1967UpgradeUpgradeable__factory", { enumerable: true, get: function () { return ERC1967UpgradeUpgradeable__factory_1.ERC1967UpgradeUpgradeable__factory; } });

    });

    var IBeaconUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IBeaconUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "implementation",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
    ];
    class IBeaconUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IBeaconUpgradeable__factory = IBeaconUpgradeable__factory;
    IBeaconUpgradeable__factory.abi = _abi;

    });

    var beacon = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IBeaconUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "IBeaconUpgradeable__factory", { enumerable: true, get: function () { return IBeaconUpgradeable__factory_1.IBeaconUpgradeable__factory; } });

    });

    var Initializable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Initializable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
    ];
    class Initializable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.Initializable__factory = Initializable__factory;
    Initializable__factory.abi = _abi;

    });

    var UUPSUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UUPSUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "previousAdmin",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "newAdmin",
                    type: "address",
                },
            ],
            name: "AdminChanged",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "beacon",
                    type: "address",
                },
            ],
            name: "BeaconUpgraded",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "implementation",
                    type: "address",
                },
            ],
            name: "Upgraded",
            type: "event",
        },
        {
            inputs: [],
            name: "proxiableUUID",
            outputs: [
                {
                    internalType: "bytes32",
                    name: "",
                    type: "bytes32",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
            ],
            name: "upgradeTo",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "upgradeToAndCall",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
    ];
    class UUPSUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.UUPSUpgradeable__factory = UUPSUpgradeable__factory;
    UUPSUpgradeable__factory.abi = _abi;

    });

    var utils$2 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UUPSUpgradeable__factory = exports.Initializable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "Initializable__factory", { enumerable: true, get: function () { return Initializable__factory_1.Initializable__factory; } });

    Object.defineProperty(exports, "UUPSUpgradeable__factory", { enumerable: true, get: function () { return UUPSUpgradeable__factory_1.UUPSUpgradeable__factory; } });

    });

    var proxy = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utils = exports.beacon = exports.erc1967 = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.erc1967 = __importStar(ERC1967);
    exports.beacon = __importStar(beacon);
    exports.utils = __importStar(utils$2);

    });

    var PausableUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PausableUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Paused",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Unpaused",
            type: "event",
        },
        {
            inputs: [],
            name: "paused",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
    ];
    class PausableUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.PausableUpgradeable__factory = PausableUpgradeable__factory;
    PausableUpgradeable__factory.abi = _abi;

    });

    var ReentrancyGuardUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReentrancyGuardUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
    ];
    class ReentrancyGuardUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ReentrancyGuardUpgradeable__factory = ReentrancyGuardUpgradeable__factory;
    ReentrancyGuardUpgradeable__factory.abi = _abi;

    });

    var security = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ReentrancyGuardUpgradeable__factory = exports.PausableUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "PausableUpgradeable__factory", { enumerable: true, get: function () { return PausableUpgradeable__factory_1.PausableUpgradeable__factory; } });

    Object.defineProperty(exports, "ReentrancyGuardUpgradeable__factory", { enumerable: true, get: function () { return ReentrancyGuardUpgradeable__factory_1.ReentrancyGuardUpgradeable__factory; } });

    });

    var ContextUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextUpgradeable__factory = void 0;

    const _abi = [
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
    ];
    class ContextUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ContextUpgradeable__factory = ContextUpgradeable__factory;
    ContextUpgradeable__factory.abi = _abi;

    });

    var utils$1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContextUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ContextUpgradeable__factory", { enumerable: true, get: function () { return ContextUpgradeable__factory_1.ContextUpgradeable__factory; } });

    });

    var contractsUpgradeable = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.utils = exports.security = exports.proxy = exports.interfaces = exports.access = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.access = __importStar(access);
    exports.interfaces = __importStar(interfaces);
    exports.proxy = __importStar(proxy);
    exports.security = __importStar(security);
    exports.utils = __importStar(utils$1);

    });

    var _openzeppelin = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contractsUpgradeable = exports.contracts = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.contracts = __importStar(contracts$3);
    exports.contractsUpgradeable = __importStar(contractsUpgradeable);

    });

    var ERC721AQueryablePolicies__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721AQueryablePolicies__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ERC721AQueryablePoliciesUnauthorized",
            type: "error",
        },
    ];
    const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220895bcd51fe852828d2f83a15605d019e55e53ca32b0afd88e4757fee4ee01e5d64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class ERC721AQueryablePolicies__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721AQueryablePolicies__factory = ERC721AQueryablePolicies__factory;
    ERC721AQueryablePolicies__factory.bytecode = _bytecode;
    ERC721AQueryablePolicies__factory.abi = _abi;

    });

    var ERC721EnumerablePolicies__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721EnumerablePolicies__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ERC721EnumerablePoliciesUnauthorized",
            type: "error",
        },
    ];
    const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f35df698a646ec757564066ce01132e4e22be1c4c202d6b7ba751041a209b30564736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class ERC721EnumerablePolicies__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721EnumerablePolicies__factory = ERC721EnumerablePolicies__factory;
    ERC721EnumerablePolicies__factory.bytecode = _bytecode;
    ERC721EnumerablePolicies__factory.abi = _abi;

    });

    var policies = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721EnumerablePolicies__factory = exports.ERC721AQueryablePolicies__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721AQueryablePolicies__factory", { enumerable: true, get: function () { return ERC721AQueryablePolicies__factory_1.ERC721AQueryablePolicies__factory; } });

    Object.defineProperty(exports, "ERC721EnumerablePolicies__factory", { enumerable: true, get: function () { return ERC721EnumerablePolicies__factory_1.ERC721EnumerablePolicies__factory; } });

    });

    var TestAllowAllTablelandController__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestAllowAllTablelandController__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            name: "getPolicy",
            outputs: [
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    internalType: "struct ITablelandController.Policy",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
    ];
    const _bytecode = "0x608060405234801561001057600080fd5b506103f9806100206000396000f3fe60806040526004361061001e5760003560e01c80633791dc6a14610023575b600080fd5b610036610031366004610222565b61004c565b60405161004391906102ab565b60405180910390f35b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a08201526040805160c08101825260018082526020820181905291810191909152606081016100dd60005b6040519080825280602002602001820160405280156100d757816020015b60608152602001906001900390816100c25790505b5061012f565b81526020016100ec60006100a4565b8152602001600060405190808252806020026020018201604052801561012657816020015b60608152602001906001900390816101115790505b50905292915050565b60608060005b835181101561021b5783818151811061015e57634e487b7160e01b600052603260045260246000fd5b6020026020010151516000141561017457610209565b8151156101bd57816040518060400160405280600581526020016401030b732160dd1b8152506040516020016101ab92919061027c565b60405160208183030381529060405291505b818482815181106101de57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016101f792919061027c565b60405160208183030381529060405291505b806102138161039c565b915050610135565b5092915050565b600060208284031215610233578081fd5b81356001600160a01b0381168114610249578182fd5b9392505050565b6000815180845261026881602086016020860161036c565b601f01601f19169290920160200192915050565b6000835161028e81846020880161036c565b8351908301906102a281836020880161036c565b01949350505050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c060808501526102ea60e0850182610250565b90506080850151601f19808684030160a08701526103088383610250565b60a0880151878203830160c089015280518083529194508501925084840190600581901b85018601875b8281101561035e578487830301845261034c828751610250565b95880195938801939150600101610332565b509998505050505050505050565b60005b8381101561038757818101518382015260200161036f565b83811115610396576000848401525b50505050565b60006000198214156103bc57634e487b7160e01b81526011600452602481fd5b506001019056fea2646970667358221220cf85b54822f824a92b8ad1089614420024d7bc45f82a285bc5d717272dd63a2364736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestAllowAllTablelandController__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestAllowAllTablelandController__factory = TestAllowAllTablelandController__factory;
    TestAllowAllTablelandController__factory.bytecode = _bytecode;
    TestAllowAllTablelandController__factory.abi = _abi;

    });

    var TestCreateFromContract__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestCreateFromContract__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "registry",
                    type: "address",
                },
            ],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "name",
                    type: "string",
                },
            ],
            name: "create",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            name: "tables",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x60806040523480156200001157600080fd5b5060405162001943380380620019438339810160408190526200003491620001e9565b604080518082018252601681527f5465737443726561746546726f6d436f6e7472616374000000000000000000006020808301918252835180850190945260038452624d544b60e81b908401528151919291620000949160009162000143565b508051620000aa90600190602084019062000143565b505050620000c7620000c1620000ed60201b60201c565b620000f1565b600880546001600160a01b0319166001600160a01b039290921691909117905562000256565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001519062000219565b90600052602060002090601f016020900481019282620001755760008555620001c0565b82601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b5b80821115620001ce5760008155600101620001d3565b600060208284031215620001fb578081fd5b81516001600160a01b038116811462000212578182fd5b9392505050565b600181811c908216806200022e57607f821691505b602082108114156200025057634e487b7160e01b600052602260045260246000fd5b50919050565b6116dd80620002666000396000f3fe6080604052600436106101095760003560e01c80638322cb6611610095578063b6a46b3b11610064578063b6a46b3b146102ed578063b88d4fde14610300578063c87b56dd14610320578063e985e9c514610340578063f2fde38b1461038957600080fd5b80638322cb66146102625780638da5cb5b1461029a57806395d89b41146102b8578063a22cb465146102cd57600080fd5b806323b872dd116100dc57806323b872dd146101bf57806342842e0e146101df5780636352211e146101ff57806370a082311461021f578063715018a61461024d57600080fd5b806301ffc9a71461010e57806306fdde0314610143578063081812fc14610165578063095ea7b31461019d575b600080fd5b34801561011a57600080fd5b5061012e6101293660046112ab565b6103a9565b60405190151581526020015b60405180910390f35b34801561014f57600080fd5b506101586103fb565b60405161013a91906114c3565b34801561017157600080fd5b50610185610180366004611329565b61048d565b6040516001600160a01b03909116815260200161013a565b3480156101a957600080fd5b506101bd6101b8366004611282565b6104b4565b005b3480156101cb57600080fd5b506101bd6101da366004611194565b6105cf565b3480156101eb57600080fd5b506101bd6101fa366004611194565b610600565b34801561020b57600080fd5b5061018561021a366004611329565b61061b565b34801561022b57600080fd5b5061023f61023a366004611148565b61067b565b60405190815260200161013a565b34801561025957600080fd5b506101bd610701565b34801561026e57600080fd5b5061023f61027d3660046112e3565b805160208183018101805160078252928201919093012091525481565b3480156102a657600080fd5b506006546001600160a01b0316610185565b3480156102c457600080fd5b50610158610715565b3480156102d957600080fd5b506101bd6102e8366004611248565b610724565b6101bd6102fb3660046112e3565b610733565b34801561030c57600080fd5b506101bd61031b3660046111cf565b61086e565b34801561032c57600080fd5b5061015861033b366004611329565b6108a6565b34801561034c57600080fd5b5061012e61035b366004611162565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561039557600080fd5b506101bd6103a4366004611148565b61091a565b60006001600160e01b031982166380ac58cd60e01b14806103da57506001600160e01b03198216635b5e139f60e01b145b806103f557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461040a906115e5565b80601f0160208091040260200160405190810160405280929190818152602001828054610436906115e5565b80156104835780601f1061045857610100808354040283529160200191610483565b820191906000526020600020905b81548152906001019060200180831161046657829003601f168201915b5050505050905090565b600061049882610993565b506000908152600460205260409020546001600160a01b031690565b60006104bf8261061b565b9050806001600160a01b0316836001600160a01b031614156105325760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061054e575061054e813361035b565b6105c05760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610529565b6105ca83836109f2565b505050565b6105d93382610a60565b6105f55760405162461bcd60e51b815260040161052990611528565b6105ca838383610adf565b6105ca8383836040518060200160405280600081525061086e565b6000818152600260205260408120546001600160a01b0316806103f55760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610529565b60006001600160a01b0382166106e55760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610529565b506001600160a01b031660009081526003602052604090205490565b610709610c7b565b6107136000610cd5565b565b60606001805461040a906115e5565b61072f338383610d27565b5050565b6007816040516107439190611385565b9081526020016040518091039020546000146107975760405162461bcd60e51b81526020600482015260136024820152726e616d6520616c72656164792065786973747360681b6044820152606401610529565b6008546040516000916001600160a01b031690633a9151b09033906107c09086906020016113d0565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016107ec92919061149f565b602060405180830381600087803b15801561080657600080fd5b505af115801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190611341565b905061084981610df6565b8060078360405161085a9190611385565b908152604051908190036020019020555050565b6108783383610a60565b6108945760405162461bcd60e51b815260040161052990611528565b6108a084848484610e3b565b50505050565b60606108b182610993565b60006108c860408051602081019091526000815290565b905060008151116108e85760405180602001604052806000815250610913565b806108f284610e6e565b6040516020016109039291906113a1565b6040516020818303038152906040525b9392505050565b610922610c7b565b6001600160a01b0381166109875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610529565b61099081610cd5565b50565b6000818152600260205260409020546001600160a01b03166109905760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610529565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a278261061b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610a6c8361061b565b9050806001600160a01b0316846001600160a01b03161480610ab357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610ad75750836001600160a01b0316610acc8461048d565b6001600160a01b0316145b949350505050565b826001600160a01b0316610af28261061b565b6001600160a01b031614610b565760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610529565b6001600160a01b038216610bb85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610529565b610bc36000826109f2565b6001600160a01b0383166000908152600360205260408120805460019290610bec9084906115a2565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c1a908490611576565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546001600160a01b031633146107135760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610529565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610d895760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610529565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61099081604051602401610e0c91815260200190565b60408051601f198184030181529190526020810180516001600160e01b031663f5b1bba960e01b179052610f88565b610e46848484610adf565b610e5284848484610fa9565b6108a05760405162461bcd60e51b8152600401610529906114d6565b606081610e925750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610ebc5780610ea681611620565b9150610eb59050600a8361158e565b9150610e96565b60008167ffffffffffffffff811115610ee557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f0f576020820181803683370190505b5090505b8415610ad757610f246001836115a2565b9150610f31600a8661163b565b610f3c906030611576565b60f81b818381518110610f5f57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610f81600a8661158e565b9450610f13565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b60006001600160a01b0384163b156110ab57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610fed903390899088908890600401611462565b602060405180830381600087803b15801561100757600080fd5b505af1925050508015611037575060408051601f3d908101601f19168201909252611034918101906112c7565b60015b611091573d808015611065576040519150601f19603f3d011682016040523d82523d6000602084013e61106a565b606091505b5080516110895760405162461bcd60e51b8152600401610529906114d6565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ad7565b506001949350505050565b600067ffffffffffffffff808411156110d1576110d161167b565b604051601f8501601f19908116603f011681019082821181831017156110f9576110f961167b565b8160405280935085815286868601111561111257600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461114357600080fd5b919050565b600060208284031215611159578081fd5b6109138261112c565b60008060408385031215611174578081fd5b61117d8361112c565b915061118b6020840161112c565b90509250929050565b6000806000606084860312156111a8578081fd5b6111b18461112c565b92506111bf6020850161112c565b9150604084013590509250925092565b600080600080608085870312156111e4578081fd5b6111ed8561112c565b93506111fb6020860161112c565b925060408501359150606085013567ffffffffffffffff81111561121d578182fd5b8501601f8101871361122d578182fd5b61123c878235602084016110b6565b91505092959194509250565b6000806040838503121561125a578182fd5b6112638361112c565b915060208301358015158114611277578182fd5b809150509250929050565b60008060408385031215611294578182fd5b61129d8361112c565b946020939093013593505050565b6000602082840312156112bc578081fd5b813561091381611691565b6000602082840312156112d8578081fd5b815161091381611691565b6000602082840312156112f4578081fd5b813567ffffffffffffffff81111561130a578182fd5b8201601f8101841361131a578182fd5b610ad7848235602084016110b6565b60006020828403121561133a578081fd5b5035919050565b600060208284031215611352578081fd5b5051919050565b600081518084526113718160208601602086016115b9565b601f01601f19169290920160200192915050565b600082516113978184602087016115b9565b9190910192915050565b600083516113b38184602088016115b9565b8351908301906113c78183602088016115b9565b01949350505050565b6c021a922a0aa22902a20a126229609d1b8152600082516113f881600d8501602087016115b9565b7f5f33313333372028696e742069642c20737472696e67206e616d652c20737472600d9390910192830152507f696e67206465736372697074696f6e2c20737472696e672065787465726e616c602d820152665f6c696e6b293b60c81b604d820152605401919050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061149590830184611359565b9695505050505050565b6001600160a01b0383168152604060208201819052600090610ad790830184611359565b6020815260006109136020830184611359565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b600082198211156115895761158961164f565b500190565b60008261159d5761159d611665565b500490565b6000828210156115b4576115b461164f565b500390565b60005b838110156115d45781810151838201526020016115bc565b838111156108a05750506000910152565b600181811c908216806115f957607f821691505b6020821081141561161a57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156116345761163461164f565b5060010190565b60008261164a5761164a611665565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461099057600080fdfea264697066735822122030a8dbd1dc171e92f911cda34fe8b5a5cedff862ba73523d67b9e5fa62c0f04464736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestCreateFromContract__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(registry, overrides) {
            return super.deploy(registry, overrides || {});
        }
        getDeployTransaction(registry, overrides) {
            return super.getDeployTransaction(registry, overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestCreateFromContract__factory = TestCreateFromContract__factory;
    TestCreateFromContract__factory.bytecode = _bytecode;
    TestCreateFromContract__factory.abi = _abi;

    });

    var TestERC721AQueryable__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestERC721AQueryable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "burn",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "mint",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x60806040523480156200001157600080fd5b50604080518082018252601481527f5465737445524337323141517565727961626c650000000000000000000000006020808301918252835180850190945260038452622120a960e91b9084015281519192916200007291600291620000f2565b50805162000088906003906020840190620000f2565b505060008055506200009a33620000a0565b620001d5565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001009062000198565b90600052602060002090601f0160209004810192826200012457600085556200016f565b82601f106200013f57805160ff19168380011785556200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b506200017d92915062000181565b5090565b5b808211156200017d576000815560010162000182565b600181811c90821680620001ad57607f821691505b60208210811415620001cf57634e487b7160e01b600052602260045260246000fd5b50919050565b61199380620001e56000396000f3fe6080604052600436106101405760003560e01c806370a08231116100b6578063a22cb4651161006f578063a22cb46514610383578063b88d4fde146103a3578063c23dc68f146103c3578063c87b56dd146103f0578063e985e9c514610410578063f2fde38b1461045957600080fd5b806370a08231146102ce578063715018a6146102ee5780638462151c146103035780638da5cb5b1461033057806395d89b411461034e57806399a2557a1461036357600080fd5b806318160ddd1161010857806318160ddd146101fe57806323b872dd1461022157806342842e0e1461024157806342966c68146102615780635bbb2177146102815780636352211e146102ae57600080fd5b806301ffc9a71461014557806306fdde031461017a578063081812fc1461019c578063095ea7b3146101d45780631249c58b146101f6575b600080fd5b34801561015157600080fd5b506101656101603660046116ea565b610479565b60405190151581526020015b60405180910390f35b34801561018657600080fd5b5061018f6104cb565b6040516101719190611889565b3480156101a857600080fd5b506101bc6101b7366004611722565b61055d565b6040516001600160a01b039091168152602001610171565b3480156101e057600080fd5b506101f46101ef36600461161f565b6105a1565b005b6101f4610641565b34801561020a57600080fd5b50600154600054035b604051908152602001610171565b34801561022d57600080fd5b506101f461023c3660046114d5565b61064e565b34801561024d57600080fd5b506101f461025c3660046114d5565b6107d7565b34801561026d57600080fd5b506101f461027c366004611722565b6107f7565b34801561028d57600080fd5b506102a161029c36600461167a565b610805565b604051610171919061180f565b3480156102ba57600080fd5b506101bc6102c9366004611722565b6108fb565b3480156102da57600080fd5b506102136102e9366004611489565b610906565b3480156102fa57600080fd5b506101f4610955565b34801561030f57600080fd5b5061032361031e366004611489565b610967565b6040516101719190611851565b34801561033c57600080fd5b506008546001600160a01b03166101bc565b34801561035a57600080fd5b5061018f610a93565b34801561036f57600080fd5b5061032361037e366004611648565b610aa2565b34801561038f57600080fd5b506101f461039e3660046115e5565b610c3c565b3480156103af57600080fd5b506101f46103be366004611510565b610cd2565b3480156103cf57600080fd5b506103e36103de366004611722565b610d1c565b604051610171919061189c565b3480156103fc57600080fd5b5061018f61040b366004611722565b610d94565b34801561041c57600080fd5b5061016561042b3660046114a3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b34801561046557600080fd5b506101f4610474366004611489565b610e3d565b60006301ffc9a760e01b6001600160e01b0319831614806104aa57506380ac58cd60e01b6001600160e01b03198316145b806104c55750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600280546104da906118d6565b80601f0160208091040260200160405190810160405280929190818152602001828054610506906118d6565b80156105535780601f1061052857610100808354040283529160200191610553565b820191906000526020600020905b81548152906001019060200180831161053657829003601f168201915b5050505050905090565b600061056882610eb8565b610585576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105ac826108fb565b9050336001600160a01b038216146105e5576105c8813361042b565b6105e5576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b61064c336001610edf565b565b600061065982610efd565b9050836001600160a01b0316816001600160a01b03161461068c5760405162a1148160e81b815260040160405180910390fd5b600082815260066020526040902080546106b88187335b6001600160a01b039081169116811491141790565b6106e3576106c6863361042b565b6106e357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661070a57604051633a954ecd60e21b815260040160405180910390fd5b801561071557600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b83166107a0576001840160008181526004602052604090205461079e57600054811461079e5760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b031660008051602061193e83398151915260405160405180910390a4505050505050565b6107f283838360405180602001604052806000815250610cd2565b505050565b610802816001610f5e565b50565b60608160008167ffffffffffffffff81111561083157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561088357816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161084f5790505b50905060005b8281146108f2576108bf8686838181106108b357634e487b7160e01b600052603260045260246000fd5b90506020020135610d1c565b8282815181106108df57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101610889565b50949350505050565b60006104c582610efd565b60006001600160a01b03821661092f576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b61095d61108f565b61064c60006110e9565b6060600080600061097785610906565b905060008167ffffffffffffffff8111156109a257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109cb578160200160208202803683370190505b5090506109f860408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614610a8757610a0b8161113b565b9150816040015115610a1c57610a7f565b81516001600160a01b031615610a3157815194505b876001600160a01b0316856001600160a01b03161415610a7f5780838780600101985081518110610a7257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b6001016109fb565b50909695505050505050565b6060600380546104da906118d6565b6060818310610ac457604051631960ccad60e11b815260040160405180910390fd5b600080610ad060005490565b905080841115610ade578093505b6000610ae987610906565b905084861015610b085785850381811015610b02578091505b50610b0c565b5060005b60008167ffffffffffffffff811115610b3557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b5e578160200160208202803683370190505b50905081610b71579350610c3592505050565b6000610b7c88610d1c565b905060008160400151610b8d575080515b885b888114158015610b9f5750848714155b15610c2957610bad8161113b565b9250826040015115610bbe57610c21565b82516001600160a01b031615610bd357825191505b8a6001600160a01b0316826001600160a01b03161415610c215780848880600101995081518110610c1457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b600101610b8f565b50505092835250909150505b9392505050565b6001600160a01b038216331415610c665760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cdd84848461064e565b6001600160a01b0383163b15610d1657610cf984848484611177565b610d16576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6040805160808082018352600080835260208084018290528385018290526060808501839052855193840186528284529083018290529382018190529281018390529091506000548310610d705792915050565b610d798361113b565b9050806040015115610d8b5792915050565b610c358361126e565b6060610d9f82610eb8565b610dbc57604051630a14c4b560e41b815260040160405180910390fd5b6000610deb60408051808201909152601081526f68747470733a2f2f6261722e78797a2f60801b602082015290565b9050805160001415610e0c5760405180602001604052806000815250610c35565b80610e16846112a3565b604051602001610e279291906117a3565b6040516020818303038152906040529392505050565b610e4561108f565b6001600160a01b038116610eaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610802816110e9565b60008054821080156104c5575050600090815260046020526040902054600160e01b161590565b610ef98282604051806020016040528060008152506112e5565b5050565b600081600054811015610f4557600081815260046020526040902054600160e01b8116610f43575b80610c35575060001901600081815260046020526040902054610f25565b505b604051636f96cda160e11b815260040160405180910390fd5b6000610f6983610efd565b905080600080610f8786600090815260066020526040902080549091565b915091508415610fc757610f9c8184336106a3565b610fc757610faa833361042b565b610fc757604051632ce44b5f60e11b815260040160405180910390fd5b8015610fd257600082555b6001600160a01b038316600081815260056020526040902080546fffffffffffffffffffffffffffffffff0190554260a01b17600360e01b17600087815260046020526040902055600160e11b841661105957600186016000818152600460205260409020546110575760005481146110575760008181526004602052604090208590555b505b60405186906000906001600160a01b0386169060008051602061193e833981519152908390a45050600180548101905550505050565b6008546001600160a01b0316331461064c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ea6565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600460205260409020546104c590611352565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906111ac9033908990889088906004016117d2565b602060405180830381600087803b1580156111c657600080fd5b505af19250505080156111f6575060408051601f3d908101601f191682019092526111f391810190611706565b60015b611251573d808015611224576040519150601f19603f3d011682016040523d82523d6000602084013e611229565b606091505b508051611249576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526104c561129e83610efd565b611352565b604080516080019081905280825b600183039250600a81066030018353600a9004806112ce576112d3565b6112b1565b50819003601f19909101908152919050565b6112ef838361139a565b6001600160a01b0383163b156107f2576000548281035b6113196000868380600101945086611177565b611336576040516368d2bf6b60e11b815260040160405180910390fd5b81811061130657816000541461134b57600080fd5b5050505050565b604080516080810182526001600160a01b038316815260a083901c67ffffffffffffffff166020820152600160e01b831615159181019190915260e89190911c606082015290565b600054816113bb5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b03831660008181526005602090815260408083208054680100000000000000018802019055848352600490915281206001851460e11b4260a01b1783179055828401908390839060008051602061193e8339815191528180a4600183015b818114611446578083600060008051602061193e833981519152600080a4600101611420565b508161146457604051622e076360e81b815260040160405180910390fd5b60005550505050565b80356001600160a01b038116811461148457600080fd5b919050565b60006020828403121561149a578081fd5b610c358261146d565b600080604083850312156114b5578081fd5b6114be8361146d565b91506114cc6020840161146d565b90509250929050565b6000806000606084860312156114e9578081fd5b6114f28461146d565b92506115006020850161146d565b9150604084013590509250925092565b60008060008060808587031215611525578081fd5b61152e8561146d565b935061153c6020860161146d565b925060408501359150606085013567ffffffffffffffff8082111561155f578283fd5b818701915087601f830112611572578283fd5b81358181111561158457611584611911565b604051601f8201601f19908116603f011681019083821181831017156115ac576115ac611911565b816040528281528a60208487010111156115c4578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156115f7578182fd5b6116008361146d565b915060208301358015158114611614578182fd5b809150509250929050565b60008060408385031215611631578182fd5b61163a8361146d565b946020939093013593505050565b60008060006060848603121561165c578283fd5b6116658461146d565b95602085013595506040909401359392505050565b6000806020838503121561168c578182fd5b823567ffffffffffffffff808211156116a3578384fd5b818501915085601f8301126116b6578384fd5b8135818111156116c4578485fd5b8660208260051b85010111156116d8578485fd5b60209290920196919550909350505050565b6000602082840312156116fb578081fd5b8135610c3581611927565b600060208284031215611717578081fd5b8151610c3581611927565b600060208284031215611733578081fd5b5035919050565b600081518084526117528160208601602086016118aa565b601f01601f19169290920160200192915050565b80516001600160a01b0316825260208082015167ffffffffffffffff169083015260408082015115159083015260609081015162ffffff16910152565b600083516117b58184602088016118aa565b8351908301906117c98183602088016118aa565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906118059083018461173a565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610a875761183e838551611766565b928401926080929092019160010161182b565b6020808252825182820181905260009190848201906040850190845b81811015610a875783518352928401929184019160010161186d565b602081526000610c35602083018461173a565b608081016104c58284611766565b60005b838110156118c55781810151838201526020016118ad565b83811115610d165750506000910152565b600181811c908216806118ea57607f821691505b6020821081141561190b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461080257600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122010ff0967693638595fbe5dced1f3574a35fce67d6d82cebc193bd0507fa07b1b64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestERC721AQueryable__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestERC721AQueryable__factory = TestERC721AQueryable__factory;
    TestERC721AQueryable__factory.bytecode = _bytecode;
    TestERC721AQueryable__factory.abi = _abi;

    });

    var TestERC721Enumerable__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestERC721Enumerable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "mint",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "index",
                    type: "uint256",
                },
            ],
            name: "tokenOfOwnerByIndex",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x60806040523480156200001157600080fd5b50604080518082018252601481527f54657374455243373231456e756d657261626c65000000000000000000000000602080830191825283518085019094526003845262464f4f60e81b908401528151919291620000729160009162000101565b5080516200008890600190602084019062000101565b505050620000a56200009f620000ab60201b60201c565b620000af565b620001e4565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010f90620001a7565b90600052602060002090601f0160209004810192826200013357600085556200017e565b82601f106200014e57805160ff19168380011785556200017e565b828001600101855582156200017e579182015b828111156200017e57825182559160200191906001019062000161565b506200018c92915062000190565b5090565b5b808211156200018c576000815560010162000191565b600181811c90821680620001bc57607f821691505b60208210811415620001de57634e487b7160e01b600052602260045260246000fd5b50919050565b6119e180620001f46000396000f3fe60806040526004361061011f5760003560e01c80636352211e116100a0578063a22cb46511610064578063a22cb46514610304578063b88d4fde14610324578063c87b56dd14610344578063e985e9c514610364578063f2fde38b146103ad57600080fd5b80636352211e1461027c57806370a082311461029c578063715018a6146102bc5780638da5cb5b146102d157806395d89b41146102ef57600080fd5b806318160ddd116100e757806318160ddd146101dd57806323b872dd146101fc5780632f745c591461021c57806342842e0e1461023c5780634f6ccce71461025c57600080fd5b806301ffc9a71461012457806306fdde0314610159578063081812fc1461017b578063095ea7b3146101b35780631249c58b146101d5575b600080fd5b34801561013057600080fd5b5061014461013f3660046116df565b6103cd565b60405190151581526020015b60405180910390f35b34801561016557600080fd5b5061016e6103de565b60405161015091906117c7565b34801561018757600080fd5b5061019b610196366004611717565b610470565b6040516001600160a01b039091168152602001610150565b3480156101bf57600080fd5b506101d36101ce3660046116b6565b610497565b005b6101d36105b2565b3480156101e957600080fd5b506008545b604051908152602001610150565b34801561020857600080fd5b506101d361021736600461156c565b6105da565b34801561022857600080fd5b506101ee6102373660046116b6565b61060b565b34801561024857600080fd5b506101d361025736600461156c565b6106a1565b34801561026857600080fd5b506101ee610277366004611717565b6106bc565b34801561028857600080fd5b5061019b610297366004611717565b61075d565b3480156102a857600080fd5b506101ee6102b7366004611520565b6107bd565b3480156102c857600080fd5b506101d3610843565b3480156102dd57600080fd5b50600a546001600160a01b031661019b565b3480156102fb57600080fd5b5061016e610857565b34801561031057600080fd5b506101d361031f36600461167c565b610866565b34801561033057600080fd5b506101d361033f3660046115a7565b610875565b34801561035057600080fd5b5061016e61035f366004611717565b6108ad565b34801561037057600080fd5b5061014461037f36600461153a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156103b957600080fd5b506101d36103c8366004611520565b610939565b60006103d8826109af565b92915050565b6060600080546103ed906118e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610419906118e9565b80156104665780601f1061043b57610100808354040283529160200191610466565b820191906000526020600020905b81548152906001019060200180831161044957829003601f168201915b5050505050905090565b600061047b826109d4565b506000908152600460205260409020546001600160a01b031690565b60006104a28261075d565b9050806001600160a01b0316836001600160a01b031614156105155760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105315750610531813361037f565b6105a35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000606482015260840161050c565b6105ad8383610a33565b505050565b60006105bd600b5490565b90506105cd600b80546001019055565b6105d73382610aa1565b50565b6105e43382610abb565b6106005760405162461bcd60e51b815260040161050c9061182c565b6105ad838383610b3a565b6000610616836107bd565b82106106785760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161050c565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6105ad83838360405180602001604052806000815250610875565b60006106c760085490565b821061072a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161050c565b6008828154811061074b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806103d85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161050c565b60006001600160a01b0382166108275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161050c565b506001600160a01b031660009081526003602052604090205490565b61084b610ce1565b6108556000610d3b565b565b6060600180546103ed906118e9565b610871338383610d8d565b5050565b61087f3383610abb565b61089b5760405162461bcd60e51b815260040161050c9061182c565b6108a784848484610e5c565b50505050565b60606108b8826109d4565b60006108e760408051808201909152601081526f68747470733a2f2f666f6f2e78797a2f60801b602082015290565b905060008151116109075760405180602001604052806000815250610932565b8061091184610e8f565b60405160200161092292919061175b565b6040516020818303038152906040525b9392505050565b610941610ce1565b6001600160a01b0381166109a65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050c565b6105d781610d3b565b60006001600160e01b0319821663780e9d6360e01b14806103d857506103d882610fa9565b6000818152600260205260409020546001600160a01b03166105d75760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161050c565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610a688261075d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610871828260405180602001604052806000815250610ff9565b600080610ac78361075d565b9050806001600160a01b0316846001600160a01b03161480610b0e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610b325750836001600160a01b0316610b2784610470565b6001600160a01b0316145b949350505050565b826001600160a01b0316610b4d8261075d565b6001600160a01b031614610bb15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b606482015260840161050c565b6001600160a01b038216610c135760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161050c565b610c1e83838361102c565b610c29600082610a33565b6001600160a01b0383166000908152600360205260408120805460019290610c529084906118a6565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c8090849061187a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b031633146108555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050c565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415610def5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161050c565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e67848484610b3a565b610e7384848484611037565b6108a75760405162461bcd60e51b815260040161050c906117da565b606081610eb35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610edd5780610ec781611924565b9150610ed69050600a83611892565b9150610eb7565b60008167ffffffffffffffff811115610f0657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f30576020820181803683370190505b5090505b8415610b3257610f456001836118a6565b9150610f52600a8661193f565b610f5d90603061187a565b60f81b818381518110610f8057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610fa2600a86611892565b9450610f34565b60006001600160e01b031982166380ac58cd60e01b1480610fda57506001600160e01b03198216635b5e139f60e01b145b806103d857506301ffc9a760e01b6001600160e01b03198316146103d8565b6110038383611144565b6110106000848484611037565b6105ad5760405162461bcd60e51b815260040161050c906117da565b6105ad838383611292565b60006001600160a01b0384163b1561113957604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061107b90339089908890889060040161178a565b602060405180830381600087803b15801561109557600080fd5b505af19250505080156110c5575060408051601f3d908101601f191682019092526110c2918101906116fb565b60015b61111f573d8080156110f3576040519150601f19603f3d011682016040523d82523d6000602084013e6110f8565b606091505b5080516111175760405162461bcd60e51b815260040161050c906117da565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b32565b506001949350505050565b6001600160a01b03821661119a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161050c565b6000818152600260205260409020546001600160a01b0316156111ff5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161050c565b61120b6000838361102c565b6001600160a01b038216600090815260036020526040812080546001929061123490849061187a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0383166112ed576112e881600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611310565b816001600160a01b0316836001600160a01b03161461131057611310838261134a565b6001600160a01b038216611327576105ad816113e7565b826001600160a01b0316826001600160a01b0316146105ad576105ad82826114c0565b60006001611357846107bd565b61136191906118a6565b6000838152600760205260409020549091508082146113b4576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906113f9906001906118a6565b6000838152600960205260408120546008805493945090928490811061142f57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061145e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806114a457634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006114cb836107bd565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b80356001600160a01b038116811461151b57600080fd5b919050565b600060208284031215611531578081fd5b61093282611504565b6000806040838503121561154c578081fd5b61155583611504565b915061156360208401611504565b90509250929050565b600080600060608486031215611580578081fd5b61158984611504565b925061159760208501611504565b9150604084013590509250925092565b600080600080608085870312156115bc578081fd5b6115c585611504565b93506115d360208601611504565b925060408501359150606085013567ffffffffffffffff808211156115f6578283fd5b818701915087601f830112611609578283fd5b81358181111561161b5761161b61197f565b604051601f8201601f19908116603f011681019083821181831017156116435761164361197f565b816040528281528a602084870101111561165b578586fd5b82602086016020830137918201602001949094529598949750929550505050565b6000806040838503121561168e578182fd5b61169783611504565b9150602083013580151581146116ab578182fd5b809150509250929050565b600080604083850312156116c8578182fd5b6116d183611504565b946020939093013593505050565b6000602082840312156116f0578081fd5b813561093281611995565b60006020828403121561170c578081fd5b815161093281611995565b600060208284031215611728578081fd5b5035919050565b600081518084526117478160208601602086016118bd565b601f01601f19169290920160200192915050565b6000835161176d8184602088016118bd565b8351908301906117818183602088016118bd565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906117bd9083018461172f565b9695505050505050565b602081526000610932602083018461172f565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6000821982111561188d5761188d611953565b500190565b6000826118a1576118a1611969565b500490565b6000828210156118b8576118b8611953565b500390565b60005b838110156118d85781810151838201526020016118c0565b838111156108a75750506000910152565b600181811c908216806118fd57607f821691505b6020821081141561191e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561193857611938611953565b5060010190565b60008261194e5761194e611969565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146105d757600080fdfea264697066735822122046d37372844bc355adf8aa001fe0257401e477a529f096887927aaec6b3a93eb64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestERC721Enumerable__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestERC721Enumerable__factory = TestERC721Enumerable__factory;
    TestERC721Enumerable__factory.bytecode = _bytecode;
    TestERC721Enumerable__factory.abi = _abi;

    });

    var TestTablelandController__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTablelandController__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ERC721AQueryablePoliciesUnauthorized",
            type: "error",
        },
        {
            inputs: [],
            name: "ERC721EnumerablePoliciesUnauthorized",
            type: "error",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "receivedValue",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "requiredValue",
                    type: "uint256",
                },
            ],
            name: "InsufficientValue",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            inputs: [],
            name: "REQUIRED_VALUE",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
            ],
            name: "getPolicy",
            outputs: [
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    internalType: "struct ITablelandController.Policy",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "bars",
                    type: "address",
                },
            ],
            name: "setBars",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "foos",
                    type: "address",
                },
            ],
            name: "setFoos",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610ffc8061007e6000396000f3fe6080604052600436106100705760003560e01c8063898e4aef1161004e578063898e4aef146100d55780638da5cb5b146100ff578063cefd981814610127578063f2fde38b1461014757600080fd5b80633791dc6a14610075578063715018a61461009e57806383f9a5dc146100b5575b600080fd5b610088610083366004610c36565b610167565b6040516100959190610e21565b60405180910390f35b3480156100aa57600080fd5b506100b3610487565b005b3480156100c157600080fd5b506100b36100d0366004610c36565b61049b565b3480156100e157600080fd5b506100f1670de0b6b3a764000081565b604051908152602001610095565b34801561010b57600080fd5b506000546040516001600160a01b039091168152602001610095565b34801561013357600080fd5b506100b3610142366004610c36565b6104c5565b34801561015357600080fd5b506100b3610162366004610c36565b6104ef565b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a082015234670de0b6b3a7640000146101d557604051631c102d6360e21b8152346004820152670de0b6b3a764000060248201526044015b60405180910390fd5b60408051600280825260608201909252600091816020015b60608152602001906001900390816101ed5750506040805160038082526080820190925291925060009190602082015b606081526020019060019003908161021d575050600154604080518082019091526006815265199bdbd7da5960d21b60208201529192506102699186916001600160a01b031690610568565b8260008151811061028a57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506102d384600260009054906101000a90046001600160a01b03166040518060400160405280600681526020016518985c97da5960d21b81525061075a565b826001815181106102f457634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b6060815260200190600190039081610316579050509050604051806040016040528060038152602001623130bd60e91b8152508160008151811061036a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180602001604052806000815250826000815181106103a657634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806007815260200166062617a203e20360cc1b815250826001815181106103f257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806020016040528060008152508260028151811061042e57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060c0016040528060001515815260200160011515815260200160001515815260200161046885610977565b815260200161047684610977565b815260200191909152949350505050565b61048f610a6a565b6104996000610ac4565b565b6104a3610a6a565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6104cd610a6a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6104f7610a6a565b6001600160a01b03811661055c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101cc565b61056581610ac4565b50565b6040516370a0823160e01b81526001600160a01b0384811660048301526060918491600091908316906370a082319060240160206040518083038186803b1580156105b257600080fd5b505afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190610d24565b90508061060a57604051630b61338f60e11b815260040160405180910390fd5b60008460405160200161061d9190610d97565b604051602081830303815290604052905060005b8281101561072d57604051632f745c5960e01b81526001600160a01b038981166004830152602482018390526000916106c591871690632f745c599060440160206040518083038186803b15801561068857600080fd5b505afa15801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190610d24565b610b14565b9050816106f55782816040516020016106df929190610d68565b604051602081830303815290604052925061071a565b8281604051602001610708929190610dc0565b60405160208183030381529060405292505b508061072581610f55565b915050610631565b508060405160200161073f9190610dfc565b60408051808303601f19018152919052979650505050505050565b6040516370a0823160e01b81526001600160a01b0384811660048301526060918491600091908316906370a082319060240160206040518083038186803b1580156107a457600080fd5b505afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190610d24565b9050806107fc57604051633e72a67f60e01b815260040160405180910390fd5b604051632118854760e21b81526001600160a01b03878116600483015260009190841690638462151c9060240160006040518083038186803b15801561084157600080fd5b505afa158015610855573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087d9190810190610c64565b90506000856040516020016108929190610d97565b604051602081830303815290604052905060005b82518110156109495760006108e18483815181106108d457634e487b7160e01b600052603260045260246000fd5b6020026020010151610b14565b9050816109115782816040516020016108fb929190610d68565b6040516020818303038152906040529250610936565b8281604051602001610924929190610dc0565b60405160208183030381529060405292505b508061094181610f55565b9150506108a6565b508060405160200161095b9190610dfc565b60408051808303601f1901815291905298975050505050505050565b60608060005b8351811015610a63578381815181106109a657634e487b7160e01b600052603260045260246000fd5b602002602001015151600014156109bc57610a51565b815115610a0557816040518060400160405280600581526020016401030b732160dd1b8152506040516020016109f3929190610d68565b60405160208183030381529060405291505b81848281518110610a2657634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001610a3f929190610d68565b60405160208183030381529060405291505b80610a5b81610f55565b91505061097d565b5092915050565b6000546001600160a01b031633146104995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101cc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606081610b385750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610b625780610b4c81610f55565b9150610b5b9050600a83610efa565b9150610b3c565b60008167ffffffffffffffff811115610b8b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610bb5576020820181803683370190505b5090505b8415610c2e57610bca600183610f0e565b9150610bd7600a86610f70565b610be2906030610ee2565b60f81b818381518110610c0557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350610c27600a86610efa565b9450610bb9565b949350505050565b600060208284031215610c47578081fd5b81356001600160a01b0381168114610c5d578182fd5b9392505050565b60006020808385031215610c76578182fd5b825167ffffffffffffffff80821115610c8d578384fd5b818501915085601f830112610ca0578384fd5b815181811115610cb257610cb2610fb0565b8060051b604051601f19603f83011681018181108582111715610cd757610cd7610fb0565b604052828152858101935084860182860187018a1015610cf5578788fd5b8795505b83861015610d17578051855260019590950194938601938601610cf9565b5098975050505050505050565b600060208284031215610d35578081fd5b5051919050565b60008151808452610d54816020860160208601610f25565b601f01601f19169290920160200192915050565b60008351610d7a818460208801610f25565b835190830190610d8e818360208801610f25565b01949350505050565b60008251610da9818460208701610f25565b64040d2dc40560db1b920191825250600501919050565b60008351610dd2818460208801610f25565b600b60fa1b9083019081528351610df0816001840160208801610f25565b01600101949350505050565b60008251610e0e818460208701610f25565b602960f81b920191825250600101919050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c06080850152610e6060e0850182610d3c565b90506080850151601f19808684030160a0870152610e7e8383610d3c565b60a0880151878203830160c089015280518083529194508501925084840190600581901b85018601875b82811015610ed45784878303018452610ec2828751610d3c565b95880195938801939150600101610ea8565b509998505050505050505050565b60008219821115610ef557610ef5610f84565b500190565b600082610f0957610f09610f9a565b500490565b600082821015610f2057610f20610f84565b500390565b60005b83811015610f40578181015183820152602001610f28565b83811115610f4f576000848401525b50505050565b6000600019821415610f6957610f69610f84565b5060010190565b600082610f7f57610f7f610f9a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fc1210e5da760c282c719e0101df260088e384e01792f2f6ed6e09cc64aa512a64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestTablelandController__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestTablelandController__factory = TestTablelandController__factory;
    TestTablelandController__factory.bytecode = _bytecode;
    TestTablelandController__factory.abi = _abi;

    });

    var TestTablelandTablesUpgrade__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTablelandTablesUpgrade__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "querySize",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "maxQuerySize",
                    type: "uint256",
                },
            ],
            name: "MaxQuerySizeExceeded",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "Unauthorized",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "previousAdmin",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "newAdmin",
                    type: "address",
                },
            ],
            name: "AdminChanged",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "beacon",
                    type: "address",
                },
            ],
            name: "BeaconUpgraded",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "CreateTable",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Paused",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "isOwner",
                    type: "bool",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    indexed: false,
                    internalType: "struct ITablelandController.Policy",
                    name: "policy",
                    type: "tuple",
                },
            ],
            name: "RunSQL",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "controller",
                    type: "address",
                },
            ],
            name: "SetController",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "TransferTable",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Unpaused",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "implementation",
                    type: "address",
                },
            ],
            name: "Upgraded",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            name: "createTable",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "getController",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "baseURI",
                    type: "string",
                },
            ],
            name: "initialize",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "lockController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "pause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "paused",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "proxiableUUID",
            outputs: [
                {
                    internalType: "bytes32",
                    name: "",
                    type: "bytes32",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "runSQL",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            name: "setBaseURI",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            name: "setController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "unpause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
            ],
            name: "upgradeTo",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "upgradeToAndCall",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
    ];
    const _bytecode = "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c612ee461005260003960008181610a2a01528181610a7301528181610b4701528181610b870152610c160152612ee46000f3fe6080604052600436106101f95760003560e01c80636352211e1161010d57806399a2557a116100a0578063c87b56dd1161006f578063c87b56dd1461058a578063e985e9c5146105aa578063eaf5d04e146105ca578063f2fde38b146105dd578063f62d1888146105fd57600080fd5b806399a2557a146104fd578063a22cb4651461051d578063b88d4fde1461053d578063c23dc68f1461055d57600080fd5b80638462151c116100dc5780638462151c1461047d5780638bb0ab97146104aa5780638da5cb5b146104ca57806395d89b41146104e857600080fd5b80636352211e1461042857806370a0823114610448578063715018a6146104685780638456cb591461034557600080fd5b80633a9151b01161019057806352d1902d1161015f57806352d1902d1461038d57806355f804b3146103a257806358edaa9c146103c25780635bbb2177146103e35780635c975abb1461041057600080fd5b80633a9151b0146103325780633f4ba83a1461034557806342842e0e1461035a5780634f1ef2861461037a57600080fd5b8063095ea7b3116101cc578063095ea7b3146102af57806318160ddd146102cf57806323b872dd146102f25780633659cfe61461031257600080fd5b806301ffc9a7146101fe578063052956811461023357806306fdde0314610255578063081812fc14610277575b600080fd5b34801561020a57600080fd5b5061021e610219366004612811565b61061d565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e3660046126a0565b61066f565b005b34801561026157600080fd5b5061026a61067b565b60405161022a9190612bcf565b34801561028357600080fd5b5061029761029236600461295c565b610716565b6040516001600160a01b03909116815260200161022a565b3480156102bb57600080fd5b506102536102ca3660046126a0565b610763565b3480156102db57600080fd5b506102e4610811565b60405190815260200161022a565b3480156102fe57600080fd5b5061025361030d36600461257f565b610830565b34801561031e57600080fd5b5061025361032d366004612533565b610a1f565b6102e4610340366004612655565b610b08565b34801561035157600080fd5b50610253610b12565b34801561036657600080fd5b5061025361037536600461257f565b610b1c565b610253610388366004612655565b610b3c565b34801561039957600080fd5b506102e4610c09565b3480156103ae57600080fd5b506102536103bd366004612849565b610cbc565b3480156103ce57600080fd5b506102976103dd36600461295c565b50600090565b3480156103ef57600080fd5b506104036103fe36600461278a565b610cc4565b60405161022a9190612b55565b34801561041c57600080fd5b5060655460ff1661021e565b34801561043457600080fd5b5061029761044336600461295c565b610db9565b34801561045457600080fd5b506102e4610463366004612533565b610dc4565b34801561047457600080fd5b50610253610e2c565b34801561048957600080fd5b5061049d610498366004612533565b610e3e565b60405161022a9190612b97565b3480156104b657600080fd5b506102536104c53660046126c9565b610f69565b3480156104d657600080fd5b506033546001600160a01b0316610297565b3480156104f457600080fd5b5061026a610f71565b34801561050957600080fd5b5061049d610518366004612758565b610f89565b34801561052957600080fd5b5061025361053836600461261f565b611121565b34801561054957600080fd5b506102536105583660046125ba565b6111c8565b34801561056957600080fd5b5061057d61057836600461295c565b611212565b60405161022a9190612d19565b34801561059657600080fd5b5061026a6105a536600461295c565b61128e565b3480156105b657600080fd5b5061021e6105c536600461254d565b611304565b6102536105d8366004612704565b611341565b3480156105e957600080fd5b506102536105f8366004612533565b61145f565b34801561060957600080fd5b50610253610618366004612849565b6114d5565b60006301ffc9a760e01b6001600160e01b03198316148061064e57506380ac58cd60e01b6001600160e01b03198316145b806106695750635b5e139f60e01b6001600160e01b03198316145b92915050565b610677611771565b5050565b60606106856117b7565b600201805461069390612dd2565b80601f01602080910402602001604051908101604052809291908181526020018280546106bf90612dd2565b801561070c5780601f106106e15761010080835404028352916020019161070c565b820191906000526020600020905b8154815290600101906020018083116106ef57829003601f168201915b5050505050905090565b6000610721826117db565b61073e576040516333d1c03960e21b815260040160405180910390fd5b6107466117b7565b60009283526006016020525060409020546001600160a01b031690565b600061076e82610db9565b9050336001600160a01b038216146107a75761078a8133611304565b6107a7576040516367d9dca160e11b815260040160405180910390fd5b826107b06117b7565b6000848152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551849286811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b60008061081c6117b7565b600101546108286117b7565b540303919050565b600061083b82611817565b9050836001600160a01b0316816001600160a01b03161461086e5760405162a1148160e81b815260040160405180910390fd5b60008061087a8461189e565b9150915061089f818761088a3390565b6001600160a01b039081169116811491141790565b6108ca576108ad8633611304565b6108ca57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166108f157604051633a954ecd60e21b815260040160405180910390fd5b80156108fc57600082555b6109046117b7565b6001600160a01b03871660009081526005919091016020526040902080546000190190556109306117b7565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b176109676117b7565b60008681526004919091016020526040902055600160e11b83166109d657600184016109916117b7565b600082815260049190910160205260409020546109d4576109b06117b7565b5481146109d457836109c06117b7565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a715760405162461bcd60e51b8152600401610a6890612c36565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610aba600080516020612e48833981519152546001600160a01b031690565b6001600160a01b031614610ae05760405162461bcd60e51b8152600401610a6890612c82565b610ae981610cbc565b60408051600080825260208201909252610b05918391906118c6565b50565b6000610669611771565b610b1a611a40565b565b610b37838383604051806020016040528060008152506111c8565b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b855760405162461bcd60e51b8152600401610a6890612c36565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bce600080516020612e48833981519152546001600160a01b031690565b6001600160a01b031614610bf45760405162461bcd60e51b8152600401610a6890612c82565b610bfd82610cbc565b610677828260016118c6565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ca95760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a68565b50600080516020612e4883398151915290565b610b05611a40565b6060816000816001600160401b03811115610cef57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610d4157816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610d0d5790505b50905060005b828114610db057610d7d868683818110610d7157634e487b7160e01b600052603260045260246000fd5b90506020020135611212565b828281518110610d9d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101610d47565b50949350505050565b600061066982611817565b60006001600160a01b038216610ded576040516323d3ad8160e21b815260040160405180910390fd5b6001600160401b03610dfd6117b7565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b610e34611a40565b610b1a6000611a9a565b60606000806000610e4e85610dc4565b90506000816001600160401b03811115610e7857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ea1578160200160208202803683370190505b509050610ece60408051608081018252600080825260208201819052918101829052606081019190915290565b60005b838614610f5d57610ee181611aec565b9150816040015115610ef257610f55565b81516001600160a01b031615610f0757815194505b876001600160a01b0316856001600160a01b03161415610f555780838780600101985081518110610f4857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b600101610ed1565b50909695505050505050565b610b37611771565b6060610f7b6117b7565b600301805461069390612dd2565b6060818310610fab57604051631960ccad60e11b815260040160405180910390fd5b600080610fb6611b33565b905080841115610fc4578093505b6000610fcf87610dc4565b905084861015610fee5785850381811015610fe8578091505b50610ff2565b5060005b6000816001600160401b0381111561101a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611043578160200160208202803683370190505b5090508161105657935061111a92505050565b600061106188611212565b905060008160400151611072575080515b885b8881141580156110845750848714155b1561110e5761109281611aec565b92508260400151156110a357611106565b82516001600160a01b0316156110b857825191505b8a6001600160a01b0316826001600160a01b0316141561110657808488806001019950815181106110f957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b600101611074565b50505092835250909150505b9392505050565b6001600160a01b03821633141561114b5760405163b06307db60e01b815260040160405180910390fd5b806111546117b7565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6111d3848484610830565b6001600160a01b0383163b1561120c576111ef84848484611b43565b61120c576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b604080516080808201835260008083526020808401829052838501829052606080850183905285519384018652828452908301829052938201819052928101929092529061125e611b33565b831061126a5792915050565b61127383611aec565b90508060400151156112855792915050565b61111a83611c3b565b6060611299826117db565b6112b657604051630a14c4b560e41b815260040160405180910390fd5b606080516112d3576040518060200160405280600081525061111a565b806112dd84611c70565b6040516020016112ee9291906129f8565b6040516020818303038152906040529392505050565b600061130e6117b7565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b611349611771565b6002609754141561139c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a68565b60026097556113aa826117db565b15806113d457506001600160a01b0383163314806113d257506033546001600160a01b031633145b155b156113f1576040516282b42960e81b815260040160405180910390fd5b7f6de956d2cb2e161f8c91c6ae7b286358c7458d5ad5e26ea2d55330fbe282839c83846001600160a01b031661142685610db9565b6001600160a01b031614848461143c8888611cbf565b60405161144d959493929190612a64565b60405180910390a15050600160975550565b611467611a40565b6001600160a01b0381166114cc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a68565b610b0581611a9a565b600080516020612e8f83398151915254610100900460ff1661150a57600080516020612e8f8339815191525460ff161561150e565b303b155b6115805760405162461bcd60e51b815260206004820152603760248201527f455243373231415f5f496e697469616c697a61626c653a20636f6e747261637460448201527f20697320616c726561647920696e697469616c697a65640000000000000000006064820152608401610a68565b600080516020612e8f83398151915254610100900460ff161580156115bc57600080516020612e8f833981519152805461ffff19166101011790555b600054610100900460ff16158080156115dc5750600054600160ff909116105b806115f65750303b1580156115f6575060005460ff166001145b6116595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a68565b6000805460ff19166001179055801561167c576000805461ff0019166101001790555b6116cb6040518060400160405280601081526020016f5461626c656c616e64205461626c657360801b815250604051806040016040528060058152602001645441424c4560d81b815250611e55565b6116d3611e93565b6116db611ecf565b6116e3611efe565b6116eb611f2d565b6116f3611f5c565b82516117079061012d906020860190612340565b50801561174e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b508015610677575050600080516020612e8f833981519152805461ff0019169055565b60655460ff1615610b1a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a68565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4090565b60006117e56117b7565b54821080156106695750600160e01b6117fc6117b7565b60008481526004919091016020526040902054161592915050565b6000816118226117b7565b548110156118855760006118346117b7565b600083815260049190910160205260409020549050600160e01b8116611883575b8061111a576118626117b7565b60001990920160008181526004939093016020526040909220549050611855565b505b604051636f96cda160e11b815260040160405180910390fd5b60008060006118ab6117b7565b60009485526006016020525050604090912080549092909150565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118f957610b3783611f83565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561193257600080fd5b505afa925050508015611962575060408051601f3d908101601f1916820190925261195f918101906127f9565b60015b6119c55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a68565b600080516020612e488339815191528114611a345760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a68565b50610b3783838361201f565b6033546001600160a01b03163314610b1a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a68565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516080810182526000808252602082018190529181018290526060810191909152610669611b1b6117b7565b60008481526004919091016020526040902054612044565b6000611b3d6117b7565b54919050565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611b78903390899088908890600401612a27565b602060405180830381600087803b158015611b9257600080fd5b505af1925050508015611bc2575060408051601f3d908101601f19168201909252611bbf9181019061282d565b60015b611c1d573d808015611bf0576040519150601f19603f3d011682016040523d82523d6000602084013e611bf5565b606091505b508051611c15576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b604080516080810182526000808252602082018190529181018290526060810191909152610669611c6b83611817565b612044565b604080516080810191829052607f0190826030600a8206018353600a90045b8015611cad57600183039250600a81066030018353600a9004611c8f565b50819003601f19909101908152919050565b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a0820152600082815261012e60205260409020546001600160a01b0316803b15611d9957604051631bc8ee3560e11b81526001600160a01b038581166004830152821690633791dc6a9034906024016000604051808303818588803b158015611d5457600080fd5b505af1158015611d68573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f19168201604052611d91919081019061287b565b915050610669565b6001600160a01b0381161580611dc05750836001600160a01b0316816001600160a01b0316145b611ddc576040516282b42960e81b815260040160405180910390fd5b6040805160c081018252600180825260208083018290528284019190915282518082018452600080825260608401919091528351808301855281815260808401528351818152918201909352909160a083019190611e4a565b6060815260200190600190039081611e355790505b509052949350505050565b600080516020612e8f83398151915254610100900460ff16611e895760405162461bcd60e51b8152600401610a6890612be2565b610677828261208b565b600080516020612e8f83398151915254610100900460ff16611ec75760405162461bcd60e51b8152600401610a6890612be2565b610b1a61210e565b600054610100900460ff16611ef65760405162461bcd60e51b8152600401610a6890612cce565b610b1a612142565b600054610100900460ff16611f255760405162461bcd60e51b8152600401610a6890612cce565b610b1a612172565b600054610100900460ff16611f545760405162461bcd60e51b8152600401610a6890612cce565b610b1a6121a5565b600054610100900460ff16610b1a5760405162461bcd60e51b8152600401610a6890612cce565b6001600160a01b0381163b611ff05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a68565b600080516020612e4883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612028836121d3565b6000825111806120355750805b15610b375761120c8383612213565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b600080516020612e8f83398151915254610100900460ff166120bf5760405162461bcd60e51b8152600401610a6890612be2565b816120c86117b7565b60020190805190602001906120de929190612340565b50806120e86117b7565b60030190805190602001906120fe929190612340565b5060006121096117b7565b555050565b600080516020612e8f83398151915254610100900460ff16610b1a5760405162461bcd60e51b8152600401610a6890612be2565b600054610100900460ff166121695760405162461bcd60e51b8152600401610a6890612cce565b610b1a33611a9a565b600054610100900460ff166121995760405162461bcd60e51b8152600401610a6890612cce565b6065805460ff19169055565b600054610100900460ff166121cc5760405162461bcd60e51b8152600401610a6890612cce565b6001609755565b6121dc81611f83565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61227b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a68565b600080846001600160a01b03168460405161229691906129dc565b600060405180830381855af49150503d80600081146122d1576040519150601f19603f3d011682016040523d82523d6000602084013e6122d6565b606091505b50915091506122fe8282604051806060016040528060278152602001612e6860279139612307565b95945050505050565b6060831561231657508161111a565b8251156123265782518084602001fd5b8160405162461bcd60e51b8152600401610a689190612bcf565b82805461234c90612dd2565b90600052602060002090601f01602090048101928261236e57600085556123b4565b82601f1061238757805160ff19168380011785556123b4565b828001600101855582156123b4579182015b828111156123b4578251825591602001919060010190612399565b506123c09291506123c4565b5090565b5b808211156123c057600081556001016123c5565b80356001600160a01b03811681146123f057600080fd5b919050565b600082601f830112612405578081fd5b815160206001600160401b038083111561242157612421612e0d565b8260051b612430838201612d4f565b8481528381019087850183890186018a101561244a578788fd5b8793505b8684101561248757805185811115612464578889fd5b6124728b88838d01016124f0565b8452506001939093019291850191850161244e565b5098975050505050505050565b80516123f081612e23565b600082601f8301126124af578081fd5b81356124c26124bd82612d7f565b612d4f565b8181528460208386010111156124d6578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612500578081fd5b815161250e6124bd82612d7f565b818152846020838601011115612522578283fd5b611c33826020830160208701612da6565b600060208284031215612544578081fd5b61111a826123d9565b6000806040838503121561255f578081fd5b612568836123d9565b9150612576602084016123d9565b90509250929050565b600080600060608486031215612593578081fd5b61259c846123d9565b92506125aa602085016123d9565b9150604084013590509250925092565b600080600080608085870312156125cf578081fd5b6125d8856123d9565b93506125e6602086016123d9565b92506040850135915060608501356001600160401b03811115612607578182fd5b6126138782880161249f565b91505092959194509250565b60008060408385031215612631578182fd5b61263a836123d9565b9150602083013561264a81612e23565b809150509250929050565b60008060408385031215612667578182fd5b612670836123d9565b915060208301356001600160401b0381111561268a578182fd5b6126968582860161249f565b9150509250929050565b600080604083850312156126b2578182fd5b6126bb836123d9565b946020939093013593505050565b6000806000606084860312156126dd578081fd5b6126e6846123d9565b9250602084013591506126fb604085016123d9565b90509250925092565b600080600060608486031215612718578081fd5b612721846123d9565b92506020840135915060408401356001600160401b03811115612742578182fd5b61274e8682870161249f565b9150509250925092565b60008060006060848603121561276c578081fd5b612775846123d9565b95602085013595506040909401359392505050565b6000806020838503121561279c578182fd5b82356001600160401b03808211156127b2578384fd5b818501915085601f8301126127c5578384fd5b8135818111156127d3578485fd5b8660208260051b85010111156127e7578485fd5b60209290920196919550909350505050565b60006020828403121561280a578081fd5b5051919050565b600060208284031215612822578081fd5b813561111a81612e31565b60006020828403121561283e578081fd5b815161111a81612e31565b60006020828403121561285a578081fd5b81356001600160401b0381111561286f578182fd5b611c338482850161249f565b60006020828403121561288c578081fd5b81516001600160401b03808211156128a2578283fd5b9083019060c082860312156128b5578283fd5b6128bd612d27565b6128c683612494565b81526128d460208401612494565b60208201526128e560408401612494565b60408201526060830151828111156128fb578485fd5b612907878286016124f0565b60608301525060808301518281111561291e578485fd5b61292a878286016124f0565b60808301525060a083015182811115612941578485fd5b61294d878286016123f5565b60a08301525095945050505050565b60006020828403121561296d578081fd5b5035919050565b6000815180845261298c816020860160208601612da6565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b600082516129ee818460208701612da6565b9190910192915050565b60008351612a0a818460208801612da6565b835190830190612a1e818360208801612da6565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a5a90830184612974565b9695505050505050565b60018060a01b0386168152600060208615158184015285604084015260a06060840152612a9460a0840186612974565b838103608085015284511515815281850151151582820152604085015115156040820152606085015160c06060830152612ad160c0830182612974565b905060808601518282036080840152612aea8282612974565b91505060a086015182820360a084015281925080518083528483019350848160051b8401018583019250865b82811015612b4457601f19858303018652612b32828551612974565b95870195938701939150600101612b16565b509c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015610f5d57612b848385516129a0565b9284019260809290920191600101612b71565b6020808252825182820181905260009190848201906040850190845b81811015610f5d57835183529284019291840191600101612bb3565b60208152600061111a6020830184612974565b60208082526034908201527f455243373231415f5f496e697469616c697a61626c653a20636f6e7472616374604082015273206973206e6f7420696e697469616c697a696e6760601b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6080810161066982846129a0565b60405160c081016001600160401b0381118282101715612d4957612d49612e0d565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612d7757612d77612e0d565b604052919050565b60006001600160401b03821115612d9857612d98612e0d565b50601f01601f191660200190565b60005b83811015612dc1578181015183820152602001612da9565b8381111561120c5750506000910152565b600181811c90821680612de657607f821691505b60208210811415612e0757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b8015158114610b0557600080fd5b6001600160e01b031981168114610b0557600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ee151c8401928dc223602bb187aff91b9a56c7cae5476ef1b3287b085a16c85fa26469706673582212207dde4d0d91d13e55f01db9d9693ec3f0777cfbcdc54845bc3e0b303bb41c0d4264736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TestTablelandTablesUpgrade__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TestTablelandTablesUpgrade__factory = TestTablelandTablesUpgrade__factory;
    TestTablelandTablesUpgrade__factory.bytecode = _bytecode;
    TestTablelandTablesUpgrade__factory.abi = _abi;

    });

    var test = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TestTablelandTablesUpgrade__factory = exports.TestTablelandController__factory = exports.TestERC721Enumerable__factory = exports.TestERC721AQueryable__factory = exports.TestCreateFromContract__factory = exports.TestAllowAllTablelandController__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "TestAllowAllTablelandController__factory", { enumerable: true, get: function () { return TestAllowAllTablelandController__factory_1.TestAllowAllTablelandController__factory; } });

    Object.defineProperty(exports, "TestCreateFromContract__factory", { enumerable: true, get: function () { return TestCreateFromContract__factory_1.TestCreateFromContract__factory; } });

    Object.defineProperty(exports, "TestERC721AQueryable__factory", { enumerable: true, get: function () { return TestERC721AQueryable__factory_1.TestERC721AQueryable__factory; } });

    Object.defineProperty(exports, "TestERC721Enumerable__factory", { enumerable: true, get: function () { return TestERC721Enumerable__factory_1.TestERC721Enumerable__factory; } });

    Object.defineProperty(exports, "TestTablelandController__factory", { enumerable: true, get: function () { return TestTablelandController__factory_1.TestTablelandController__factory; } });

    Object.defineProperty(exports, "TestTablelandTablesUpgrade__factory", { enumerable: true, get: function () { return TestTablelandTablesUpgrade__factory_1.TestTablelandTablesUpgrade__factory; } });

    });

    var TablelandDeployments__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TablelandDeployments__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "chainid",
                    type: "uint256",
                },
            ],
            name: "ChainNotSupported",
            type: "error",
        },
    ];
    const _bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208628b49133289e765ec02508aac4e7075b849476ad689e7963fcc22e7143f49264736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TablelandDeployments__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TablelandDeployments__factory = TablelandDeployments__factory;
    TablelandDeployments__factory.bytecode = _bytecode;
    TablelandDeployments__factory.abi = _abi;

    });

    var URITemplate__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URITemplate__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "string",
                    name: "uriTemplate",
                    type: "string",
                },
            ],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            inputs: [],
            name: "InvalidTemplate",
            type: "error",
        },
    ];
    const _bytecode = "0x6002608081815260e06040529060a05b60608152602001906001900390816200000f57505080516200003a916000916020909101906200064a565b503480156200004857600080fd5b5060405162000f3638038062000f368339810160408190526200006b91620007b3565b62000076816200007d565b5062000a7b565b60408051600280825260608201909252600091816020015b604080518082019091526000808252602082015281526020019060019003908162000095579050509050620000d5826200031a60201b620000091760201c565b81600181518110620000f757634e487b7160e01b600052603260045260246000fd5b6020026020010181905250620001a162000138604051806040016040528060048152602001637b69647d60e01b8152506200031a60201b620000091760201c565b826000815181106200015a57634e487b7160e01b600052603260045260246000fd5b6020026020010151836001815181106200018457634e487b7160e01b600052603260045260246000fd5b60200260200101516200034760201b62000036179092919060201c565b50815181600081518110620001c657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001511480156200020d575080600181518110620001fd57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516000145b156200022c5760405163ec55b8cd60e01b815260040160405180910390fd5b6200026b816000815181106200025257634e487b7160e01b600052603260045260246000fd5b6020026020010151620003fc60201b620000e21760201c565b600080815481106200028d57634e487b7160e01b600052603260045260246000fd5b906000526020600020019080519060200190620002ac929190620006ae565b50620002d3816001815181106200025257634e487b7160e01b600052603260045260246000fd5b6000600181548110620002f657634e487b7160e01b600052603260045260246000fd5b90600052602060002001908051906020019062000315929190620006ae565b505050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b60408051808201909152600080825260208083018290528551868201518651928701516200037693906200047a565b602080870180519186019190915251909150620003949082620009da565b835284516020860151620003a9919062000889565b811415620003bb5760008552620003f3565b83518351620003cb919062000889565b85518690620003dc908390620009da565b9052508351620003ed908262000889565b60208601525b50909392505050565b6060600082600001516001600160401b038111156200042b57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000456576020820181803683370190505b5060208481015185519293509083019162000473918391620005c1565b5092915050565b60008381868511620005a857602085116200054c5760008515620004d1576001620004a7876020620009da565b620004b4906008620009b8565b620004c1906002620008ed565b620004cd9190620009da565b1990505b84518116600087620004e48b8b62000889565b620004f09190620009da565b855190915083165b8281146200053d578186106200052257620005148b8b62000889565b9650505050505050620005b9565b856200052e8162000a31565b965050838651169050620004f8565b859650505050505050620005b9565b508383206000905b620005608689620009da565b8211620005a65785832081811415620005805783945050505050620005b9565b6200058d60018562000889565b93505081806200059d9062000a31565b92505062000554565b505b620005b4878762000889565b925050505b949350505050565b60208110620006015781518352620005db60208462000889565b9250620005ea60208362000889565b9150620005f9602082620009da565b9050620005c1565b6000198115620006375760016200061a836020620009da565b6200062890610100620008ed565b620006349190620009da565b90505b9151835183169219169190911790915250565b8280548282559060005260206000209081019282156200069c579160200282015b828111156200069c57825180516200068b918491602090910190620006ae565b50916020019190600101906200066b565b50620006aa92915062000739565b5090565b828054620006bc90620009f4565b90600052602060002090601f016020900481019282620006e057600085556200072b565b82601f10620006fb57805160ff19168380011785556200072b565b828001600101855582156200072b579182015b828111156200072b5782518255916020019190600101906200070e565b50620006aa9291506200075a565b80821115620006aa57600062000750828262000771565b5060010162000739565b5b80821115620006aa57600081556001016200075b565b5080546200077f90620009f4565b6000825580601f1062000790575050565b601f016020900490600052602060002090810190620007b091906200075a565b50565b60006020808385031215620007c6578182fd5b82516001600160401b0380821115620007dd578384fd5b818501915085601f830112620007f1578384fd5b81518181111562000806576200080662000a65565b604051601f8201601f19908116603f0116810190838211818310171562000831576200083162000a65565b81604052828152888684870101111562000849578687fd5b8693505b828410156200086c57848401860151818501870152928501926200084d565b828411156200087d57868684830101525b98975050505050505050565b600082198211156200089f576200089f62000a4f565b500190565b600181815b80851115620008e5578160001904821115620008c957620008c962000a4f565b80851615620008d757918102915b93841c9390800290620008a9565b509250929050565b6000620008fb838362000902565b9392505050565b6000826200091357506001620009b2565b816200092257506000620009b2565b81600181146200093b5760028114620009465762000966565b6001915050620009b2565b60ff8411156200095a576200095a62000a4f565b50506001821b620009b2565b5060208310610133831016604e8410600b84101617156200098b575081810a620009b2565b620009978383620008a4565b8060001904821115620009ae57620009ae62000a4f565b0290505b92915050565b6000816000190483118215151615620009d557620009d562000a4f565b500290565b600082821015620009ef57620009ef62000a4f565b500390565b600181811c9082168062000a0957607f821691505b6020821081141562000a2b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000a485762000a4862000a4f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6104ab8062000a8b6000396000f3fe6080604052600080fd5b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b604080518082019091526000808252602082015260006100688560000151866020015186600001518760200151610160565b602080870180519186019190915251909150610084908261042d565b83528451602086015161009791906102fd565b8114156100a757600085526100d9565b835183516100b591906102fd565b855186906100c490839061042d565b90525083516100d390826102fd565b60208601525b50909392505050565b60606000826000015167ffffffffffffffff81111561011157634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561013b576020820181803683370190505b50905060006020820190506101598185602001518660000151610283565b5092915050565b6000838186851161026c576020851161021a57600085156101ac57600161018887602061042d565b61019390600861040e565b61019e906002610358565b6101a8919061042d565b1990505b845181166000876101bd8b8b6102fd565b6101c7919061042d565b855190915083165b82811461020c578186106101f4576101e78b8b6102fd565b965050505050505061027b565b856101fe81610444565b9650508386511690506101cf565b85965050505050505061027b565b508383206000905b61022c868961042d565b821161026a5785832081811415610249578394505050505061027b565b6102546001856102fd565b935050818061026290610444565b925050610222565b505b61027687876102fd565b925050505b949350505050565b602081106102bb578151835261029a6020846102fd565b92506102a76020836102fd565b91506102b460208261042d565b9050610283565b60001981156102ea5760016102d183602061042d565b6102dd90610100610358565b6102e7919061042d565b90505b9151835183169219169190911790915250565b600082198211156103105761031061045f565b500190565b600181815b808511156103505781600019048211156103365761033661045f565b8085161561034357918102915b93841c939080029061031a565b509250929050565b6000610364838361036b565b9392505050565b60008261037a57506001610408565b8161038757506000610408565b816001811461039d57600281146103a7576103c3565b6001915050610408565b60ff8411156103b8576103b861045f565b50506001821b610408565b5060208310610133831016604e8410600b84101617156103e6575081810a610408565b6103f08383610315565b80600019048211156104045761040461045f565b0290505b92915050565b60008160001904831182151516156104285761042861045f565b500290565b60008282101561043f5761043f61045f565b500390565b60006000198214156104585761045861045f565b5060010190565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220ebbb533c6531d80cf008d5ae8f20216f12b0008aae7ebf5c76eddd40cc9573fa64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class URITemplate__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(uriTemplate, overrides) {
            return super.deploy(uriTemplate, overrides || {});
        }
        getDeployTransaction(uriTemplate, overrides) {
            return super.getDeployTransaction(uriTemplate, overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.URITemplate__factory = URITemplate__factory;
    URITemplate__factory.bytecode = _bytecode;
    URITemplate__factory.abi = _abi;

    });

    var utils = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.URITemplate__factory = exports.TablelandDeployments__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "TablelandDeployments__factory", { enumerable: true, get: function () { return TablelandDeployments__factory_1.TablelandDeployments__factory; } });

    Object.defineProperty(exports, "URITemplate__factory", { enumerable: true, get: function () { return URITemplate__factory_1.URITemplate__factory; } });

    });

    var ITablelandController__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ITablelandController__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
            ],
            name: "getPolicy",
            outputs: [
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    internalType: "struct ITablelandController.Policy",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
    ];
    class ITablelandController__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ITablelandController__factory = ITablelandController__factory;
    ITablelandController__factory.abi = _abi;

    });

    var ITablelandTables__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ITablelandTables__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "querySize",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "maxQuerySize",
                    type: "uint256",
                },
            ],
            name: "MaxQuerySizeExceeded",
            type: "error",
        },
        {
            inputs: [],
            name: "Unauthorized",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "CreateTable",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "isOwner",
                    type: "bool",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    indexed: false,
                    internalType: "struct ITablelandController.Policy",
                    name: "policy",
                    type: "tuple",
                },
            ],
            name: "RunSQL",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "controller",
                    type: "address",
                },
            ],
            name: "SetController",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "TransferTable",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "createTable",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "getController",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "lockController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "pause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "runSQL",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "baseURI",
                    type: "string",
                },
            ],
            name: "setBaseURI",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    internalType: "address",
                    name: "controller",
                    type: "address",
                },
            ],
            name: "setController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "unpause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ITablelandTables__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ITablelandTables__factory = ITablelandTables__factory;
    ITablelandTables__factory.abi = _abi;

    });

    var TablelandTables__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TablelandTables__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "querySize",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "maxQuerySize",
                    type: "uint256",
                },
            ],
            name: "MaxQuerySizeExceeded",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "Unauthorized",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "previousAdmin",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "newAdmin",
                    type: "address",
                },
            ],
            name: "AdminChanged",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "beacon",
                    type: "address",
                },
            ],
            name: "BeaconUpgraded",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "CreateTable",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint8",
                    name: "version",
                    type: "uint8",
                },
            ],
            name: "Initialized",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "previousOwner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "OwnershipTransferred",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Paused",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "isOwner",
                    type: "bool",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
                {
                    components: [
                        {
                            internalType: "bool",
                            name: "allowInsert",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowUpdate",
                            type: "bool",
                        },
                        {
                            internalType: "bool",
                            name: "allowDelete",
                            type: "bool",
                        },
                        {
                            internalType: "string",
                            name: "whereClause",
                            type: "string",
                        },
                        {
                            internalType: "string",
                            name: "withCheck",
                            type: "string",
                        },
                        {
                            internalType: "string[]",
                            name: "updatableColumns",
                            type: "string[]",
                        },
                    ],
                    indexed: false,
                    internalType: "struct ITablelandController.Policy",
                    name: "policy",
                    type: "tuple",
                },
            ],
            name: "RunSQL",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "controller",
                    type: "address",
                },
            ],
            name: "SetController",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "TransferTable",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: false,
                    internalType: "address",
                    name: "account",
                    type: "address",
                },
            ],
            name: "Unpaused",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "implementation",
                    type: "address",
                },
            ],
            name: "Upgraded",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "createTable",
            outputs: [
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "getController",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "baseURI",
                    type: "string",
                },
            ],
            name: "initialize",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
            ],
            name: "lockController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "owner",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "pause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "paused",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "proxiableUUID",
            outputs: [
                {
                    internalType: "bytes32",
                    name: "",
                    type: "bytes32",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "renounceOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    internalType: "string",
                    name: "statement",
                    type: "string",
                },
            ],
            name: "runSQL",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "string",
                    name: "baseURI",
                    type: "string",
                },
            ],
            name: "setBaseURI",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "caller",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tableId",
                    type: "uint256",
                },
                {
                    internalType: "address",
                    name: "controller",
                    type: "address",
                },
            ],
            name: "setController",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newOwner",
                    type: "address",
                },
            ],
            name: "transferOwnership",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [],
            name: "unpause",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
            ],
            name: "upgradeTo",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "newImplementation",
                    type: "address",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "upgradeToAndCall",
            outputs: [],
            stateMutability: "payable",
            type: "function",
        },
    ];
    const _bytecode = "0x60a06040523060601b60805234801561001757600080fd5b5060805160601c61357761005260003960008181610b4701528181610b9001528181610cc201528181610d020152610d9501526135776000f3fe6080604052600436106101f95760003560e01c80636352211e1161010d57806399a2557a116100a0578063c87b56dd1161006f578063c87b56dd146105b5578063e985e9c5146105d5578063eaf5d04e146105f5578063f2fde38b14610608578063f62d18881461062857600080fd5b806399a2557a14610528578063a22cb46514610548578063b88d4fde14610568578063c23dc68f1461058857600080fd5b80638462151c116100dc5780638462151c146104a85780638bb0ab97146104d55780638da5cb5b146104f557806395d89b411461051357600080fd5b80636352211e1461043e57806370a082311461045e578063715018a61461047e5780638456cb591461049357600080fd5b80633a9151b01161019057806352d1902d1161015f57806352d1902d1461038d57806355f804b3146103a257806358edaa9c146103c25780635bbb2177146103f95780635c975abb1461042657600080fd5b80633a9151b0146103325780633f4ba83a1461034557806342842e0e1461035a5780634f1ef2861461037a57600080fd5b8063095ea7b3116101cc578063095ea7b3146102af57806318160ddd146102cf57806323b872dd146102f25780633659cfe61461031257600080fd5b806301ffc9a7146101fe578063052956811461023357806306fdde0314610255578063081812fc14610277575b600080fd5b34801561020a57600080fd5b5061021e610219366004612e7d565b610648565b60405190151581526020015b60405180910390f35b34801561023f57600080fd5b5061025361024e366004612d0c565b61069a565b005b34801561026157600080fd5b5061026a61078a565b60405161022a9190613262565b34801561028357600080fd5b50610297610292366004612fc8565b610825565b6040516001600160a01b03909116815260200161022a565b3480156102bb57600080fd5b506102536102ca366004612d0c565b610872565b3480156102db57600080fd5b506102e4610920565b60405190815260200161022a565b3480156102fe57600080fd5b5061025361030d366004612beb565b610940565b34801561031e57600080fd5b5061025361032d366004612b9f565b610b3c565b6102e4610340366004612cc1565b610c25565b34801561035157600080fd5b50610253610c85565b34801561036657600080fd5b50610253610375366004612beb565b610c97565b610253610388366004612cc1565b610cb7565b34801561039957600080fd5b506102e4610d88565b3480156103ae57600080fd5b506102536103bd366004612eb5565b610e3b565b3480156103ce57600080fd5b506102976103dd366004612fc8565b600090815261012e60205260409020546001600160a01b031690565b34801561040557600080fd5b50610419610414366004612df6565b610e57565b60405161022a91906131e8565b34801561043257600080fd5b5060655460ff1661021e565b34801561044a57600080fd5b50610297610459366004612fc8565b610f4c565b34801561046a57600080fd5b506102e4610479366004612b9f565b610f57565b34801561048a57600080fd5b50610253610fbf565b34801561049f57600080fd5b50610253610fd1565b3480156104b457600080fd5b506104c86104c3366004612b9f565b610fe1565b60405161022a919061322a565b3480156104e157600080fd5b506102536104f0366004612d35565b61110c565b34801561050157600080fd5b506033546001600160a01b0316610297565b34801561051f57600080fd5b5061026a611247565b34801561053457600080fd5b506104c8610543366004612dc4565b61125f565b34801561055457600080fd5b50610253610563366004612c8b565b611405565b34801561057457600080fd5b50610253610583366004612c26565b6114ac565b34801561059457600080fd5b506105a86105a3366004612fc8565b6114f6565b60405161022a91906133ac565b3480156105c157600080fd5b5061026a6105d0366004612fc8565b611583565b3480156105e157600080fd5b5061021e6105f0366004612bb9565b611607565b610253610603366004612d70565b611644565b34801561061457600080fd5b50610253610623366004612b9f565b611793565b34801561063457600080fd5b50610253610643366004612eb5565b611809565b60006301ffc9a760e01b6001600160e01b03198316148061067957506380ac58cd60e01b6001600160e01b03198316145b806106945750635b5e139f60e01b6001600160e01b03198316145b92915050565b6106a2611aa5565b6106ab81611aeb565b6106c7576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382163314806106e857506033546001600160a01b031633145b610704576040516282b42960e81b815260040160405180910390fd5b61070d81610f4c565b6001600160a01b0316826001600160a01b03161461073d576040516282b42960e81b815260040160405180910390fd5b600081815261012f602052604090205460ff161561076d576040516282b42960e81b815260040160405180910390fd5b600090815261012f60205260409020805460ff1916600117905550565b6060610794611b34565b60020180546107a290613465565b80601f01602080910402602001604051908101604052809291908181526020018280546107ce90613465565b801561081b5780601f106107f05761010080835404028352916020019161081b565b820191906000526020600020905b8154815290600101906020018083116107fe57829003601f168201915b5050505050905090565b600061083082611aeb565b61084d576040516333d1c03960e21b815260040160405180910390fd5b610855611b34565b60009283526006016020525060409020546001600160a01b031690565b600061087d82610f4c565b9050336001600160a01b038216146108b6576108998133611607565b6108b6576040516367d9dca160e11b815260040160405180910390fd5b826108bf611b34565b6000848152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551849286811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b6000600161092c611b34565b60010154610938611b34565b540303919050565b600061094b82611b58565b9050836001600160a01b0316816001600160a01b03161461097e5760405162a1148160e81b815260040160405180910390fd5b60008061098a84611be7565b915091506109af818761099a3390565b6001600160a01b039081169116811491141790565b6109da576109bd8633611607565b6109da57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b038516610a0157604051633a954ecd60e21b815260040160405180910390fd5b8015610a0c57600082555b610a14611b34565b6001600160a01b0387166000908152600591909101602052604090208054600019019055610a40611b34565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b17610a77611b34565b60008681526004919091016020526040902055600160e11b8316610ae65760018401610aa1611b34565b60008281526004919091016020526040902054610ae457610ac0611b34565b548114610ae45783610ad0611b34565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b348686866001611c0f565b505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610b8e5760405162461bcd60e51b8152600401610b85906132c9565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bd76000805160206134db833981519152546001600160a01b031690565b6001600160a01b031614610bfd5760405162461bcd60e51b8152600401610b8590613315565b610c0681611c6f565b60408051600080825260208201909252610c2291839190611c77565b50565b6000610c2f611aa5565b610c37611df1565b9050610c44836001611e01565b7ffe0c067afc4fe17adcf4cfa139aabad6dc30dd86dfe39fb2b858961637156cdd838284604051610c77939291906131c1565b60405180910390a192915050565b610c8d611e1b565b610c95611e75565b565b610cb2838383604051806020016040528060008152506114ac565b505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d005760405162461bcd60e51b8152600401610b85906132c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610d496000805160206134db833981519152546001600160a01b031690565b6001600160a01b031614610d6f5760405162461bcd60e51b8152600401610b8590613315565b610d7882611c6f565b610d8482826001611c77565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e285760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b85565b506000805160206134db83398151915290565b610e43611e1b565b8051610d849061012d9060208401906129ac565b6060816000816001600160401b03811115610e8257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ed457816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610ea05790505b50905060005b828114610f4357610f10868683818110610f0457634e487b7160e01b600052603260045260246000fd5b905060200201356114f6565b828281518110610f3057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152600101610eda565b50949350505050565b600061069482611b58565b60006001600160a01b038216610f80576040516323d3ad8160e21b815260040160405180910390fd5b6001600160401b03610f90611b34565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b610fc7611e1b565b610c956000611ec7565b610fd9611e1b565b610c95611f19565b60606000806000610ff185610f57565b90506000816001600160401b0381111561101b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611044578160200160208202803683370190505b50905061107160408051608081018252600080825260208201819052918101829052606081019190915290565b60015b8386146111005761108481611f56565b9150816040015115611095576110f8565b81516001600160a01b0316156110aa57815194505b876001600160a01b0316856001600160a01b031614156110f857808387806001019850815181106110eb57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b600101611074565b50909695505050505050565b611114611aa5565b61111d82611aeb565b611139576040516282b42960e81b815260040160405180910390fd5b6001600160a01b03831633148061115a57506033546001600160a01b031633145b611176576040516282b42960e81b815260040160405180910390fd5b61117f82610f4c565b6001600160a01b0316836001600160a01b0316146111af576040516282b42960e81b815260040160405180910390fd5b600082815261012f602052604090205460ff16156111df576040516282b42960e81b815260040160405180910390fd5b600082815261012e602090815260409182902080546001600160a01b0319166001600160a01b0385169081179091558251858152918201527f64d442926514e7c17643406b529155919979582e13eee1dfe07cbd088ef2033e910160405180910390a1505050565b6060611251611b34565b60030180546107a290613465565b606081831061128157604051631960ccad60e11b815260040160405180910390fd5b60008061128c611df1565b9050600185101561129c57600194505b808411156112a8578093505b60006112b387610f57565b9050848610156112d257858503818110156112cc578091505b506112d6565b5060005b6000816001600160401b038111156112fe57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611327578160200160208202803683370190505b5090508161133a5793506113fe92505050565b6000611345886114f6565b905060008160400151611356575080515b885b8881141580156113685750848714155b156113f25761137681611f56565b9250826040015115611387576113ea565b82516001600160a01b03161561139c57825191505b8a6001600160a01b0316826001600160a01b031614156113ea57808488806001019950815181106113dd57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b600101611358565b50505092835250909150505b9392505050565b6001600160a01b03821633141561142f5760405163b06307db60e01b815260040160405180910390fd5b80611438611b34565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6114b7848484610940565b6001600160a01b0383163b156114f0576114d384848484611f9d565b6114f0576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60408051608081018252600080825260208201819052918101829052606081019190915260408051608081018252600080825260208201819052918101829052606081019190915260018310806115545750611550611df1565b8310155b1561155f5792915050565b61156883611f56565b905080604001511561157a5792915050565b6113fe83612095565b606061158e82611aeb565b6115ab57604051630a14c4b560e41b815260040160405180910390fd5b60006115b56120ca565b90508051600014156115d657604051806020016040528060008152506113fe565b806115e0846120da565b6040516020016115f1929190613064565b6040516020818303038152906040529392505050565b6000611611611b34565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b61164c611aa5565b6002609754141561169f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b85565b60026097556116ad82611aeb565b15806116d757506001600160a01b0383163314806116d557506033546001600160a01b031633145b155b156116f4576040516282b42960e81b815260040160405180910390fd5b80516188b88111156117245760405163287d905760e01b8152600481018290526188b86024820152604401610b85565b7f6de956d2cb2e161f8c91c6ae7b286358c7458d5ad5e26ea2d55330fbe282839c84856001600160a01b031661175986610f4c565b6001600160a01b031614858561176f8989612129565b6040516117809594939291906130d0565b60405180910390a1505060016097555050565b61179b611e1b565b6001600160a01b0381166118005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b85565b610c2281611ec7565b60008051602061352283398151915254610100900460ff1661183e576000805160206135228339815191525460ff1615611842565b303b155b6118b45760405162461bcd60e51b815260206004820152603760248201527f455243373231415f5f496e697469616c697a61626c653a20636f6e747261637460448201527f20697320616c726561647920696e697469616c697a65640000000000000000006064820152608401610b85565b60008051602061352283398151915254610100900460ff161580156118f057600080516020613522833981519152805461ffff19166101011790555b600054610100900460ff16158080156119105750600054600160ff909116105b8061192a5750303b15801561192a575060005460ff166001145b61198d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b85565b6000805460ff1916600117905580156119b0576000805461ff0019166101001790555b6119ff6040518060400160405280601081526020016f5461626c656c616e64205461626c657360801b815250604051806040016040528060058152602001645441424c4560d81b8152506122bf565b611a076122fd565b611a0f612339565b611a17612368565b611a1f612397565b611a276123c6565b8251611a3b9061012d9060208601906129ac565b508015611a82576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b508015610d84575050600080516020613522833981519152805461ff0019169055565b60655460ff1615610c955760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610b85565b600081600111158015611b055750611b01611b34565b5482105b80156106945750600160e01b611b19611b34565b60008481526004919091016020526040902054161592915050565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4090565b60008180600111611bce57611b6b611b34565b54811015611bce576000611b7d611b34565b600083815260049190910160205260409020549050600160e01b8116611bcc575b806113fe57611bab611b34565b60001990920160008181526004939093016020526040909220549050611b9e565b505b604051636f96cda160e11b815260040160405180910390fd5b6000806000611bf4611b34565b60009485526006016020525050604090912080549092909150565b6001600160a01b038416156114f057604080516001600160a01b038087168252851660208201529081018390527f16d5b5d582da969cea3131e89ffbd67ee6b1ebbe2576c7a97e9b852fce946a7f9060600160405180910390a150505050565b610c22611e1b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611caa57610cb2836123ed565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ce357600080fd5b505afa925050508015611d13575060408051601f3d908101601f19168201909252611d1091810190612e65565b60015b611d765760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610b85565b6000805160206134db8339815191528114611de55760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610b85565b50610cb2838383612489565b6000611dfb611b34565b54919050565b610d848282604051806020016040528060008152506124ae565b6033546001600160a01b03163314610c955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b85565b611e7d61252b565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611f21611aa5565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611eaa3390565b604080516080810182526000808252602082018190529181018290526060810191909152610694611f85611b34565b60008481526004919091016020526040902054612574565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611fd2903390899088908890600401613093565b602060405180830381600087803b158015611fec57600080fd5b505af192505050801561201c575060408051601f3d908101601f1916820190925261201991810190612e99565b60015b612077573d80801561204a576040519150601f19603f3d011682016040523d82523d6000602084013e61204f565b606091505b50805161206f576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490505b949350505050565b6040805160808101825260008082526020820181905291810182905260608101919091526106946120c583611b58565b612574565b606061012d80546107a290613465565b604080516080810191829052607f0190826030600a8206018353600a90045b801561211757600183039250600a81066030018353600a90046120f9565b50819003601f19909101908152919050565b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a0820152600082815261012e60205260409020546001600160a01b0316803b1561220357604051631bc8ee3560e11b81526001600160a01b038581166004830152821690633791dc6a9034906024016000604051808303818588803b1580156121be57600080fd5b505af11580156121d2573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f191682016040526121fb9190810190612ee7565b915050610694565b6001600160a01b038116158061222a5750836001600160a01b0316816001600160a01b0316145b612246576040516282b42960e81b815260040160405180910390fd5b6040805160c081018252600180825260208083018290528284019190915282518082018452600080825260608401919091528351808301855281815260808401528351818152918201909352909160a0830191906122b4565b606081526020019060019003908161229f5790505b509052949350505050565b60008051602061352283398151915254610100900460ff166122f35760405162461bcd60e51b8152600401610b8590613275565b610d8482826125bb565b60008051602061352283398151915254610100900460ff166123315760405162461bcd60e51b8152600401610b8590613275565b610c9561263e565b600054610100900460ff166123605760405162461bcd60e51b8152600401610b8590613361565b610c95612672565b600054610100900460ff1661238f5760405162461bcd60e51b8152600401610b8590613361565b610c956126a2565b600054610100900460ff166123be5760405162461bcd60e51b8152600401610b8590613361565b610c956126d5565b600054610100900460ff16610c955760405162461bcd60e51b8152600401610b8590613361565b6001600160a01b0381163b61245a5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b85565b6000805160206134db83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61249283612703565b60008251118061249f5750805b15610cb2576114f08383612743565b6124b88383612837565b6001600160a01b0383163b15610cb25760006124d2611b34565b5490508281035b6124ec6000868380600101945086611f9d565b612509576040516368d2bf6b60e11b815260040160405180910390fd5b8181106124d95781612519611b34565b541461252457600080fd5b5050505050565b60655460ff16610c955760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610b85565b604080516080810182526001600160a01b038316815260a083901c6001600160401b03166020820152600160e01b831615159181019190915260e89190911c606082015290565b60008051602061352283398151915254610100900460ff166125ef5760405162461bcd60e51b8152600401610b8590613275565b816125f8611b34565b600201908051906020019061260e9291906129ac565b5080612618611b34565b600301908051906020019061262e9291906129ac565b506001612639611b34565b555050565b60008051602061352283398151915254610100900460ff16610c955760405162461bcd60e51b8152600401610b8590613275565b600054610100900460ff166126995760405162461bcd60e51b8152600401610b8590613361565b610c9533611ec7565b600054610100900460ff166126c95760405162461bcd60e51b8152600401610b8590613361565b6065805460ff19169055565b600054610100900460ff166126fc5760405162461bcd60e51b8152600401610b8590613361565b6001609755565b61270c816123ed565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6127ab5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610b85565b600080846001600160a01b0316846040516127c69190613048565b600060405180830381855af49150503d8060008114612801576040519150601f19603f3d011682016040523d82523d6000602084013e612806565b606091505b509150915061282e82826040518060600160405280602781526020016134fb60279139612973565b95945050505050565b6000612841611b34565b549050816128625760405163b562e8dd60e01b815260040160405180910390fd5b680100000000000000018202612876611b34565b6001600160a01b038516600081815260059290920160205260409091208054929092019091554260a01b6001841460e11b17176128b1611b34565b600083815260049190910160205260408120919091556001600160a01b0384169083830190839083907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a4600183015b81811461293b57808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600101612903565b508161295957604051622e076360e81b815260040160405180910390fd5b80612962611b34565b5550610cb290506000848385611c0f565b606083156129825750816113fe565b8251156129925782518084602001fd5b8160405162461bcd60e51b8152600401610b859190613262565b8280546129b890613465565b90600052602060002090601f0160209004810192826129da5760008555612a20565b82601f106129f357805160ff1916838001178555612a20565b82800160010185558215612a20579182015b82811115612a20578251825591602001919060010190612a05565b50612a2c929150612a30565b5090565b5b80821115612a2c5760008155600101612a31565b80356001600160a01b0381168114612a5c57600080fd5b919050565b600082601f830112612a71578081fd5b815160206001600160401b0380831115612a8d57612a8d6134a0565b8260051b612a9c8382016133e2565b8481528381019087850183890186018a1015612ab6578788fd5b8793505b86841015612af357805185811115612ad0578889fd5b612ade8b88838d0101612b5c565b84525060019390930192918501918501612aba565b5098975050505050505050565b8051612a5c816134b6565b600082601f830112612b1b578081fd5b8135612b2e612b2982613412565b6133e2565b818152846020838601011115612b42578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112612b6c578081fd5b8151612b7a612b2982613412565b818152846020838601011115612b8e578283fd5b61208d826020830160208701613439565b600060208284031215612bb0578081fd5b6113fe82612a45565b60008060408385031215612bcb578081fd5b612bd483612a45565b9150612be260208401612a45565b90509250929050565b600080600060608486031215612bff578081fd5b612c0884612a45565b9250612c1660208501612a45565b9150604084013590509250925092565b60008060008060808587031215612c3b578081fd5b612c4485612a45565b9350612c5260208601612a45565b92506040850135915060608501356001600160401b03811115612c73578182fd5b612c7f87828801612b0b565b91505092959194509250565b60008060408385031215612c9d578182fd5b612ca683612a45565b91506020830135612cb6816134b6565b809150509250929050565b60008060408385031215612cd3578182fd5b612cdc83612a45565b915060208301356001600160401b03811115612cf6578182fd5b612d0285828601612b0b565b9150509250929050565b60008060408385031215612d1e578182fd5b612d2783612a45565b946020939093013593505050565b600080600060608486031215612d49578081fd5b612d5284612a45565b925060208401359150612d6760408501612a45565b90509250925092565b600080600060608486031215612d84578081fd5b612d8d84612a45565b92506020840135915060408401356001600160401b03811115612dae578182fd5b612dba86828701612b0b565b9150509250925092565b600080600060608486031215612dd8578081fd5b612de184612a45565b95602085013595506040909401359392505050565b60008060208385031215612e08578182fd5b82356001600160401b0380821115612e1e578384fd5b818501915085601f830112612e31578384fd5b813581811115612e3f578485fd5b8660208260051b8501011115612e53578485fd5b60209290920196919550909350505050565b600060208284031215612e76578081fd5b5051919050565b600060208284031215612e8e578081fd5b81356113fe816134c4565b600060208284031215612eaa578081fd5b81516113fe816134c4565b600060208284031215612ec6578081fd5b81356001600160401b03811115612edb578182fd5b61208d84828501612b0b565b600060208284031215612ef8578081fd5b81516001600160401b0380821115612f0e578283fd5b9083019060c08286031215612f21578283fd5b612f296133ba565b612f3283612b00565b8152612f4060208401612b00565b6020820152612f5160408401612b00565b6040820152606083015182811115612f67578485fd5b612f7387828601612b5c565b606083015250608083015182811115612f8a578485fd5b612f9687828601612b5c565b60808301525060a083015182811115612fad578485fd5b612fb987828601612a61565b60a08301525095945050505050565b600060208284031215612fd9578081fd5b5035919050565b60008151808452612ff8816020860160208601613439565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160401b03169083015260408082015115159083015260609081015162ffffff16910152565b6000825161305a818460208701613439565b9190910192915050565b60008351613076818460208801613439565b83519083019061308a818360208801613439565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906130c690830184612fe0565b9695505050505050565b60018060a01b0386168152600060208615158184015285604084015260a0606084015261310060a0840186612fe0565b838103608085015284511515815281850151151582820152604085015115156040820152606085015160c0606083015261313d60c0830182612fe0565b9050608086015182820360808401526131568282612fe0565b91505060a086015182820360a084015281925080518083528483019350848160051b8401018583019250865b828110156131b057601f1985830301865261319e828551612fe0565b95870195938701939150600101613182565b509c9b505050505050505050505050565b60018060a01b038416815282602082015260606040820152600061282e6060830184612fe0565b6020808252825182820181905260009190848201906040850190845b818110156111005761321783855161300c565b9284019260809290920191600101613204565b6020808252825182820181905260009190848201906040850190845b8181101561110057835183529284019291840191600101613246565b6020815260006113fe6020830184612fe0565b60208082526034908201527f455243373231415f5f496e697469616c697a61626c653a20636f6e7472616374604082015273206973206e6f7420696e697469616c697a696e6760601b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60808101610694828461300c565b60405160c081016001600160401b03811182821017156133dc576133dc6134a0565b60405290565b604051601f8201601f191681016001600160401b038111828210171561340a5761340a6134a0565b604052919050565b60006001600160401b0382111561342b5761342b6134a0565b50601f01601f191660200190565b60005b8381101561345457818101518382015260200161343c565b838111156114f05750506000910152565b600181811c9082168061347957607f821691505b6020821081141561349a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b8015158114610c2257600080fd5b6001600160e01b031981168114610c2257600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ee151c8401928dc223602bb187aff91b9a56c7cae5476ef1b3287b085a16c85fa264697066735822122081e7f726673c31bf18667be8444c1b464d0447152689e0ada7244e2f7930753a64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class TablelandTables__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.TablelandTables__factory = TablelandTables__factory;
    TablelandTables__factory.bytecode = _bytecode;
    TablelandTables__factory.abi = _abi;

    });

    var contracts$2 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TablelandTables__factory = exports.ITablelandTables__factory = exports.ITablelandController__factory = exports.utils = exports.test = exports.policies = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.policies = __importStar(policies);
    exports.test = __importStar(test);
    exports.utils = __importStar(utils);

    Object.defineProperty(exports, "ITablelandController__factory", { enumerable: true, get: function () { return ITablelandController__factory_1.ITablelandController__factory; } });

    Object.defineProperty(exports, "ITablelandTables__factory", { enumerable: true, get: function () { return ITablelandTables__factory_1.ITablelandTables__factory; } });

    Object.defineProperty(exports, "TablelandTables__factory", { enumerable: true, get: function () { return TablelandTables__factory_1.TablelandTables__factory; } });

    });

    var ERC721A__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721A__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [
                {
                    internalType: "string",
                    name: "name_",
                    type: "string",
                },
                {
                    internalType: "string",
                    name: "symbol_",
                    type: "string",
                },
            ],
            stateMutability: "nonpayable",
            type: "constructor",
        },
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x60806040523480156200001157600080fd5b5060405162000f9138038062000f918339810160408190526200003491620001c5565b8151620000499060029060208501906200006c565b5080516200005f9060039060208401906200006c565b505060008055506200027f565b8280546200007a906200022c565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b600082601f83011262000123578081fd5b81516001600160401b038082111562000140576200014062000269565b604051601f8301601f19908116603f011681019082821181831017156200016b576200016b62000269565b8160405283815260209250868385880101111562000187578485fd5b8491505b83821015620001aa57858201830151818301840152908201906200018b565b83821115620001bb57848385830101525b9695505050505050565b60008060408385031215620001d8578182fd5b82516001600160401b0380821115620001ef578384fd5b620001fd8683870162000112565b9350602085015191508082111562000213578283fd5b50620002228582860162000112565b9150509250929050565b600181811c908216806200024157607f821691505b602082108114156200026357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610d02806200028f6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d6578063b88d4fde146101e9578063c87b56dd146101fc578063e985e9c51461020f57600080fd5b80636352211e146101a857806370a08231146101bb57806395d89b41146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806318160ddd1461016c57806323b872dd1461018257806342842e0e1461019557600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610b3b565b61024b565b60405190151581526020015b60405180910390f35b61011f61029d565b60405161010e9190610c23565b61013f61013a366004610b73565b61032f565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610b12565b610373565b005b600154600054035b60405190815260200161010e565b61016a6101903660046109c8565b610413565b61016a6101a33660046109c8565b6105a4565b61013f6101b6366004610b73565b6105c4565b6101746101c936600461097c565b6105cf565b61011f61061e565b61016a6101e4366004610ad8565b61062d565b61016a6101f7366004610a03565b6106c3565b61011f61020a366004610b73565b61070d565b61010261021d366004610996565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061027c57506380ac58cd60e01b6001600160e01b03198316145b806102975750635b5e139f60e01b6001600160e01b03198316145b92915050565b6060600280546102ac90610c62565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890610c62565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050905090565b600061033a8261079f565b610357576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b600061037e826105c4565b9050336001600160a01b038216146103b75761039a813361021d565b6103b7576040516367d9dca160e11b815260040160405180910390fd5b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600061041e826107c6565b9050836001600160a01b0316816001600160a01b0316146104515760405162a1148160e81b815260040160405180910390fd5b60008281526006602052604090208054338082146001600160a01b0388169091141761049e57610481863361021d565b61049e57604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166104c557604051633a954ecd60e21b815260040160405180910390fd5b80156104d057600082555b6001600160a01b038681166000908152600560205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260046020526040902055600160e11b831661055b57600184016000818152600460205260409020546105595760005481146105595760008181526004602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6105bf838383604051806020016040528060008152506106c3565b505050565b6000610297826107c6565b60006001600160a01b0382166105f8576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526005602052604090205467ffffffffffffffff1690565b6060600380546102ac90610c62565b6001600160a01b0382163314156106575760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6106ce848484610413565b6001600160a01b0383163b15610707576106ea84848484610827565b610707576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606107188261079f565b61073557604051630a14c4b560e41b815260040160405180910390fd5b600061074c60408051602081019091526000815290565b905080516000141561076d5760405180602001604052806000815250610798565b806107778461091e565b604051602001610788929190610bb7565b6040516020818303038152906040525b9392505050565b6000805482108015610297575050600090815260046020526040902054600160e01b161590565b60008160005481101561080e57600081815260046020526040902054600160e01b811661080c575b806107985750600019016000818152600460205260409020546107ee565b505b604051636f96cda160e11b815260040160405180910390fd5b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061085c903390899088908890600401610be6565b602060405180830381600087803b15801561087657600080fd5b505af19250505080156108a6575060408051601f3d908101601f191682019092526108a391810190610b57565b60015b610901573d8080156108d4576040519150601f19603f3d011682016040523d82523d6000602084013e6108d9565b606091505b5080516108f9576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080019081905280825b600183039250600a81066030018353600a9004806109495761094e565b61092c565b50819003601f19909101908152919050565b80356001600160a01b038116811461097757600080fd5b919050565b60006020828403121561098d578081fd5b61079882610960565b600080604083850312156109a8578081fd5b6109b183610960565b91506109bf60208401610960565b90509250929050565b6000806000606084860312156109dc578081fd5b6109e584610960565b92506109f360208501610960565b9150604084013590509250925092565b60008060008060808587031215610a18578081fd5b610a2185610960565b9350610a2f60208601610960565b925060408501359150606085013567ffffffffffffffff80821115610a52578283fd5b818701915087601f830112610a65578283fd5b813581811115610a7757610a77610c9d565b604051601f8201601f19908116603f01168101908382118183101715610a9f57610a9f610c9d565b816040528281528a6020848701011115610ab7578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610aea578182fd5b610af383610960565b915060208301358015158114610b07578182fd5b809150509250929050565b60008060408385031215610b24578182fd5b610b2d83610960565b946020939093013593505050565b600060208284031215610b4c578081fd5b813561079881610cb3565b600060208284031215610b68578081fd5b815161079881610cb3565b600060208284031215610b84578081fd5b5035919050565b60008151808452610ba3816020860160208601610c36565b601f01601f19169290920160200192915050565b60008351610bc9818460208801610c36565b835190830190610bdd818360208801610c36565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610c1990830184610b8b565b9695505050505050565b6020815260006107986020830184610b8b565b60005b83811015610c51578181015183820152602001610c39565b838111156107075750506000910152565b600181811c90821680610c7657607f821691505b60208210811415610c9757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610cc957600080fd5b5056fea2646970667358221220fe9b47f1495f0db884192fbb6d68965200bca9bfdd190445f017508305c49d4f64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class ERC721A__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(name_, symbol_, overrides) {
            return super.deploy(name_, symbol_, overrides || {});
        }
        getDeployTransaction(name_, symbol_, overrides) {
            return super.getDeployTransaction(name_, symbol_, overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721A__factory = ERC721A__factory;
    ERC721A__factory.bytecode = _bytecode;
    ERC721A__factory.abi = _abi;

    });

    var ERC721A__IERC721Receiver__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721A__IERC721Receiver__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "onERC721Received",
            outputs: [
                {
                    internalType: "bytes4",
                    name: "",
                    type: "bytes4",
                },
            ],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721A__IERC721Receiver__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721A__IERC721Receiver__factory = ERC721A__IERC721Receiver__factory;
    ERC721A__IERC721Receiver__factory.abi = _abi;

    });

    var ERC721A_sol = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721A__IERC721Receiver__factory = exports.ERC721A__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721A__factory", { enumerable: true, get: function () { return ERC721A__factory_1.ERC721A__factory; } });

    Object.defineProperty(exports, "ERC721A__IERC721Receiver__factory", { enumerable: true, get: function () { return ERC721A__IERC721Receiver__factory_1.ERC721A__IERC721Receiver__factory; } });

    });

    var ERC721ABurnable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721ABurnable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "burn",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721ABurnable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721ABurnable__factory = ERC721ABurnable__factory;
    ERC721ABurnable__factory.abi = _abi;

    });

    var ERC721AQueryable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721AQueryable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721AQueryable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721AQueryable__factory = ERC721AQueryable__factory;
    ERC721AQueryable__factory.abi = _abi;

    });

    var IERC721ABurnable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721ABurnable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "burn",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721ABurnable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721ABurnable__factory = IERC721ABurnable__factory;
    IERC721ABurnable__factory.abi = _abi;

    });

    var IERC721AQueryable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AQueryable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721A.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721AQueryable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721AQueryable__factory = IERC721AQueryable__factory;
    IERC721AQueryable__factory.abi = _abi;

    });

    var extensions$1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AQueryable__factory = exports.IERC721ABurnable__factory = exports.ERC721AQueryable__factory = exports.ERC721ABurnable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721ABurnable__factory", { enumerable: true, get: function () { return ERC721ABurnable__factory_1.ERC721ABurnable__factory; } });

    Object.defineProperty(exports, "ERC721AQueryable__factory", { enumerable: true, get: function () { return ERC721AQueryable__factory_1.ERC721AQueryable__factory; } });

    Object.defineProperty(exports, "IERC721ABurnable__factory", { enumerable: true, get: function () { return IERC721ABurnable__factory_1.IERC721ABurnable__factory; } });

    Object.defineProperty(exports, "IERC721AQueryable__factory", { enumerable: true, get: function () { return IERC721AQueryable__factory_1.IERC721AQueryable__factory; } });

    });

    var IERC721A__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721A__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721A__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721A__factory = IERC721A__factory;
    IERC721A__factory.abi = _abi;

    });

    var contracts$1 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721A__factory = exports.extensions = exports.erc721ASol = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.erc721ASol = __importStar(ERC721A_sol);
    exports.extensions = __importStar(extensions$1);

    Object.defineProperty(exports, "IERC721A__factory", { enumerable: true, get: function () { return IERC721A__factory_1.IERC721A__factory; } });

    });

    var erc721a = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contracts = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.contracts = __importStar(contracts$1);

    });

    var ERC721AUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721AUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    const _bytecode = "0x608060405234801561001057600080fd5b50610e7b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb465146101d6578063b88d4fde146101e9578063c87b56dd146101fc578063e985e9c51461020f57600080fd5b80636352211e146101a857806370a08231146101bb57806395d89b41146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806318160ddd1461016c57806323b872dd1461018257806342842e0e1461019557600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd366004610cb4565b610222565b60405190151581526020015b60405180910390f35b61011f610274565b60405161010e9190610d9c565b61013f61013a366004610cec565b61030f565b6040516001600160a01b03909116815260200161010e565b61016a610165366004610c8b565b61035c565b005b61017461040a565b60405190815260200161010e565b61016a610190366004610b41565b610429565b61016a6101a3366004610b41565b610618565b61013f6101b6366004610cec565b610638565b6101746101c9366004610af5565b610643565b61011f6106ac565b61016a6101e4366004610c51565b6106c4565b61016a6101f7366004610b7c565b61076b565b61011f61020a366004610cec565b6107b5565b61010261021d366004610b0f565b610847565b60006301ffc9a760e01b6001600160e01b03198316148061025357506380ac58cd60e01b6001600160e01b03198316145b8061026e5750635b5e139f60e01b6001600160e01b03198316145b92915050565b606061027e610884565b600201805461028c90610ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546102b890610ddb565b80156103055780601f106102da57610100808354040283529160200191610305565b820191906000526020600020905b8154815290600101906020018083116102e857829003601f168201915b5050505050905090565b600061031a826108a8565b610337576040516333d1c03960e21b815260040160405180910390fd5b61033f610884565b60009283526006016020525060409020546001600160a01b031690565b600061036782610638565b9050336001600160a01b038216146103a0576103838133610847565b6103a0576040516367d9dca160e11b815260040160405180910390fd5b826103a9610884565b6000848152600691909101602052604080822080546001600160a01b0319166001600160a01b0394851617905551849286811692908516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a4505050565b600080610415610884565b60010154610421610884565b540303919050565b6000610434826108e4565b9050836001600160a01b0316816001600160a01b0316146104675760405162a1148160e81b815260040160405180910390fd5b6000806104738461096b565b9150915061049881876104833390565b6001600160a01b039081169116811491141790565b6104c3576104a68633610847565b6104c357604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b0385166104ea57604051633a954ecd60e21b815260040160405180910390fd5b80156104f557600082555b6104fd610884565b6001600160a01b0387166000908152600591909101602052604090208054600019019055610529610884565b6001600160a01b03861660008181526005929092016020526040909120805460010190554260a01b17600160e11b17610560610884565b60008681526004919091016020526040902055600160e11b83166105cf576001840161058a610884565b600082815260049190910160205260409020546105cd576105a9610884565b5481146105cd57836105b9610884565b600083815260049190910160205260409020555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6106338383836040518060200160405280600081525061076b565b505050565b600061026e826108e4565b60006001600160a01b03821661066c576040516323d3ad8160e21b815260040160405180910390fd5b67ffffffffffffffff61067d610884565b6005016000846001600160a01b03166001600160a01b0316815260200190815260200160002054169050919050565b60606106b6610884565b600301805461028c90610ddb565b6001600160a01b0382163314156106ee5760405163b06307db60e01b815260040160405180910390fd5b806106f7610884565b336000818152600792909201602090815260408084206001600160a01b03881680865290835293819020805460ff19169515159590951790945592518415158152919290917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610776848484610429565b6001600160a01b0383163b156107af5761079284848484610993565b6107af576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b60606107c0826108a8565b6107dd57604051630a14c4b560e41b815260040160405180910390fd5b60006107f460408051602081019091526000815290565b90508051600014156108155760405180602001604052806000815250610840565b8061081f84610a8a565b604051602001610830929190610d30565b6040516020818303038152906040525b9392505050565b6000610851610884565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205460ff1690565b7f2569078dfb4b0305704d3008e7403993ae9601b85f7ae5e742de3de8f8011c4090565b60006108b2610884565b548210801561026e5750600160e01b6108c9610884565b60008481526004919091016020526040902054161592915050565b6000816108ef610884565b54811015610952576000610901610884565b600083815260049190910160205260409020549050600160e01b8116610950575b806108405761092f610884565b60001990920160008181526004939093016020526040909220549050610922565b505b604051636f96cda160e11b815260040160405180910390fd5b6000806000610978610884565b60009485526006016020525050604090912080549092909150565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906109c8903390899088908890600401610d5f565b602060405180830381600087803b1580156109e257600080fd5b505af1925050508015610a12575060408051601f3d908101601f19168201909252610a0f91810190610cd0565b60015b610a6d573d808015610a40576040519150601f19603f3d011682016040523d82523d6000602084013e610a45565b606091505b508051610a65576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b604080516080810191829052607f0190826030600a8206018353600a90045b8015610ac757600183039250600a81066030018353600a9004610aa9565b50819003601f19909101908152919050565b80356001600160a01b0381168114610af057600080fd5b919050565b600060208284031215610b06578081fd5b61084082610ad9565b60008060408385031215610b21578081fd5b610b2a83610ad9565b9150610b3860208401610ad9565b90509250929050565b600080600060608486031215610b55578081fd5b610b5e84610ad9565b9250610b6c60208501610ad9565b9150604084013590509250925092565b60008060008060808587031215610b91578081fd5b610b9a85610ad9565b9350610ba860208601610ad9565b925060408501359150606085013567ffffffffffffffff80821115610bcb578283fd5b818701915087601f830112610bde578283fd5b813581811115610bf057610bf0610e16565b604051601f8201601f19908116603f01168101908382118183101715610c1857610c18610e16565b816040528281528a6020848701011115610c30578586fd5b82602086016020830137918201602001949094529598949750929550505050565b60008060408385031215610c63578182fd5b610c6c83610ad9565b915060208301358015158114610c80578182fd5b809150509250929050565b60008060408385031215610c9d578182fd5b610ca683610ad9565b946020939093013593505050565b600060208284031215610cc5578081fd5b813561084081610e2c565b600060208284031215610ce1578081fd5b815161084081610e2c565b600060208284031215610cfd578081fd5b5035919050565b60008151808452610d1c816020860160208601610daf565b601f01601f19169290920160200192915050565b60008351610d42818460208801610daf565b835190830190610d56818360208801610daf565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610d9290830184610d04565b9695505050505050565b6020815260006108406020830184610d04565b60005b83811015610dca578181015183820152602001610db2565b838111156107af5750506000910152565b600181811c90821680610def57607f821691505b60208210811415610e1057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610e4257600080fd5b5056fea26469706673582212201fad5e43d41561b194f1b20600c9eba0db9945d725c6739c66e5f5bab43336dd64736f6c63430008040033";
    const isSuperArgs = (xs) => xs.length > 1;
    class ERC721AUpgradeable__factory extends ethers_1.ContractFactory {
        constructor(...args) {
            if (isSuperArgs(args)) {
                super(...args);
            }
            else {
                super(_abi, _bytecode, args[0]);
            }
        }
        deploy(overrides) {
            return super.deploy(overrides || {});
        }
        getDeployTransaction(overrides) {
            return super.getDeployTransaction(overrides || {});
        }
        attach(address) {
            return super.attach(address);
        }
        connect(signer) {
            return super.connect(signer);
        }
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721AUpgradeable__factory = ERC721AUpgradeable__factory;
    ERC721AUpgradeable__factory.bytecode = _bytecode;
    ERC721AUpgradeable__factory.abi = _abi;

    });

    var ERC721A__IERC721ReceiverUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721A__IERC721ReceiverUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "onERC721Received",
            outputs: [
                {
                    internalType: "bytes4",
                    name: "",
                    type: "bytes4",
                },
            ],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721A__IERC721ReceiverUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721A__IERC721ReceiverUpgradeable__factory = ERC721A__IERC721ReceiverUpgradeable__factory;
    ERC721A__IERC721ReceiverUpgradeable__factory.abi = _abi;

    });

    var ERC721AUpgradeable_sol = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721A__IERC721ReceiverUpgradeable__factory = exports.ERC721AUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721AUpgradeable__factory", { enumerable: true, get: function () { return ERC721AUpgradeable__factory_1.ERC721AUpgradeable__factory; } });

    Object.defineProperty(exports, "ERC721A__IERC721ReceiverUpgradeable__factory", { enumerable: true, get: function () { return ERC721A__IERC721ReceiverUpgradeable__factory_1.ERC721A__IERC721ReceiverUpgradeable__factory; } });

    });

    var ERC721AQueryableUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERC721AQueryableUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "_data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class ERC721AQueryableUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.ERC721AQueryableUpgradeable__factory = ERC721AQueryableUpgradeable__factory;
    ERC721AQueryableUpgradeable__factory.abi = _abi;

    });

    var IERC721AQueryableUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AQueryableUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "InvalidQueryRange",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "explicitOwnershipOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership",
                    name: "",
                    type: "tuple",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256[]",
                    name: "tokenIds",
                    type: "uint256[]",
                },
            ],
            name: "explicitOwnershipsOf",
            outputs: [
                {
                    components: [
                        {
                            internalType: "address",
                            name: "addr",
                            type: "address",
                        },
                        {
                            internalType: "uint64",
                            name: "startTimestamp",
                            type: "uint64",
                        },
                        {
                            internalType: "bool",
                            name: "burned",
                            type: "bool",
                        },
                        {
                            internalType: "uint24",
                            name: "extraData",
                            type: "uint24",
                        },
                    ],
                    internalType: "struct IERC721AUpgradeable.TokenOwnership[]",
                    name: "",
                    type: "tuple[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "tokensOfOwner",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "start",
                    type: "uint256",
                },
                {
                    internalType: "uint256",
                    name: "stop",
                    type: "uint256",
                },
            ],
            name: "tokensOfOwnerIn",
            outputs: [
                {
                    internalType: "uint256[]",
                    name: "",
                    type: "uint256[]",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721AQueryableUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721AQueryableUpgradeable__factory = IERC721AQueryableUpgradeable__factory;
    IERC721AQueryableUpgradeable__factory.abi = _abi;

    });

    var extensions = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AQueryableUpgradeable__factory = exports.ERC721AQueryableUpgradeable__factory = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */

    Object.defineProperty(exports, "ERC721AQueryableUpgradeable__factory", { enumerable: true, get: function () { return ERC721AQueryableUpgradeable__factory_1.ERC721AQueryableUpgradeable__factory; } });

    Object.defineProperty(exports, "IERC721AQueryableUpgradeable__factory", { enumerable: true, get: function () { return IERC721AQueryableUpgradeable__factory_1.IERC721AQueryableUpgradeable__factory; } });

    });

    var IERC721AUpgradeable__factory_1 = createCommonjsModule$1(function (module, exports) {
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AUpgradeable__factory = void 0;

    const _abi = [
        {
            inputs: [],
            name: "ApprovalCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "ApprovalQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "ApproveToCaller",
            type: "error",
        },
        {
            inputs: [],
            name: "BalanceQueryForZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintERC2309QuantityExceedsLimit",
            type: "error",
        },
        {
            inputs: [],
            name: "MintToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "MintZeroQuantity",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnerQueryForNonexistentToken",
            type: "error",
        },
        {
            inputs: [],
            name: "OwnershipNotInitializedForExtraData",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferCallerNotOwnerNorApproved",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferFromIncorrectOwner",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToNonERC721ReceiverImplementer",
            type: "error",
        },
        {
            inputs: [],
            name: "TransferToZeroAddress",
            type: "error",
        },
        {
            inputs: [],
            name: "URIQueryForNonexistentToken",
            type: "error",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "approved",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Approval",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    indexed: false,
                    internalType: "bool",
                    name: "approved",
                    type: "bool",
                },
            ],
            name: "ApprovalForAll",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "fromTokenId",
                    type: "uint256",
                },
                {
                    indexed: false,
                    internalType: "uint256",
                    name: "toTokenId",
                    type: "uint256",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
            ],
            name: "ConsecutiveTransfer",
            type: "event",
        },
        {
            anonymous: false,
            inputs: [
                {
                    indexed: true,
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    indexed: true,
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "Transfer",
            type: "event",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "approve",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            name: "balanceOf",
            outputs: [
                {
                    internalType: "uint256",
                    name: "balance",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "getApproved",
            outputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
            ],
            name: "isApprovedForAll",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "name",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "ownerOf",
            outputs: [
                {
                    internalType: "address",
                    name: "owner",
                    type: "address",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
                {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                },
            ],
            name: "safeTransferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "operator",
                    type: "address",
                },
                {
                    internalType: "bool",
                    name: "_approved",
                    type: "bool",
                },
            ],
            name: "setApprovalForAll",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "bytes4",
                    name: "interfaceId",
                    type: "bytes4",
                },
            ],
            name: "supportsInterface",
            outputs: [
                {
                    internalType: "bool",
                    name: "",
                    type: "bool",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "symbol",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "tokenURI",
            outputs: [
                {
                    internalType: "string",
                    name: "",
                    type: "string",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [],
            name: "totalSupply",
            outputs: [
                {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                },
            ],
            stateMutability: "view",
            type: "function",
        },
        {
            inputs: [
                {
                    internalType: "address",
                    name: "from",
                    type: "address",
                },
                {
                    internalType: "address",
                    name: "to",
                    type: "address",
                },
                {
                    internalType: "uint256",
                    name: "tokenId",
                    type: "uint256",
                },
            ],
            name: "transferFrom",
            outputs: [],
            stateMutability: "nonpayable",
            type: "function",
        },
    ];
    class IERC721AUpgradeable__factory {
        static createInterface() {
            return new ethers_1.utils.Interface(_abi);
        }
        static connect(address, signerOrProvider) {
            return new ethers_1.Contract(address, _abi, signerOrProvider);
        }
    }
    exports.IERC721AUpgradeable__factory = IERC721AUpgradeable__factory;
    IERC721AUpgradeable__factory.abi = _abi;

    });

    var contracts = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721AUpgradeable__factory = exports.extensions = exports.erc721AUpgradeableSol = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.erc721AUpgradeableSol = __importStar(ERC721AUpgradeable_sol);
    exports.extensions = __importStar(extensions);

    Object.defineProperty(exports, "IERC721AUpgradeable__factory", { enumerable: true, get: function () { return IERC721AUpgradeable__factory_1.IERC721AUpgradeable__factory; } });

    });

    var erc721aUpgradeable = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.contracts = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.contracts = __importStar(contracts);

    });

    var factories = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.erc721AUpgradeable = exports.erc721A = exports.contracts = exports.openzeppelin = void 0;
    /* Autogenerated file. Do not edit manually. */
    /* tslint:disable */
    /* eslint-disable */
    exports.openzeppelin = __importStar(_openzeppelin);
    exports.contracts = __importStar(contracts$2);
    exports.erc721A = __importStar(erc721a);
    exports.erc721AUpgradeable = __importStar(erc721aUpgradeable);

    });

    var typechainTypes = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    });
    var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IERC721A__factory = exports.IERC721AQueryable__factory = exports.IERC721ABurnable__factory = exports.ERC721AQueryable__factory = exports.ERC721ABurnable__factory = exports.ERC721A__factory = exports.ERC721A__IERC721Receiver__factory = exports.IERC721AUpgradeable__factory = exports.IERC721AQueryableUpgradeable__factory = exports.ERC721AQueryableUpgradeable__factory = exports.ERC721AUpgradeable__factory = exports.ERC721A__IERC721ReceiverUpgradeable__factory = exports.URITemplate__factory = exports.TablelandDeployments__factory = exports.TestTablelandTablesUpgrade__factory = exports.TestTablelandController__factory = exports.TestERC721Enumerable__factory = exports.TestERC721AQueryable__factory = exports.TestCreateFromContract__factory = exports.TestAllowAllTablelandController__factory = exports.TablelandTables__factory = exports.ERC721EnumerablePolicies__factory = exports.ERC721AQueryablePolicies__factory = exports.ITablelandTables__factory = exports.ITablelandController__factory = exports.IERC165__factory = exports.ERC165__factory = exports.IERC721Receiver__factory = exports.IERC721__factory = exports.IERC721Metadata__factory = exports.IERC721Enumerable__factory = exports.ERC721Enumerable__factory = exports.ERC721__factory = exports.Ownable__factory = exports.ContextUpgradeable__factory = exports.ReentrancyGuardUpgradeable__factory = exports.PausableUpgradeable__factory = exports.UUPSUpgradeable__factory = exports.Initializable__factory = exports.ERC1967UpgradeUpgradeable__factory = exports.IBeaconUpgradeable__factory = exports.IERC1822ProxiableUpgradeable__factory = exports.OwnableUpgradeable__factory = exports.factories = void 0;
    exports.factories = __importStar(factories);

    Object.defineProperty(exports, "OwnableUpgradeable__factory", { enumerable: true, get: function () { return OwnableUpgradeable__factory_1.OwnableUpgradeable__factory; } });

    Object.defineProperty(exports, "IERC1822ProxiableUpgradeable__factory", { enumerable: true, get: function () { return IERC1822ProxiableUpgradeable__factory_1.IERC1822ProxiableUpgradeable__factory; } });

    Object.defineProperty(exports, "IBeaconUpgradeable__factory", { enumerable: true, get: function () { return IBeaconUpgradeable__factory_1.IBeaconUpgradeable__factory; } });

    Object.defineProperty(exports, "ERC1967UpgradeUpgradeable__factory", { enumerable: true, get: function () { return ERC1967UpgradeUpgradeable__factory_1.ERC1967UpgradeUpgradeable__factory; } });

    Object.defineProperty(exports, "Initializable__factory", { enumerable: true, get: function () { return Initializable__factory_1.Initializable__factory; } });

    Object.defineProperty(exports, "UUPSUpgradeable__factory", { enumerable: true, get: function () { return UUPSUpgradeable__factory_1.UUPSUpgradeable__factory; } });

    Object.defineProperty(exports, "PausableUpgradeable__factory", { enumerable: true, get: function () { return PausableUpgradeable__factory_1.PausableUpgradeable__factory; } });

    Object.defineProperty(exports, "ReentrancyGuardUpgradeable__factory", { enumerable: true, get: function () { return ReentrancyGuardUpgradeable__factory_1.ReentrancyGuardUpgradeable__factory; } });

    Object.defineProperty(exports, "ContextUpgradeable__factory", { enumerable: true, get: function () { return ContextUpgradeable__factory_1.ContextUpgradeable__factory; } });

    Object.defineProperty(exports, "Ownable__factory", { enumerable: true, get: function () { return Ownable__factory_1.Ownable__factory; } });

    Object.defineProperty(exports, "ERC721__factory", { enumerable: true, get: function () { return ERC721__factory_1.ERC721__factory; } });

    Object.defineProperty(exports, "ERC721Enumerable__factory", { enumerable: true, get: function () { return ERC721Enumerable__factory_1.ERC721Enumerable__factory; } });

    Object.defineProperty(exports, "IERC721Enumerable__factory", { enumerable: true, get: function () { return IERC721Enumerable__factory_1.IERC721Enumerable__factory; } });

    Object.defineProperty(exports, "IERC721Metadata__factory", { enumerable: true, get: function () { return IERC721Metadata__factory_1.IERC721Metadata__factory; } });

    Object.defineProperty(exports, "IERC721__factory", { enumerable: true, get: function () { return IERC721__factory_1.IERC721__factory; } });

    Object.defineProperty(exports, "IERC721Receiver__factory", { enumerable: true, get: function () { return IERC721Receiver__factory_1.IERC721Receiver__factory; } });

    Object.defineProperty(exports, "ERC165__factory", { enumerable: true, get: function () { return ERC165__factory_1.ERC165__factory; } });

    Object.defineProperty(exports, "IERC165__factory", { enumerable: true, get: function () { return IERC165__factory_1.IERC165__factory; } });

    Object.defineProperty(exports, "ITablelandController__factory", { enumerable: true, get: function () { return ITablelandController__factory_1.ITablelandController__factory; } });

    Object.defineProperty(exports, "ITablelandTables__factory", { enumerable: true, get: function () { return ITablelandTables__factory_1.ITablelandTables__factory; } });

    Object.defineProperty(exports, "ERC721AQueryablePolicies__factory", { enumerable: true, get: function () { return ERC721AQueryablePolicies__factory_1.ERC721AQueryablePolicies__factory; } });

    Object.defineProperty(exports, "ERC721EnumerablePolicies__factory", { enumerable: true, get: function () { return ERC721EnumerablePolicies__factory_1.ERC721EnumerablePolicies__factory; } });

    Object.defineProperty(exports, "TablelandTables__factory", { enumerable: true, get: function () { return TablelandTables__factory_1.TablelandTables__factory; } });

    Object.defineProperty(exports, "TestAllowAllTablelandController__factory", { enumerable: true, get: function () { return TestAllowAllTablelandController__factory_1.TestAllowAllTablelandController__factory; } });

    Object.defineProperty(exports, "TestCreateFromContract__factory", { enumerable: true, get: function () { return TestCreateFromContract__factory_1.TestCreateFromContract__factory; } });

    Object.defineProperty(exports, "TestERC721AQueryable__factory", { enumerable: true, get: function () { return TestERC721AQueryable__factory_1.TestERC721AQueryable__factory; } });

    Object.defineProperty(exports, "TestERC721Enumerable__factory", { enumerable: true, get: function () { return TestERC721Enumerable__factory_1.TestERC721Enumerable__factory; } });

    Object.defineProperty(exports, "TestTablelandController__factory", { enumerable: true, get: function () { return TestTablelandController__factory_1.TestTablelandController__factory; } });

    Object.defineProperty(exports, "TestTablelandTablesUpgrade__factory", { enumerable: true, get: function () { return TestTablelandTablesUpgrade__factory_1.TestTablelandTablesUpgrade__factory; } });

    Object.defineProperty(exports, "TablelandDeployments__factory", { enumerable: true, get: function () { return TablelandDeployments__factory_1.TablelandDeployments__factory; } });

    Object.defineProperty(exports, "URITemplate__factory", { enumerable: true, get: function () { return URITemplate__factory_1.URITemplate__factory; } });

    Object.defineProperty(exports, "ERC721A__IERC721ReceiverUpgradeable__factory", { enumerable: true, get: function () { return ERC721A__IERC721ReceiverUpgradeable__factory_1.ERC721A__IERC721ReceiverUpgradeable__factory; } });

    Object.defineProperty(exports, "ERC721AUpgradeable__factory", { enumerable: true, get: function () { return ERC721AUpgradeable__factory_1.ERC721AUpgradeable__factory; } });

    Object.defineProperty(exports, "ERC721AQueryableUpgradeable__factory", { enumerable: true, get: function () { return ERC721AQueryableUpgradeable__factory_1.ERC721AQueryableUpgradeable__factory; } });

    Object.defineProperty(exports, "IERC721AQueryableUpgradeable__factory", { enumerable: true, get: function () { return IERC721AQueryableUpgradeable__factory_1.IERC721AQueryableUpgradeable__factory; } });

    Object.defineProperty(exports, "IERC721AUpgradeable__factory", { enumerable: true, get: function () { return IERC721AUpgradeable__factory_1.IERC721AUpgradeable__factory; } });

    Object.defineProperty(exports, "ERC721A__IERC721Receiver__factory", { enumerable: true, get: function () { return ERC721A__IERC721Receiver__factory_1.ERC721A__IERC721Receiver__factory; } });

    Object.defineProperty(exports, "ERC721A__factory", { enumerable: true, get: function () { return ERC721A__factory_1.ERC721A__factory; } });

    Object.defineProperty(exports, "ERC721ABurnable__factory", { enumerable: true, get: function () { return ERC721ABurnable__factory_1.ERC721ABurnable__factory; } });

    Object.defineProperty(exports, "ERC721AQueryable__factory", { enumerable: true, get: function () { return ERC721AQueryable__factory_1.ERC721AQueryable__factory; } });

    Object.defineProperty(exports, "IERC721ABurnable__factory", { enumerable: true, get: function () { return IERC721ABurnable__factory_1.IERC721ABurnable__factory; } });

    Object.defineProperty(exports, "IERC721AQueryable__factory", { enumerable: true, get: function () { return IERC721AQueryable__factory_1.IERC721AQueryable__factory; } });

    Object.defineProperty(exports, "IERC721A__factory", { enumerable: true, get: function () { return IERC721A__factory_1.IERC721A__factory; } });

    });

    var __awaiter$b = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function registerTable(query) {
        var _a;
        return __awaiter$b(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const address = yield this.signer.getAddress();
            const contractAddress = this.options.contract;
            const contract = typechainTypes.TablelandTables__factory.connect(contractAddress, this.signer);
            const tx = yield contract.createTable(address, query);
            return yield tx.wait();
        });
    }
    function runSql(tableId, query) {
        var _a;
        return __awaiter$b(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const address = yield this.signer.getAddress();
            const contractAddress = this.options.contract;
            const contract = typechainTypes.TablelandTables__factory.connect(contractAddress, this.signer);
            const tx = yield contract.runSQL(address, tableId, query);
            return yield tx.wait();
        });
    }
    function setController$1(tableId, controller) {
        var _a;
        return __awaiter$b(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const caller = yield this.signer.getAddress();
            const contractAddress = this.options.contract;
            const contract = typechainTypes.TablelandTables__factory.connect(contractAddress, this.signer);
            const tx = yield contract.setController(caller, tableId, controller);
            return yield tx.wait();
        });
    }
    function getController$1(tableId) {
        var _a;
        return __awaiter$b(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const contractAddress = this.options.contract;
            const contract = typechainTypes.TablelandTables__factory.connect(contractAddress, this.signer);
            return yield contract.getController(tableId);
        });
    }
    function lockController$1(tableId) {
        var _a;
        return __awaiter$b(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            const caller = yield this.signer.getAddress();
            const contractAddress = this.options.contract;
            const contract = typechainTypes.TablelandTables__factory.connect(contractAddress, this.signer);
            const tx = yield contract.lockController(caller, tableId);
            return yield tx.wait();
        });
    }

    var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Ensures that a connection signer's network and the connection's tableland network
     * are using the same chain.
     * If this isn't called before smart contract method calls there is a chance the
     * transaction will happen on the wrong chain which results in unintended behaviour
     * @returns {string} A Promise that resolves to undefined.
     */
    function checkNetwork() {
        var _a;
        return __awaiter$a(this, void 0, void 0, function* () {
            this.signer = (_a = this.signer) !== null && _a !== void 0 ? _a : (yield getSigner());
            if (!this.signer.provider) {
                throw new Error("provider is required");
            }
            const { chainId } = yield this.signer.provider.getNetwork();
            if (!this.options.chainId || chainId !== this.options.chainId) {
                throw new Error("provider chain and tableland network mismatch. Switch your wallet connection and reconnect");
            }
        });
    }

    var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function read(query) {
        return __awaiter$9(this, void 0, void 0, function* () {
            return yield read$1.call(this, query);
        });
    }
    function write(query, options) {
        return __awaiter$9(this, void 0, void 0, function* () {
            const skipConfirm = shouldSkipConfirm(options);
            if (this.options.rpcRelay || (options === null || options === void 0 ? void 0 : options.rpcRelay)) {
                const response = yield write$1.call(this, query);
                if (!skipConfirm)
                    yield this.waitConfirm(response.hash);
                return response;
            }
            // We check the wallet and tableland chains match here again in
            // case the user switched networks after creating a siwe token
            yield checkNetwork.call(this);
            // ask the Validator if this query is valid, and get the tableId for use in SC call
            const { tableId } = yield validateWriteQuery.call(this, query);
            const txn = yield runSql.call(this, tableId, query);
            if (!skipConfirm)
                yield this.waitConfirm(txn.transactionHash);
            return { hash: txn.transactionHash };
        });
    }

    var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Registers an NFT with the Tableland Ethereum smart contract, then uses that to register
     * a new Table on Tableland. This method returns after the table has been confirmed in the
     * Validator unless the `skipConfirm` option is set to true
     * @param {string} schema SQL table schema.
     * @param {string} prefix The table name prefix.
     * @returns {string} A Promise that resolves to a pending table creation receipt.
     */
    function create(schema, options) {
        var _a, _b;
        return __awaiter$8(this, void 0, void 0, function* () {
            // We check the wallet and tableland chains match here again in
            // case the user switched networks after creating a siwe token
            yield checkNetwork.call(this);
            const { chainId } = this.options;
            const prefix = getPrefix(options);
            const skipConfirm = shouldSkipConfirm(options);
            const timeout = getTimeout(options);
            const query = `CREATE TABLE ${prefix}_${chainId} (${schema});`;
            // This "dryrun" is done to validate that the query statement is considered valid.
            // We check this before minting the token, so the caller won't succeed at minting a token
            // then fail to create the table on the Tableland network
            yield hash$1.call(this, query);
            const txn = yield registerTable.call(this, query);
            const [, event] = (_a = txn.events) !== null && _a !== void 0 ? _a : [];
            const txnHash = txn.transactionHash;
            const blockNumber = txn.blockNumber;
            const tableId = (_b = event === null || event === void 0 ? void 0 : event.args) === null || _b === void 0 ? void 0 : _b.tableId;
            const name = `${prefix}_${chainId}_${tableId}`;
            if (!skipConfirm) {
                yield this.waitConfirm(txnHash, { timeout: timeout });
            }
            return { tableId, prefix, chainId, txnHash, blockNumber, name };
        });
    }

    var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Takes a Create Table SQL statement and returns the structure hash that would be generated
     * @param {string} schema The schema component of a SQL CREATE statement. See `create` for details.
     * @param {string} prefix The table name prefix.
     * @returns {string} The structured hash of the table that would be created.
     */
    function hash(schema, options) {
        return __awaiter$7(this, void 0, void 0, function* () {
            const { chainId } = this.options;
            const prefix = getPrefix(options);
            const query = `CREATE TABLE ${prefix}_${chainId} (${schema});`;
            return yield hash$1.call(this, query);
        });
    }

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    var QUOTA = 65536;
    var BrowserRandomSource = /** @class */ (function () {
        function BrowserRandomSource() {
            this.isAvailable = false;
            this.isInstantiated = false;
            var browserCrypto = typeof self !== 'undefined'
                ? (self.crypto || self.msCrypto) // IE11 has msCrypto
                : null;
            if (browserCrypto && browserCrypto.getRandomValues) {
                this._crypto = browserCrypto;
                this.isAvailable = true;
                this.isInstantiated = true;
            }
        }
        BrowserRandomSource.prototype.randomBytes = function (length) {
            if (!this.isAvailable || !this._crypto) {
                throw new Error("Browser random byte generator is not available.");
            }
            var out = new Uint8Array(length);
            for (var i = 0; i < out.length; i += QUOTA) {
                this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
            }
            return out;
        };
        return BrowserRandomSource;
    }());
    var BrowserRandomSource_1 = BrowserRandomSource;


    var browser = /*#__PURE__*/Object.defineProperty({
    	BrowserRandomSource: BrowserRandomSource_1
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Sets all values in the given array to zero and returns it.
     *
     * The fact that it sets bytes to zero can be relied on.
     *
     * There is no guarantee that this function makes data disappear from memory,
     * as runtime implementation can, for example, have copying garbage collector
     * that will make copies of sensitive data before we wipe it. Or that an
     * operating system will write our data to swap or sleep image. Another thing
     * is that an optimizing compiler can remove calls to this function or make it
     * no-op. There's nothing we can do with it, so we just do our best and hope
     * that everything will be okay and good will triumph over evil.
     */
    function wipe(array) {
        // Right now it's similar to array.fill(0). If it turns
        // out that runtimes optimize this call away, maybe
        // we can try something else.
        for (var i = 0; i < array.length; i++) {
            array[i] = 0;
        }
        return array;
    }
    var wipe_2 = wipe;


    var wipe_1 = /*#__PURE__*/Object.defineProperty({
    	wipe: wipe_2
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.


    var NodeRandomSource = /** @class */ (function () {
        function NodeRandomSource() {
            this.isAvailable = false;
            this.isInstantiated = false;
            if (typeof commonjsRequire$1 !== "undefined") {
                var nodeCrypto = require$$0;
                if (nodeCrypto && nodeCrypto.randomBytes) {
                    this._crypto = nodeCrypto;
                    this.isAvailable = true;
                    this.isInstantiated = true;
                }
            }
        }
        NodeRandomSource.prototype.randomBytes = function (length) {
            if (!this.isAvailable || !this._crypto) {
                throw new Error("Node.js random byte generator is not available.");
            }
            // Get random bytes (result is Buffer).
            var buffer = this._crypto.randomBytes(length);
            // Make sure we got the length that we requested.
            if (buffer.length !== length) {
                throw new Error("NodeRandomSource: got fewer bytes than requested");
            }
            // Allocate output array.
            var out = new Uint8Array(length);
            // Copy bytes from buffer to output.
            for (var i = 0; i < out.length; i++) {
                out[i] = buffer[i];
            }
            // Cleanup.
            wipe_1.wipe(buffer);
            return out;
        };
        return NodeRandomSource;
    }());
    var NodeRandomSource_1 = NodeRandomSource;


    var node = /*#__PURE__*/Object.defineProperty({
    	NodeRandomSource: NodeRandomSource_1
    }, '__esModule', {value: true});

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.



    var SystemRandomSource = /** @class */ (function () {
        function SystemRandomSource() {
            this.isAvailable = false;
            this.name = "";
            // Try browser.
            this._source = new browser.BrowserRandomSource();
            if (this._source.isAvailable) {
                this.isAvailable = true;
                this.name = "Browser";
                return;
            }
            // If no browser source, try Node.
            this._source = new node.NodeRandomSource();
            if (this._source.isAvailable) {
                this.isAvailable = true;
                this.name = "Node";
                return;
            }
            // No sources, we're out of options.
        }
        SystemRandomSource.prototype.randomBytes = function (length) {
            if (!this.isAvailable) {
                throw new Error("System random byte generator is not available.");
            }
            return this._source.randomBytes(length);
        };
        return SystemRandomSource;
    }());
    var SystemRandomSource_1 = SystemRandomSource;


    var system = /*#__PURE__*/Object.defineProperty({
    	SystemRandomSource: SystemRandomSource_1
    }, '__esModule', {value: true});

    var int = createCommonjsModule$1(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Package int provides helper functions for integerss.
     */
    // Shim using 16-bit pieces.
    function imulShim(a, b) {
        var ah = (a >>> 16) & 0xffff, al = a & 0xffff;
        var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
    }
    /** 32-bit integer multiplication.  */
    // Use system Math.imul if available, otherwise use our shim.
    exports.mul = Math.imul || imulShim;
    /** 32-bit integer addition.  */
    function add(a, b) {
        return (a + b) | 0;
    }
    exports.add = add;
    /**  32-bit integer subtraction.  */
    function sub(a, b) {
        return (a - b) | 0;
    }
    exports.sub = sub;
    /** 32-bit integer left rotation */
    function rotl(x, n) {
        return x << n | x >>> (32 - n);
    }
    exports.rotl = rotl;
    /** 32-bit integer left rotation */
    function rotr(x, n) {
        return x << (32 - n) | x >>> n;
    }
    exports.rotr = rotr;
    function isIntegerShim(n) {
        return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
    }
    /**
     * Returns true if the argument is an integer number.
     *
     * In ES2015, Number.isInteger.
     */
    exports.isInteger = Number.isInteger || isIntegerShim;
    /**
     *  Math.pow(2, 53) - 1
     *
     *  In ES2015 Number.MAX_SAFE_INTEGER.
     */
    exports.MAX_SAFE_INTEGER = 9007199254740991;
    /**
     * Returns true if the argument is a safe integer number
     * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
     *
     * In ES2015, Number.isSafeInteger.
     */
    exports.isSafeInteger = function (n) {
        return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
    };

    });

    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.

    /**
     * Package binary provides functions for encoding and decoding numbers in byte arrays.
     */

    // TODO(dchest): add asserts for correct value ranges and array offsets.
    /**
     * Reads 2 bytes from array starting at offset as big-endian
     * signed 16-bit integer and returns it.
     */
    function readInt16BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;
    }
    var readInt16BE_1 = readInt16BE;
    /**
     * Reads 2 bytes from array starting at offset as big-endian
     * unsigned 16-bit integer and returns it.
     */
    function readUint16BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;
    }
    var readUint16BE_1 = readUint16BE;
    /**
     * Reads 2 bytes from array starting at offset as little-endian
     * signed 16-bit integer and returns it.
     */
    function readInt16LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;
    }
    var readInt16LE_1 = readInt16LE;
    /**
     * Reads 2 bytes from array starting at offset as little-endian
     * unsigned 16-bit integer and returns it.
     */
    function readUint16LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 1] << 8) | array[offset]) >>> 0;
    }
    var readUint16LE_1 = readUint16LE;
    /**
     * Writes 2-byte big-endian representation of 16-bit unsigned
     * value to byte array starting at offset.
     *
     * If byte array is not given, creates a new 2-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint16BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(2); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 8;
        out[offset + 1] = value >>> 0;
        return out;
    }
    var writeUint16BE_1 = writeUint16BE;
    var writeInt16BE = writeUint16BE;
    /**
     * Writes 2-byte little-endian representation of 16-bit unsigned
     * value to array starting at offset.
     *
     * If byte array is not given, creates a new 2-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint16LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(2); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 0;
        out[offset + 1] = value >>> 8;
        return out;
    }
    var writeUint16LE_1 = writeUint16LE;
    var writeInt16LE = writeUint16LE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * signed 32-bit integer and returns it.
     */
    function readInt32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (array[offset] << 24) |
            (array[offset + 1] << 16) |
            (array[offset + 2] << 8) |
            array[offset + 3];
    }
    var readInt32BE_1 = readInt32BE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * unsigned 32-bit integer and returns it.
     */
    function readUint32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset] << 24) |
            (array[offset + 1] << 16) |
            (array[offset + 2] << 8) |
            array[offset + 3]) >>> 0;
    }
    var readUint32BE_1 = readUint32BE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * signed 32-bit integer and returns it.
     */
    function readInt32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return (array[offset + 3] << 24) |
            (array[offset + 2] << 16) |
            (array[offset + 1] << 8) |
            array[offset];
    }
    var readInt32LE_1 = readInt32LE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * unsigned 32-bit integer and returns it.
     */
    function readUint32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        return ((array[offset + 3] << 24) |
            (array[offset + 2] << 16) |
            (array[offset + 1] << 8) |
            array[offset]) >>> 0;
    }
    var readUint32LE_1 = readUint32LE;
    /**
     * Writes 4-byte big-endian representation of 32-bit unsigned
     * value to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint32BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 24;
        out[offset + 1] = value >>> 16;
        out[offset + 2] = value >>> 8;
        out[offset + 3] = value >>> 0;
        return out;
    }
    var writeUint32BE_1 = writeUint32BE;
    var writeInt32BE = writeUint32BE;
    /**
     * Writes 4-byte little-endian representation of 32-bit unsigned
     * value to array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint32LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        out[offset + 0] = value >>> 0;
        out[offset + 1] = value >>> 8;
        out[offset + 2] = value >>> 16;
        out[offset + 3] = value >>> 24;
        return out;
    }
    var writeUint32LE_1 = writeUint32LE;
    var writeInt32LE = writeUint32LE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * signed 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports exact
     * numbers in range -9007199254740991 to 9007199254740991.
     * If the number stored in the byte array is outside this range,
     * the result is not exact.
     */
    function readInt64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var hi = readInt32BE(array, offset);
        var lo = readInt32BE(array, offset + 4);
        return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
    }
    var readInt64BE_1 = readInt64BE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * unsigned 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
     */
    function readUint64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var hi = readUint32BE(array, offset);
        var lo = readUint32BE(array, offset + 4);
        return hi * 0x100000000 + lo;
    }
    var readUint64BE_1 = readUint64BE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * signed 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports exact
     * numbers in range -9007199254740991 to 9007199254740991.
     * If the number stored in the byte array is outside this range,
     * the result is not exact.
     */
    function readInt64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var lo = readInt32LE(array, offset);
        var hi = readInt32LE(array, offset + 4);
        return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
    }
    var readInt64LE_1 = readInt64LE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * unsigned 64-bit integer and returns it.
     *
     * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
     */
    function readUint64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var lo = readUint32LE(array, offset);
        var hi = readUint32LE(array, offset + 4);
        return hi * 0x100000000 + lo;
    }
    var readUint64LE_1 = readUint64LE;
    /**
     * Writes 8-byte big-endian representation of 64-bit unsigned
     * value to byte array starting at offset.
     *
     * Due to JavaScript limitation, supports values up to 2^53-1.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint64BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        writeUint32BE(value / 0x100000000 >>> 0, out, offset);
        writeUint32BE(value >>> 0, out, offset + 4);
        return out;
    }
    var writeUint64BE_1 = writeUint64BE;
    var writeInt64BE = writeUint64BE;
    /**
     * Writes 8-byte little-endian representation of 64-bit unsigned
     * value to byte array starting at offset.
     *
     * Due to JavaScript limitation, supports values up to 2^53-1.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeUint64LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        writeUint32LE(value >>> 0, out, offset);
        writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
        return out;
    }
    var writeUint64LE_1 = writeUint64LE;
    var writeInt64LE = writeUint64LE;
    /**
     * Reads bytes from array starting at offset as big-endian
     * unsigned bitLen-bit integer and returns it.
     *
     * Supports bit lengths divisible by 8, up to 48.
     */
    function readUintBE(bitLength, array, offset) {
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("readUintBE supports only bitLengths divisible by 8");
        }
        if (bitLength / 8 > array.length - offset) {
            throw new Error("readUintBE: array is too short for the given bitLength");
        }
        var result = 0;
        var mul = 1;
        for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
            result += array[i] * mul;
            mul *= 256;
        }
        return result;
    }
    var readUintBE_1 = readUintBE;
    /**
     * Reads bytes from array starting at offset as little-endian
     * unsigned bitLen-bit integer and returns it.
     *
     * Supports bit lengths divisible by 8, up to 48.
     */
    function readUintLE(bitLength, array, offset) {
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("readUintLE supports only bitLengths divisible by 8");
        }
        if (bitLength / 8 > array.length - offset) {
            throw new Error("readUintLE: array is too short for the given bitLength");
        }
        var result = 0;
        var mul = 1;
        for (var i = offset; i < offset + bitLength / 8; i++) {
            result += array[i] * mul;
            mul *= 256;
        }
        return result;
    }
    var readUintLE_1 = readUintLE;
    /**
     * Writes a big-endian representation of bitLen-bit unsigned
     * value to array starting at offset.
     *
     * Supports bit lengths divisible by 8, up to 48.
     *
     * If byte array is not given, creates a new one.
     *
     * Returns the output byte array.
     */
    function writeUintBE(bitLength, value, out, offset) {
        if (out === void 0) { out = new Uint8Array(bitLength / 8); }
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("writeUintBE supports only bitLengths divisible by 8");
        }
        if (!int.isSafeInteger(value)) {
            throw new Error("writeUintBE value must be an integer");
        }
        var div = 1;
        for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
            out[i] = (value / div) & 0xff;
            div *= 256;
        }
        return out;
    }
    var writeUintBE_1 = writeUintBE;
    /**
     * Writes a little-endian representation of bitLen-bit unsigned
     * value to array starting at offset.
     *
     * Supports bit lengths divisible by 8, up to 48.
     *
     * If byte array is not given, creates a new one.
     *
     * Returns the output byte array.
     */
    function writeUintLE(bitLength, value, out, offset) {
        if (out === void 0) { out = new Uint8Array(bitLength / 8); }
        if (offset === void 0) { offset = 0; }
        // TODO(dchest): implement support for bitLengths non-divisible by 8
        if (bitLength % 8 !== 0) {
            throw new Error("writeUintLE supports only bitLengths divisible by 8");
        }
        if (!int.isSafeInteger(value)) {
            throw new Error("writeUintLE value must be an integer");
        }
        var div = 1;
        for (var i = offset; i < offset + bitLength / 8; i++) {
            out[i] = (value / div) & 0xff;
            div *= 256;
        }
        return out;
    }
    var writeUintLE_1 = writeUintLE;
    /**
     * Reads 4 bytes from array starting at offset as big-endian
     * 32-bit floating-point number and returns it.
     */
    function readFloat32BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat32(offset);
    }
    var readFloat32BE_1 = readFloat32BE;
    /**
     * Reads 4 bytes from array starting at offset as little-endian
     * 32-bit floating-point number and returns it.
     */
    function readFloat32LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat32(offset, true);
    }
    var readFloat32LE_1 = readFloat32LE;
    /**
     * Reads 8 bytes from array starting at offset as big-endian
     * 64-bit floating-point number ("double") and returns it.
     */
    function readFloat64BE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat64(offset);
    }
    var readFloat64BE_1 = readFloat64BE;
    /**
     * Reads 8 bytes from array starting at offset as little-endian
     * 64-bit floating-point number ("double") and returns it.
     */
    function readFloat64LE(array, offset) {
        if (offset === void 0) { offset = 0; }
        var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
        return view.getFloat64(offset, true);
    }
    var readFloat64LE_1 = readFloat64LE;
    /**
     * Writes 4-byte big-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat32BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat32(offset, value);
        return out;
    }
    var writeFloat32BE_1 = writeFloat32BE;
    /**
     * Writes 4-byte little-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 4-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat32LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(4); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat32(offset, value, true);
        return out;
    }
    var writeFloat32LE_1 = writeFloat32LE;
    /**
     * Writes 8-byte big-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat64BE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat64(offset, value);
        return out;
    }
    var writeFloat64BE_1 = writeFloat64BE;
    /**
     * Writes 8-byte little-endian floating-point representation of value
     * to byte array starting at offset.
     *
     * If byte array is not given, creates a new 8-byte one.
     *
     * Returns the output byte array.
     */
    function writeFloat64LE(value, out, offset) {
        if (out === void 0) { out = new Uint8Array(8); }
        if (offset === void 0) { offset = 0; }
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        view.setFloat64(offset, value, true);
        return out;
    }
    var writeFloat64LE_1 = writeFloat64LE;


    var binary = /*#__PURE__*/Object.defineProperty({
    	readInt16BE: readInt16BE_1,
    	readUint16BE: readUint16BE_1,
    	readInt16LE: readInt16LE_1,
    	readUint16LE: readUint16LE_1,
    	writeUint16BE: writeUint16BE_1,
    	writeInt16BE: writeInt16BE,
    	writeUint16LE: writeUint16LE_1,
    	writeInt16LE: writeInt16LE,
    	readInt32BE: readInt32BE_1,
    	readUint32BE: readUint32BE_1,
    	readInt32LE: readInt32LE_1,
    	readUint32LE: readUint32LE_1,
    	writeUint32BE: writeUint32BE_1,
    	writeInt32BE: writeInt32BE,
    	writeUint32LE: writeUint32LE_1,
    	writeInt32LE: writeInt32LE,
    	readInt64BE: readInt64BE_1,
    	readUint64BE: readUint64BE_1,
    	readInt64LE: readInt64LE_1,
    	readUint64LE: readUint64LE_1,
    	writeUint64BE: writeUint64BE_1,
    	writeInt64BE: writeInt64BE,
    	writeUint64LE: writeUint64LE_1,
    	writeInt64LE: writeInt64LE,
    	readUintBE: readUintBE_1,
    	readUintLE: readUintLE_1,
    	writeUintBE: writeUintBE_1,
    	writeUintLE: writeUintLE_1,
    	readFloat32BE: readFloat32BE_1,
    	readFloat32LE: readFloat32LE_1,
    	readFloat64BE: readFloat64BE_1,
    	readFloat64LE: readFloat64LE_1,
    	writeFloat32BE: writeFloat32BE_1,
    	writeFloat32LE: writeFloat32LE_1,
    	writeFloat64BE: writeFloat64BE_1,
    	writeFloat64LE: writeFloat64LE_1
    }, '__esModule', {value: true});

    var random = createCommonjsModule$1(function (module, exports) {
    // Copyright (C) 2016 Dmitry Chestnykh
    // MIT License. See LICENSE file for details.
    Object.defineProperty(exports, "__esModule", { value: true });



    exports.defaultRandomSource = new system.SystemRandomSource();
    function randomBytes(length, prng) {
        if (prng === void 0) { prng = exports.defaultRandomSource; }
        return prng.randomBytes(length);
    }
    exports.randomBytes = randomBytes;
    /**
     * Returns a uniformly random unsigned 32-bit integer.
     */
    function randomUint32(prng) {
        if (prng === void 0) { prng = exports.defaultRandomSource; }
        // Generate 4-byte random buffer.
        var buf = randomBytes(4, prng);
        // Convert bytes from buffer into a 32-bit integer.
        // It's not important which byte order to use, since
        // the result is random.
        var result = binary.readUint32LE(buf);
        // Clean the buffer.
        wipe_1.wipe(buf);
        return result;
    }
    exports.randomUint32 = randomUint32;
    /** 62 alphanumeric characters for default charset of randomString() */
    var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    /**
     * Returns a uniform random string of the given length
     * with characters from the given charset.
     *
     * Charset must not have more than 256 characters.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomString(length, charset, prng) {
        if (charset === void 0) { charset = ALPHANUMERIC; }
        if (prng === void 0) { prng = exports.defaultRandomSource; }
        if (charset.length < 2) {
            throw new Error("randomString charset is too short");
        }
        if (charset.length > 256) {
            throw new Error("randomString charset is too long");
        }
        var out = '';
        var charsLen = charset.length;
        var maxByte = 256 - (256 % charsLen);
        while (length > 0) {
            var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
            for (var i = 0; i < buf.length && length > 0; i++) {
                var randomByte = buf[i];
                if (randomByte < maxByte) {
                    out += charset.charAt(randomByte % charsLen);
                    length--;
                }
            }
            wipe_1.wipe(buf);
        }
        return out;
    }
    exports.randomString = randomString;
    /**
     * Returns uniform random string containing at least the given
     * number of bits of entropy.
     *
     * For example, randomStringForEntropy(128) will return a 22-character
     * alphanumeric string, while randomStringForEntropy(128, "0123456789")
     * will return a 39-character numeric string, both will contain at
     * least 128 bits of entropy.
     *
     * Default charset generates case-sensitive alphanumeric
     * strings (0-9, A-Z, a-z).
     */
    function randomStringForEntropy(bits, charset, prng) {
        if (charset === void 0) { charset = ALPHANUMERIC; }
        if (prng === void 0) { prng = exports.defaultRandomSource; }
        var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
        return randomString(length, charset, prng);
    }
    exports.randomStringForEntropy = randomStringForEntropy;

    });

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module exposes a list of named identifiers, shared across the parser generator
    // and the parsers that are generated.

    var identifiers = {
      // Identifies the operator type. Used by the generator
      // to indicate operator types in the grammar object.
      // Used by the [parser](./parser.html) when interpreting the grammar object.
      /* the original ABNF operators */
      ALT: 1 /* alternation */,
      CAT: 2 /* concatenation */,
      REP: 3 /* repetition */,
      RNM: 4 /* rule name */,
      TRG: 5 /* terminal range */,
      TBS: 6 /* terminal binary string, case sensitive */,
      TLS: 7 /* terminal literal string, case insensitive */,
      /* the super set, SABNF operators */
      UDT: 11 /* user-defined terminal */,
      AND: 12 /* positive look ahead */,
      NOT: 13 /* negative look ahead */,
      BKR: 14 /* back reference to a previously matched rule name */,
      BKA: 15 /* positive look behind */,
      BKN: 16 /* negative look behind */,
      ABG: 17 /* anchor - begin of string */,
      AEN: 18 /* anchor - end of string */,
      // Used by the parser and the user's `RNM` and `UDT` callback functions.
      // Identifies the parser state as it traverses the parse tree nodes.
      // - *ACTIVE* - indicates the downward direction through the parse tree node.
      // - *MATCH* - indicates the upward direction and a phrase, of length \> 0, has been successfully matched
      // - *EMPTY* - indicates the upward direction and a phrase, of length = 0, has been successfully matched
      // - *NOMATCH* - indicates the upward direction and the parser failed to match any phrase at all
      ACTIVE: 100,
      MATCH: 101,
      EMPTY: 102,
      NOMATCH: 103,
      // Used by [`AST` translator](./ast.html) (semantic analysis) and the user's callback functions
      // to indicate the direction of flow through the `AST` nodes.
      // - *SEM_PRE* - indicates the downward (pre-branch) direction through the `AST` node.
      // - *SEM_POST* - indicates the upward (post-branch) direction through the `AST` node.
      SEM_PRE: 200,
      SEM_POST: 201,
      // Used by the user's callback functions to indicate to the `AST` translator (semantic analysis) how to proceed.
      // - *SEM_OK* - normal return value
      // - *SEM_SKIP* - if a callback function returns this value from the SEM_PRE state,
      // the translator will skip processing all `AST` nodes in the branch below the current node.
      // Ignored if returned from the SEM_POST state.
      SEM_OK: 300,
      SEM_SKIP: 301,
      // Used in attribute generation to distinguish the necessary attribute categories.
      // - *ATTR_N* - non-recursive
      // - *ATTR_R* - recursive
      // - *ATTR_MR* - belongs to a mutually-recursive set
      ATTR_N: 400,
      ATTR_R: 401,
      ATTR_MR: 402,
      // Look around values indicate whether the parser is in look ahead or look behind mode.
      // Used by the tracing facility to indicate the look around mode in the trace records display.
      // - *LOOKAROUND_NONE* - the parser is in normal parsing mode
      // - *LOOKAROUND_AHEAD* - the parse is in look-ahead mode, phrase matching for operator `AND(&)` or `NOT(!)`
      // - *LOOKAROUND_BEHIND* - the parse is in look-behind mode, phrase matching for operator `BKA(&&)` or `BKN(!!)`
      LOOKAROUND_NONE: 500,
      LOOKAROUND_AHEAD: 501,
      LOOKAROUND_BEHIND: 502,
      // Back reference rule mode indicators
      // - *BKR_MODE_UM* - the back reference is using universal mode
      // - *BKR_MODE_PM* - the back reference is using parent frame mode
      // - *BKR_MODE_CS* - the back reference is using case-sensitive phrase matching
      // - *BKR_MODE_CI* - the back reference is using case-insensitive phrase matching
      BKR_MODE_UM: 601,
      BKR_MODE_PM: 602,
      BKR_MODE_CS: 603,
      BKR_MODE_CI: 604,
    };

    var style = {

      // Generated by apglib/style.js 
      CLASS_MONOSPACE: 'apg-mono',
      CLASS_ACTIVE: 'apg-active',
      CLASS_EMPTY: 'apg-empty',
      CLASS_MATCH: 'apg-match',
      CLASS_NOMATCH: 'apg-nomatch',
      CLASS_LOOKAHEAD: 'apg-lh-match',
      CLASS_LOOKBEHIND: 'apg-lb-match',
      CLASS_REMAINDER: 'apg-remainder',
      CLASS_CTRLCHAR: 'apg-ctrl-char',
      CLASS_LINEEND: 'apg-line-end',
      CLASS_ERROR: 'apg-error',
      CLASS_PHRASE: 'apg-phrase',
      CLASS_EMPTYPHRASE: 'apg-empty-phrase',
      CLASS_STATE: 'apg-state',
      CLASS_STATS: 'apg-stats',
      CLASS_TRACE: 'apg-trace',
      CLASS_GRAMMAR: 'apg-grammar',
      CLASS_RULES: 'apg-rules',
      CLASS_RULESLINK: 'apg-rules-link',
      CLASS_ATTRIBUTES: 'apg-attrs',
    };

    /* eslint-disable prefer-destructuring */

    const thisThis$2 = commonjsGlobal;

    /* decoding error codes */
    const NON_SHORTEST = 0xfffffffc;
    const TRAILING = 0xfffffffd;
    const RANGE = 0xfffffffe;
    const ILL_FORMED = 0xffffffff;

    /* mask[n] = 2**n - 1, ie. mask[n] = n bits on. e.g. mask[6] = %b111111 */
    const mask = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023];

    /* ascii[n] = 'HH', where 0xHH = n, eg. ascii[254] = 'FE' */
    const ascii = [
      '00',
      '01',
      '02',
      '03',
      '04',
      '05',
      '06',
      '07',
      '08',
      '09',
      '0A',
      '0B',
      '0C',
      '0D',
      '0E',
      '0F',
      '10',
      '11',
      '12',
      '13',
      '14',
      '15',
      '16',
      '17',
      '18',
      '19',
      '1A',
      '1B',
      '1C',
      '1D',
      '1E',
      '1F',
      '20',
      '21',
      '22',
      '23',
      '24',
      '25',
      '26',
      '27',
      '28',
      '29',
      '2A',
      '2B',
      '2C',
      '2D',
      '2E',
      '2F',
      '30',
      '31',
      '32',
      '33',
      '34',
      '35',
      '36',
      '37',
      '38',
      '39',
      '3A',
      '3B',
      '3C',
      '3D',
      '3E',
      '3F',
      '40',
      '41',
      '42',
      '43',
      '44',
      '45',
      '46',
      '47',
      '48',
      '49',
      '4A',
      '4B',
      '4C',
      '4D',
      '4E',
      '4F',
      '50',
      '51',
      '52',
      '53',
      '54',
      '55',
      '56',
      '57',
      '58',
      '59',
      '5A',
      '5B',
      '5C',
      '5D',
      '5E',
      '5F',
      '60',
      '61',
      '62',
      '63',
      '64',
      '65',
      '66',
      '67',
      '68',
      '69',
      '6A',
      '6B',
      '6C',
      '6D',
      '6E',
      '6F',
      '70',
      '71',
      '72',
      '73',
      '74',
      '75',
      '76',
      '77',
      '78',
      '79',
      '7A',
      '7B',
      '7C',
      '7D',
      '7E',
      '7F',
      '80',
      '81',
      '82',
      '83',
      '84',
      '85',
      '86',
      '87',
      '88',
      '89',
      '8A',
      '8B',
      '8C',
      '8D',
      '8E',
      '8F',
      '90',
      '91',
      '92',
      '93',
      '94',
      '95',
      '96',
      '97',
      '98',
      '99',
      '9A',
      '9B',
      '9C',
      '9D',
      '9E',
      '9F',
      'A0',
      'A1',
      'A2',
      'A3',
      'A4',
      'A5',
      'A6',
      'A7',
      'A8',
      'A9',
      'AA',
      'AB',
      'AC',
      'AD',
      'AE',
      'AF',
      'B0',
      'B1',
      'B2',
      'B3',
      'B4',
      'B5',
      'B6',
      'B7',
      'B8',
      'B9',
      'BA',
      'BB',
      'BC',
      'BD',
      'BE',
      'BF',
      'C0',
      'C1',
      'C2',
      'C3',
      'C4',
      'C5',
      'C6',
      'C7',
      'C8',
      'C9',
      'CA',
      'CB',
      'CC',
      'CD',
      'CE',
      'CF',
      'D0',
      'D1',
      'D2',
      'D3',
      'D4',
      'D5',
      'D6',
      'D7',
      'D8',
      'D9',
      'DA',
      'DB',
      'DC',
      'DD',
      'DE',
      'DF',
      'E0',
      'E1',
      'E2',
      'E3',
      'E4',
      'E5',
      'E6',
      'E7',
      'E8',
      'E9',
      'EA',
      'EB',
      'EC',
      'ED',
      'EE',
      'EF',
      'F0',
      'F1',
      'F2',
      'F3',
      'F4',
      'F5',
      'F6',
      'F7',
      'F8',
      'F9',
      'FA',
      'FB',
      'FC',
      'FD',
      'FE',
      'FF',
    ];

    /* vector of base 64 characters */
    const base64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='.split('');

    /* vector of base 64 character codes */
    const base64codes = [];
    base64chars.forEach((char) => {
      base64codes.push(char.charCodeAt(0));
    });

    // The UTF8 algorithms.
    var utf8 = {
      encode(chars) {
        const bytes = [];
        chars.forEach((char) => {
          if (char >= 0 && char <= 0x7f) {
            bytes.push(char);
          } else if (char <= 0x7ff) {
            bytes.push(0xc0 + ((char >> 6) & mask[5]));
            bytes.push(0x80 + (char & mask[6]));
          } else if (char < 0xd800 || (char > 0xdfff && char <= 0xffff)) {
            bytes.push(0xe0 + ((char >> 12) & mask[4]));
            bytes.push(0x80 + ((char >> 6) & mask[6]));
            bytes.push(0x80 + (char & mask[6]));
          } else if (char >= 0x10000 && char <= 0x10ffff) {
            const u = (char >> 16) & mask[5];
            bytes.push(0xf0 + (u >> 2));
            bytes.push(0x80 + ((u & mask[2]) << 4) + ((char >> 12) & mask[4]));
            bytes.push(0x80 + ((char >> 6) & mask[6]));
            bytes.push(0x80 + (char & mask[6]));
          } else {
            throw new RangeError(`utf8.encode: character out of range: char: ${char}`);
          }
        });
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        /* bytes functions return error for non-shortest forms & values out of range */
        function bytes2(b1, b2) {
          /* U+0080..U+07FF */
          /* 00000000 00000yyy yyxxxxxx | 110yyyyy 10xxxxxx */
          if ((b2 & 0xc0) !== 0x80) {
            return TRAILING;
          }
          const x = ((b1 & mask[5]) << 6) + (b2 & mask[6]);
          if (x < 0x80) {
            return NON_SHORTEST;
          }
          return x;
        }
        function bytes3(b1, b2, b3) {
          /* U+0800..U+FFFF */
          /* 00000000 zzzzyyyy yyxxxxxx | 1110zzzz 10yyyyyy 10xxxxxx */
          if ((b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {
            return TRAILING;
          }
          const x = ((b1 & mask[4]) << 12) + ((b2 & mask[6]) << 6) + (b3 & mask[6]);
          if (x < 0x800) {
            return NON_SHORTEST;
          }
          if (x >= 0xd800 && x <= 0xdfff) {
            return RANGE;
          }
          return x;
        }
        function bytes4(b1, b2, b3, b4) {
          /* U+10000..U+10FFFF */
          /* 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu 10uuzzzz 10yyyyyy 10xxxxxx */
          if ((b4 & 0xc0) !== 0x80 || (b3 & 0xc0) !== 0x80 || (b2 & 0xc0) !== 0x80) {
            return TRAILING;
          }
          const x =
            ((((b1 & mask[3]) << 2) + ((b2 >> 4) & mask[2])) << 16) +
            ((b2 & mask[4]) << 12) +
            ((b3 & mask[6]) << 6) +
            (b4 & mask[6]);
          if (x < 0x10000) {
            return NON_SHORTEST;
          }
          if (x > 0x10ffff) {
            return RANGE;
          }
          return x;
        }
        let c;
        let b1;
        let i1;
        let i2;
        let i3;
        let inc;
        const len = buf.length;
        let i = bom ? 3 : 0;
        const chars = [];
        while (i < len) {
          b1 = buf[i];
          c = ILL_FORMED;
          const TRUE = true;
          while (TRUE) {
            if (b1 >= 0 && b1 <= 0x7f) {
              /* U+0000..U+007F 00..7F */
              c = b1;
              inc = 1;
              break;
            }
            i1 = i + 1;
            if (i1 < len && b1 >= 0xc2 && b1 <= 0xdf) {
              /* U+0080..U+07FF C2..DF 80..BF */
              c = bytes2(b1, buf[i1]);
              inc = 2;
              break;
            }
            i2 = i + 2;
            if (i2 < len && b1 >= 0xe0 && b1 <= 0xef) {
              /* U+0800..U+FFFF */
              c = bytes3(b1, buf[i1], buf[i2]);
              inc = 3;
              break;
            }
            i3 = i + 3;
            if (i3 < len && b1 >= 0xf0 && b1 <= 0xf4) {
              /* U+10000..U+10FFFF */
              c = bytes4(b1, buf[i1], buf[i2], buf[i3]);
              inc = 4;
              break;
            }
            /* if we fall through to here, it is an ill-formed sequence */
            break;
          }
          if (c > 0x10ffff) {
            const at = `byte[${i}]`;
            if (c === ILL_FORMED) {
              throw new RangeError(`utf8.decode: ill-formed UTF8 byte sequence found at: ${at}`);
            }
            if (c === TRAILING) {
              throw new RangeError(`utf8.decode: illegal trailing byte found at: ${at}`);
            }
            if (c === RANGE) {
              throw new RangeError(`utf8.decode: code point out of range found at: ${at}`);
            }
            if (c === NON_SHORTEST) {
              throw new RangeError(`utf8.decode: non-shortest form found at: ${at}`);
            }
            throw new RangeError(`utf8.decode: unrecognized error found at: ${at}`);
          }
          chars.push(c);
          i += inc;
        }
        return chars;
      },
    };

    // The UTF16BE algorithms.
    var utf16be = {
      encode(chars) {
        const bytes = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {
            bytes.push((char >> 8) & mask[8]);
            bytes.push(char & mask[8]);
          } else if (char >= 0x10000 && char <= 0x10ffff) {
            l = char - 0x10000;
            h = 0xd800 + (l >> 10);
            l = 0xdc00 + (l & mask[10]);
            bytes.push((h >> 8) & mask[8]);
            bytes.push(h & mask[8]);
            bytes.push((l >> 8) & mask[8]);
            bytes.push(l & mask[8]);
          } else {
            throw new RangeError(`utf16be.encode: UTF16BE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        /* assumes caller has insured that buf is a Buffer of bytes */
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16be.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i] << 8) + buf[i1];
              if (high < 0xd800 || high > 0xdfff) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i + 2] << 8) + buf[i3];
                if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {
                  c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);
                  inc = 4;
                  break;
                }
              }
            }
            /* if we fall through to here, it is an ill-formed sequence */
            throw new RangeError(`utf16be.decode: ill-formed UTF16BE byte sequence found: byte[${i}]`);
          }
          chars[j++] = c;
          i += inc;
        }
        return chars;
      },
    };

    // The UTF16LE algorithms.
    var utf16le = {
      encode(chars) {
        const bytes = [];
        let char;
        let h;
        let l;
        for (let i = 0; i < chars.length; i += 1) {
          char = chars[i];
          if ((char >= 0 && char <= 0xd7ff) || (char >= 0xe000 && char <= 0xffff)) {
            bytes.push(char & mask[8]);
            bytes.push((char >> 8) & mask[8]);
          } else if (char >= 0x10000 && char <= 0x10ffff) {
            l = char - 0x10000;
            h = 0xd800 + (l >> 10);
            l = 0xdc00 + (l & mask[10]);
            bytes.push(h & mask[8]);
            bytes.push((h >> 8) & mask[8]);
            bytes.push(l & mask[8]);
            bytes.push((l >> 8) & mask[8]);
          } else {
            throw new RangeError(`utf16le.encode: UTF16LE value out of range: char[${i}]: ${char}`);
          }
        }
        return Buffer.from(bytes);
      },
      decode(buf, bom) {
        /* assumes caller has insured that buf is a Buffer of bytes */
        if (buf.length % 2 > 0) {
          throw new RangeError(`utf16le.decode: data length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        const len = buf.length;
        let i = bom ? 2 : 0;
        let j = 0;
        let c;
        let inc;
        let i1;
        let i3;
        let high;
        let low;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            i1 = i + 1;
            if (i1 < len) {
              high = (buf[i1] << 8) + buf[i];
              if (high < 0xd800 || high > 0xdfff) {
                c = high;
                inc = 2;
                break;
              }
              i3 = i + 3;
              if (i3 < len) {
                low = (buf[i3] << 8) + buf[i + 2];
                if (high <= 0xdbff && low >= 0xdc00 && low <= 0xdfff) {
                  c = 0x10000 + ((high - 0xd800) << 10) + (low - 0xdc00);
                  inc = 4;
                  break;
                }
              }
            }
            /* if we fall through to here, it is an ill-formed sequence */
            throw new RangeError(`utf16le.decode: ill-formed UTF16LE byte sequence found: byte[${i}]`);
          }
          chars[j++] = c;
          i += inc;
        }
        return chars;
      },
    };

    // The UTF32BE algorithms.
    var utf32be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {
            throw new RangeError(`utf32be.encode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = (char >> 24) & mask[8];
          buf[i++] = (char >> 16) & mask[8];
          buf[i++] = (char >> 8) & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        /* caller to insure buf is a Buffer of bytes */
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3];
          if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {
            throw new RangeError(`utf32be.decode: UTF32BE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      },
    };

    // The UTF32LE algorithms.
    var utf32le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = (char >> 8) & mask[8];
          buf[i++] = (char >> 16) & mask[8];
          buf[i++] = (char >> 24) & mask[8];
        });
        return buf;
      },
      decode(buf, bom) {
        /* caller to insure buf is a Buffer of bytes */
        if (buf.length % 4 > 0) {
          throw new RangeError(`utf32be.decode: UTF32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        let i = bom ? 4 : 0;
        for (; i < buf.length; i += 4) {
          const char = (buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i];
          if ((char >= 0xd800 && char <= 0xdfff) || char > 0x10ffff) {
            throw new RangeError(`utf32le.encode: UTF32LE character code out of range: char[${i / 4}]: ${char}`);
          }
          chars.push(char);
        }
        return chars;
      },
    };

    // The UINT7 algorithms. ASCII or 7-bit unsigned integers.
    var uint7 = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 0x7f) {
            throw new RangeError(`uint7.encode: UINT7 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          if (buf[i] > 0x7f) {
            throw new RangeError(`uint7.decode: UINT7 character code out of range: byte[${i}]: ${buf[i]}`);
          }
          chars[i] = buf[i];
        }
        return chars;
      },
    };

    // The UINT8 algorithms. BINARY, Latin 1 or 8-bit unsigned integers.
    var uint8 = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length);
        for (let i = 0; i < chars.length; i += 1) {
          if (chars[i] > 0xff) {
            throw new RangeError(`uint8.encode: UINT8 character code out of range: char[${i}]: ${chars[i]}`);
          }
          buf[i] = chars[i];
        }
        return buf;
      },
      decode(buf) {
        const chars = [];
        for (let i = 0; i < buf.length; i += 1) {
          chars[i] = buf[i];
        }
        return chars;
      },
    };

    // The UINT16BE algorithms. Big-endian 16-bit unsigned integers.
    var uint16be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 0xffff) {
            throw new RangeError(`uint16be.encode: UINT16BE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = (char >> 8) & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16be.decode: UINT16BE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i] << 8) + buf[i + 1]);
        }
        return chars;
      },
    };

    // The UINT16LE algorithms. Little-endian 16-bit unsigned integers.
    var uint16le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 2);
        let i = 0;
        chars.forEach((char) => {
          if (char > 0xffff) {
            throw new RangeError(`uint16le.encode: UINT16LE character code out of range: char[${i / 2}]: ${char}`);
          }
          buf[i++] = char & mask[8];
          buf[i++] = (char >> 8) & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 2 > 0) {
          throw new RangeError(`uint16le.decode: UINT16LE byte length must be even multiple of 2: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 2) {
          chars.push((buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      },
    };

    // The UINT32BE algorithms. Big-endian 32-bit unsigned integers.
    var uint32be = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = (char >> 24) & mask[8];
          buf[i++] = (char >> 16) & mask[8];
          buf[i++] = (char >> 8) & mask[8];
          buf[i++] = char & mask[8];
        });
        return buf;
      },
      decode(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32be.decode: UINT32BE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i] << 24) + (buf[i + 1] << 16) + (buf[i + 2] << 8) + buf[i + 3]);
        }
        return chars;
      },
    };

    // The UINT32LE algorithms. Little-endian 32-bit unsigned integers.
    var uint32le = {
      encode(chars) {
        const buf = Buffer.alloc(chars.length * 4);
        let i = 0;
        chars.forEach((char) => {
          buf[i++] = char & mask[8];
          buf[i++] = (char >> 8) & mask[8];
          buf[i++] = (char >> 16) & mask[8];
          buf[i++] = (char >> 24) & mask[8];
        });
        return buf;
      },
      decode(buf) {
        /* caller to insure buf is a Buffer of bytes */
        if (buf.length % 4 > 0) {
          throw new RangeError(`uint32le.decode: UINT32LE byte length must be even multiple of 4: length: ${buf.length}`);
        }
        const chars = [];
        for (let i = 0; i < buf.length; i += 4) {
          chars.push((buf[i + 3] << 24) + (buf[i + 2] << 16) + (buf[i + 1] << 8) + buf[i]);
        }
        return chars;
      },
    };

    // The STRING algorithms. Converts JavaScript strings to Array of 32-bit integers and vice versa.
    // Uses the node.js Buffer's native "utf16le" capabilites.
    var string = {
      encode(chars) {
        return thisThis$2.utf16le.encode(chars).toString('utf16le');
      },
      decode(str) {
        return thisThis$2.utf16le.decode(Buffer.from(str, 'utf16le'), 0);
      },
    };

    // The ESCAPED algorithms.
    // Note that ESCAPED format contains only ASCII characters.
    // The characters are always in the form of a Buffer of bytes.
    var escaped = {
      // Encodes an Array of 32-bit integers into ESCAPED format.
      encode(chars) {
        const bytes = [];
        for (let i = 0; i < chars.length; i += 1) {
          const char = chars[i];
          if (char === 96) {
            bytes.push(char);
            bytes.push(char);
          } else if (char === 10) {
            bytes.push(char);
          } else if (char >= 32 && char <= 126) {
            bytes.push(char);
          } else {
            let str = '';
            if (char >= 0 && char <= 31) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 127 && char <= 255) {
              str += `\`x${ascii[char]}`;
            } else if (char >= 0x100 && char <= 0xffff) {
              str += `\`u${ascii[(char >> 8) & mask[8]]}${ascii[char & mask[8]]}`;
            } else if (char >= 0x10000 && char <= 0xffffffff) {
              str += '`u{';
              const digit = (char >> 24) & mask[8];
              if (digit > 0) {
                str += ascii[digit];
              }
              str += `${ascii[(char >> 16) & mask[8]] + ascii[(char >> 8) & mask[8]] + ascii[char & mask[8]]}}`;
            } else {
              throw new Error('escape.encode(char): char > 0xffffffff not allowed');
            }
            const buf = Buffer.from(str);
            buf.forEach((b) => {
              bytes.push(b);
            });
          }
        }
        return Buffer.from(bytes);
      },
      // Decodes ESCAPED format from a Buffer of bytes to an Array of 32-bit integers.
      decode(buf) {
        function isHex(hex) {
          if ((hex >= 48 && hex <= 57) || (hex >= 65 && hex <= 70) || (hex >= 97 && hex <= 102)) {
            return true;
          }
          return false;
        }
        function getx(i, len, bufArg) {
          const ret = { char: null, nexti: i + 2, error: true };
          if (i + 1 < len) {
            if (isHex(bufArg[i]) && isHex(bufArg[i + 1])) {
              const str = String.fromCodePoint(bufArg[i], bufArg[i + 1]);
              ret.char = parseInt(str, 16);
              if (!Number.isNaN(ret.char)) {
                ret.error = false;
              }
            }
          }
          return ret;
        }
        function getu(i, len, bufArg) {
          const ret = { char: null, nexti: i + 4, error: true };
          if (i + 3 < len) {
            if (isHex(bufArg[i]) && isHex(bufArg[i + 1]) && isHex(bufArg[i + 2]) && isHex(bufArg[i + 3])) {
              const str = String.fromCodePoint(bufArg[i], bufArg[i + 1], bufArg[i + 2], bufArg[i + 3]);
              ret.char = parseInt(str, 16);
              if (!Number.isNaN(ret.char)) {
                ret.error = false;
              }
            }
          }
          return ret;
        }
        function getU(i, len, bufArg) {
          const ret = { char: null, nexti: i + 4, error: true };
          let str = '';
          while (i < len && isHex(bufArg[i])) {
            str += String.fromCodePoint(bufArg[i]);
            // eslint-disable-next-line no-param-reassign
            i += 1;
          }
          ret.char = parseInt(str, 16);
          if (bufArg[i] === 125 && !Number.isNaN(ret.char)) {
            ret.error = false;
          }
          ret.nexti = i + 1;
          return ret;
        }
        const chars = [];
        const len = buf.length;
        let i1;
        let ret;
        let error;
        let i = 0;
        while (i < len) {
          const TRUE = true;
          while (TRUE) {
            error = true;
            if (buf[i] !== 96) {
              /* unescaped character */
              chars.push(buf[i]);
              i += 1;
              error = false;
              break;
            }
            i1 = i + 1;
            if (i1 >= len) {
              break;
            }
            if (buf[i1] === 96) {
              /* escaped grave accent */
              chars.push(96);
              i += 2;
              error = false;
              break;
            }
            if (buf[i1] === 120) {
              ret = getx(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              /* escaped hex */
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            if (buf[i1] === 117) {
              if (buf[i1 + 1] === 123) {
                ret = getU(i1 + 2, len, buf);
                if (ret.error) {
                  break;
                }
                /* escaped utf-32 */
                chars.push(ret.char);
                i = ret.nexti;
                error = false;
                break;
              }
              ret = getu(i1 + 1, len, buf);
              if (ret.error) {
                break;
              }
              /* escaped utf-16 */
              chars.push(ret.char);
              i = ret.nexti;
              error = false;
              break;
            }
            break;
          }
          if (error) {
            throw new Error(`escaped.decode: ill-formed escape sequence at buf[${i}]`);
          }
        }
        return chars;
      },
    };

    // The line end conversion algorigthms.
    const CR = 13;
    const LF = 10;
    var lineEnds = {
      crlf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(CR);
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(CR);
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(CR);
          lfchars.push(LF);
        }
        return lfchars;
      },
      lf(chars) {
        const lfchars = [];
        let i = 0;
        while (i < chars.length) {
          switch (chars[i]) {
            case CR:
              if (i + 1 < chars.length && chars[i + 1] === LF) {
                i += 2;
              } else {
                i += 1;
              }
              lfchars.push(LF);
              break;
            case LF:
              lfchars.push(LF);
              i += 1;
              break;
            default:
              lfchars.push(chars[i]);
              i += 1;
              break;
          }
        }
        if (lfchars.length > 0 && lfchars[lfchars.length - 1] !== LF) {
          lfchars.push(LF);
        }
        return lfchars;
      },
    };

    // The base 64 algorithms.
    var base64 = {
      encode(buf) {
        if (buf.length === 0) {
          return Buffer.alloc(0);
        }
        let i;
        let j;
        let n;
        let tail = buf.length % 3;
        tail = tail > 0 ? 3 - tail : 0;
        let units = (buf.length + tail) / 3;
        const base64 = Buffer.alloc(units * 4);
        if (tail > 0) {
          units -= 1;
        }
        i = 0;
        j = 0;
        for (let u = 0; u < units; u += 1) {
          n = buf[i++] << 16;
          n += buf[i++] << 8;
          n += buf[i++];
          base64[j++] = base64codes[(n >> 18) & mask[6]];
          base64[j++] = base64codes[(n >> 12) & mask[6]];
          base64[j++] = base64codes[(n >> 6) & mask[6]];
          base64[j++] = base64codes[n & mask[6]];
        }
        if (tail === 0) {
          return base64;
        }
        if (tail === 1) {
          n = buf[i++] << 16;
          n += buf[i] << 8;
          base64[j++] = base64codes[(n >> 18) & mask[6]];
          base64[j++] = base64codes[(n >> 12) & mask[6]];
          base64[j++] = base64codes[(n >> 6) & mask[6]];
          base64[j] = base64codes[64];
          return base64;
        }
        if (tail === 2) {
          n = buf[i] << 16;
          base64[j++] = base64codes[(n >> 18) & mask[6]];
          base64[j++] = base64codes[(n >> 12) & mask[6]];
          base64[j++] = base64codes[64];
          base64[j] = base64codes[64];
          return base64;
        }
        return undefined;
      },
      decode(codes) {
        /* remove white space and ctrl characters, validate & translate characters */
        function validate(buf) {
          const chars = [];
          let tail = 0;
          for (let i = 0; i < buf.length; i += 1) {
            const char = buf[i];
            const TRUE = true;
            while (TRUE) {
              if (char === 32 || char === 9 || char === 10 || char === 13) {
                break;
              }
              if (char >= 65 && char <= 90) {
                chars.push(char - 65);
                break;
              }
              if (char >= 97 && char <= 122) {
                chars.push(char - 71);
                break;
              }
              if (char >= 48 && char <= 57) {
                chars.push(char + 4);
                break;
              }
              if (char === 43) {
                chars.push(62);
                break;
              }
              if (char === 47) {
                chars.push(63);
                break;
              }
              if (char === 61) {
                chars.push(64);
                tail += 1;
                break;
              }
              /* invalid character */
              throw new RangeError(`base64.decode: invalid character buf[${i}]: ${char}`);
            }
          }
          /* validate length */
          if (chars.length % 4 > 0) {
            throw new RangeError(`base64.decode: string length not integral multiple of 4: ${chars.length}`);
          }
          /* validate tail */
          switch (tail) {
            case 0:
              break;
            case 1:
              if (chars[chars.length - 1] !== 64) {
                throw new RangeError('base64.decode: one tail character found: not last character');
              }
              break;
            case 2:
              if (chars[chars.length - 1] !== 64 || chars[chars.length - 2] !== 64) {
                throw new RangeError('base64.decode: two tail characters found: not last characters');
              }
              break;
            default:
              throw new RangeError(`base64.decode: more than two tail characters found: ${tail}`);
          }
          return { tail, buf: Buffer.from(chars) };
        }

        if (codes.length === 0) {
          return Buffer.alloc(0);
        }
        const val = validate(codes);
        const { tail } = val;
        const base64 = val.buf;
        let i;
        let j;
        let n;
        let units = base64.length / 4;
        const buf = Buffer.alloc(units * 3 - tail);
        if (tail > 0) {
          units -= 1;
        }
        j = 0;
        i = 0;
        for (let u = 0; u < units; u += 1) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          n += base64[i++] << 6;
          n += base64[i++];
          buf[j++] = (n >> 16) & mask[8];
          buf[j++] = (n >> 8) & mask[8];
          buf[j++] = n & mask[8];
        }
        if (tail === 1) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          n += base64[i] << 6;
          buf[j++] = (n >> 16) & mask[8];
          buf[j] = (n >> 8) & mask[8];
        }
        if (tail === 2) {
          n = base64[i++] << 18;
          n += base64[i++] << 12;
          buf[j] = (n >> 16) & mask[8];
        }
        return buf;
      },
      // Converts a base 64 Buffer of bytes to a JavaScript string with line breaks.
      toString(buf) {
        if (buf.length % 4 > 0) {
          throw new RangeError(`base64.toString: input buffer length not multiple of 4: ${buf.length}`);
        }
        let str = '';
        let lineLen = 0;
        function buildLine(c1, c2, c3, c4) {
          switch (lineLen) {
            case 76:
              str += `\r\n${c1}${c2}${c3}${c4}`;
              lineLen = 4;
              break;
            case 75:
              str += `${c1}\r\n${c2}${c3}${c4}`;
              lineLen = 3;
              break;
            case 74:
              str += `${c1 + c2}\r\n${c3}${c4}`;
              lineLen = 2;
              break;
            case 73:
              str += `${c1 + c2 + c3}\r\n${c4}`;
              lineLen = 1;
              break;
            default:
              str += c1 + c2 + c3 + c4;
              lineLen += 4;
              break;
          }
        }
        function validate(c) {
          if (c >= 65 && c <= 90) {
            return true;
          }
          if (c >= 97 && c <= 122) {
            return true;
          }
          if (c >= 48 && c <= 57) {
            return true;
          }
          if (c === 43) {
            return true;
          }
          if (c === 47) {
            return true;
          }
          if (c === 61) {
            return true;
          }
          return false;
        }
        for (let i = 0; i < buf.length; i += 4) {
          for (let j = i; j < i + 4; j += 1) {
            if (!validate(buf[j])) {
              throw new RangeError(`base64.toString: buf[${j}]: ${buf[j]} : not valid base64 character code`);
            }
          }
          buildLine(
            String.fromCharCode(buf[i]),
            String.fromCharCode(buf[i + 1]),
            String.fromCharCode(buf[i + 2]),
            String.fromCharCode(buf[i + 3])
          );
        }
        return str;
      },
    };

    var transformers = {
    	utf8: utf8,
    	utf16be: utf16be,
    	utf16le: utf16le,
    	utf32be: utf32be,
    	utf32le: utf32le,
    	uint7: uint7,
    	uint8: uint8,
    	uint16be: uint16be,
    	uint16le: uint16le,
    	uint32be: uint32be,
    	uint32le: uint32le,
    	string: string,
    	escaped: escaped,
    	lineEnds: lineEnds,
    	base64: base64
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    const thisThis$1 = commonjsGlobal;


    /* types */
    const UTF8 = 'UTF8';
    const UTF16 = 'UTF16';
    const UTF16BE = 'UTF16BE';
    const UTF16LE = 'UTF16LE';
    const UTF32 = 'UTF32';
    const UTF32BE = 'UTF32BE';
    const UTF32LE = 'UTF32LE';
    const UINT7 = 'UINT7';
    const ASCII = 'ASCII';
    const BINARY = 'BINARY';
    const UINT8 = 'UINT8';
    const UINT16 = 'UINT16';
    const UINT16LE = 'UINT16LE';
    const UINT16BE = 'UINT16BE';
    const UINT32 = 'UINT32';
    const UINT32LE = 'UINT32LE';
    const UINT32BE = 'UINT32BE';
    const ESCAPED = 'ESCAPED';
    const STRING = 'STRING';

    /* private functions */
    // Find the UTF8 BOM, if any.
    const bom8 = function bom8(src) {
      src.type = UTF8;
      const buf = src.data;
      src.bom = 0;
      if (buf.length >= 3) {
        if (buf[0] === 0xef && buf[1] === 0xbb && buf[2] === 0xbf) {
          src.bom = 3;
        }
      }
    };
    // Find the UTF16 BOM, if any, and determine the UTF16 type.
    // Defaults to UTF16BE.
    // Throws TypeError exception if BOM does not match the specified type.
    const bom16 = function bom16(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF16:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 0xfe && buf[1] === 0xff) {
              src.bom = 2;
            } else if (buf[0] === 0xff && buf[1] === 0xfe) {
              src.type = UTF16LE;
              src.bom = 2;
            }
          }
          break;
        case UTF16BE:
          src.type = UTF16BE;
          if (buf.length >= 2) {
            if (buf[0] === 0xfe && buf[1] === 0xff) {
              src.bom = 2;
            } else if (buf[0] === 0xff && buf[1] === 0xfe) {
              throw new TypeError(`src type: "${UTF16BE}" specified but BOM is for "${UTF16LE}"`);
            }
          }
          break;
        case UTF16LE:
          src.type = UTF16LE;
          if (buf.length >= 0) {
            if (buf[0] === 0xfe && buf[1] === 0xff) {
              throw new TypeError(`src type: "${UTF16LE}" specified but BOM is for "${UTF16BE}"`);
            } else if (buf[0] === 0xff && buf[1] === 0xfe) {
              src.bom = 2;
            }
          }
          break;
        default:
          throw new TypeError(`UTF16 BOM: src type "${src.type}" unrecognized`);
      }
    };
    // Find the UTF32 BOM, if any, and determine the UTF32 type.
    // Defaults to UTF32BE.
    // Throws exception if BOM does not match the specified type.
    const bom32 = function bom32(src) {
      const buf = src.data;
      src.bom = 0;
      switch (src.type) {
        case UTF32:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {
              src.bom = 4;
            }
            if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {
              src.type = UTF32LE;
              src.bom = 4;
            }
          }
          break;
        case UTF32BE:
          src.type = UTF32BE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {
              src.bom = 4;
            }
            if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {
              throw new TypeError(`src type: ${UTF32BE} specified but BOM is for ${UTF32LE}"`);
            }
          }
          break;
        case UTF32LE:
          src.type = UTF32LE;
          if (buf.length >= 4) {
            if (buf[0] === 0 && buf[1] === 0 && buf[2] === 0xfe && buf[3] === 0xff) {
              throw new TypeError(`src type: "${UTF32LE}" specified but BOM is for "${UTF32BE}"`);
            }
            if (buf[0] === 0xff && buf[1] === 0xfe && buf[2] === 0 && buf[3] === 0) {
              src.bom = 4;
            }
          }
          break;
        default:
          throw new TypeError(`UTF32 BOM: src type "${src.type}" unrecognized`);
      }
    };
    // Validates the source encoding type and matching data.
    // If the BASE64: prefix is present, the base 64 decoding is done here as the initial step.
    // - For type STRING, data must be a JavaScript string.
    // - For type BASE64:*, data may be a string or Buffer.
    // - For all other types, data must be a Buffer.
    // - The BASE64: prefix is not allowed for type STRING.
    const validateSrc = function validateSrc(type, data) {
      function getType(typeArg) {
        const ret = {
          type: '',
          base64: false,
        };
        const rx = /^(base64:)?([a-zA-Z0-9]+)$/i;
        const result = rx.exec(typeArg);
        if (result) {
          if (result[2]) {
            ret.type = result[2].toUpperCase();
          }
          if (result[1]) {
            ret.base64 = true;
          }
        }
        return ret;
      }
      if (typeof type !== 'string' || type === '') {
        throw new TypeError(`type: "${type}" not recognized`);
      }
      const ret = getType(type.toUpperCase());
      if (ret.base64) {
        /* handle base 64 */
        if (ret.type === STRING) {
          throw new TypeError(`type: "${type} "BASE64:" prefix not allowed with type ${STRING}`);
        }
        if (Buffer.isBuffer(data)) {
          ret.data = transformers.base64.decode(data);
        } else if (typeof data === 'string') {
          const buf = Buffer.from(data, 'ascii');
          ret.data = transformers.base64.decode(buf);
        } else {
          throw new TypeError(`type: "${type} unrecognized data type: typeof(data): ${typeof data}`);
        }
      } else {
        ret.data = data;
      }
      switch (ret.type) {
        case UTF8:
          bom8(ret);
          break;
        case UTF16:
        case UTF16BE:
        case UTF16LE:
          bom16(ret);
          break;
        case UTF32:
        case UTF32BE:
        case UTF32LE:
          bom32(ret);
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case STRING:
        case ESCAPED:
          break;
        default:
          throw new TypeError(`type: "${type}" not recognized`);
      }
      if (ret.type === STRING) {
        if (typeof ret.data !== 'string') {
          throw new TypeError(`type: "${type}" but data is not a string`);
        }
      } else if (!Buffer.isBuffer(ret.data)) {
        throw new TypeError(`type: "${type}" but data is not a Buffer`);
      }
      return ret;
    };
    // Disassembles and validates the destination type.
    // `chars` must be an Array of integers.
    // The :BASE64 suffix is not allowed for type STRING.
    const validateDst = function validateDst(type, chars) {
      function getType(typeArg) {
        let fix;
        let rem;
        const ret = {
          crlf: false,
          lf: false,
          base64: false,
          type: '',
        };
        /* prefix, if any */
        const TRUE = true;
        while (TRUE) {
          rem = typeArg;
          fix = typeArg.slice(0, 5);
          if (fix === 'CRLF:') {
            ret.crlf = true;
            rem = typeArg.slice(5);
            break;
          }
          fix = typeArg.slice(0, 3);
          if (fix === 'LF:') {
            ret.lf = true;
            rem = typeArg.slice(3);
            break;
          }
          break;
        }
        /* suffix, if any */
        fix = rem.split(':');
        if (fix.length === 1) {
          // eslint-disable-next-line prefer-destructuring
          ret.type = fix[0];
        } else if (fix.length === 2 && fix[1] === 'BASE64') {
          ret.base64 = true;
          // eslint-disable-next-line prefer-destructuring
          ret.type = fix[0];
        }
        return ret;
      }
      if (!Array.isArray(chars)) {
        throw new TypeError(`dst chars: not array: "${typeof chars}`);
      }
      if (typeof type !== 'string') {
        throw new TypeError(`dst type: not string: "${typeof type}`);
      }
      const ret = getType(type.toUpperCase());
      switch (ret.type) {
        case UTF8:
        case UTF16BE:
        case UTF16LE:
        case UTF32BE:
        case UTF32LE:
        case UINT7:
        case UINT8:
        case UINT16LE:
        case UINT16BE:
        case UINT32LE:
        case UINT32BE:
        case ESCAPED:
          break;
        case STRING:
          if (ret.base64) {
            throw new TypeError(`":BASE64" suffix not allowed with type ${STRING}`);
          }
          break;
        case ASCII:
          ret.type = UINT7;
          break;
        case BINARY:
          ret.type = UINT8;
          break;
        case UTF16:
          ret.type = UTF16BE;
          break;
        case UTF32:
          ret.type = UTF32BE;
          break;
        case UINT16:
          ret.type = UINT16BE;
          break;
        case UINT32:
          ret.type = UINT32BE;
          break;
        default:
          throw new TypeError(`dst type unrecognized: "${type}" : must have form [crlf:|lf:]type[:base64]`);
      }
      return ret;
    };
    // Select and call the requested encoding function.
    const encode = function encode(type, chars) {
      switch (type) {
        case UTF8:
          return transformers.utf8.encode(chars);
        case UTF16BE:
          return transformers.utf16be.encode(chars);
        case UTF16LE:
          return transformers.utf16le.encode(chars);
        case UTF32BE:
          return transformers.utf32be.encode(chars);
        case UTF32LE:
          return transformers.utf32le.encode(chars);
        case UINT7:
          return transformers.uint7.encode(chars);
        case UINT8:
          return transformers.uint8.encode(chars);
        case UINT16BE:
          return transformers.uint16be.encode(chars);
        case UINT16LE:
          return transformers.uint16le.encode(chars);
        case UINT32BE:
          return transformers.uint32be.encode(chars);
        case UINT32LE:
          return transformers.uint32le.encode(chars);
        case STRING:
          return transformers.string.encode(chars);
        case ESCAPED:
          return transformers.escaped.encode(chars);
        default:
          throw new TypeError(`encode type "${type}" not recognized`);
      }
    };
    // Select and call the requested decoding function.
    // `src` contains BOM information as well as the source type and data.
    const decode = function decode(src) {
      switch (src.type) {
        case UTF8:
          return transformers.utf8.decode(src.data, src.bom);
        case UTF16LE:
          return transformers.utf16le.decode(src.data, src.bom);
        case UTF16BE:
          return transformers.utf16be.decode(src.data, src.bom);
        case UTF32BE:
          return transformers.utf32be.decode(src.data, src.bom);
        case UTF32LE:
          return transformers.utf32le.decode(src.data, src.bom);
        case UINT7:
          return transformers.uint7.decode(src.data);
        case UINT8:
          return transformers.uint8.decode(src.data);
        case UINT16BE:
          return transformers.uint16be.decode(src.data);
        case UINT16LE:
          return transformers.uint16le.decode(src.data);
        case UINT32BE:
          return transformers.uint32be.decode(src.data);
        case UINT32LE:
          return transformers.uint32le.decode(src.data);
        case STRING:
          return transformers.string.decode(src.data);
        case ESCAPED:
          return transformers.escaped.decode(src.data);
        default:
          throw new TypeError(`decode type "${src.type}" not recognized`);
      }
    };

    // The public decoding function. Returns an array of integers.
    var decode_1 = function exportsDecode(type, data) {
      const src = validateSrc(type, data);
      return decode(src);
    };
    // The public encoding function. Returns a Buffer-typed byte array.
    var encode_1 = function exportsEncode(type, chars) {
      let c;
      let buf;
      const dst = validateDst(type, chars);
      if (dst.crlf) {
        /* prefix with CRLF line end conversion, don't contaminate caller's chars array */
        c = transformers.lineEnds.crlf(chars);
        buf = encode(dst.type, c);
      } else if (dst.lf) {
        /* prefix with LF line end conversion, don't contaminate caller's chars array */
        c = transformers.lineEnds.lf(chars);
        buf = encode(dst.type, c);
      } else {
        buf = encode(dst.type, chars);
      }
      if (dst.base64) {
        /* post base 64 encoding */
        buf = transformers.base64.encode(buf);
      }
      return buf;
    };
    // Converts data of type `srcType` to data of type `dstType`.
    // `srcData` may be a JavaScript String, or node.js Buffer, depending on the corresponding type.
    var convert = function convert(srcType, srcData, dstType) {
      return thisThis$1.encode(dstType, thisThis$1.decode(srcType, srcData));
    };

    var converter = {
    	decode: decode_1,
    	encode: encode_1,
    	convert: convert
    };

    // This module has been developed programmatically in the `apg-lib` build process.
    // It is used to build web pages programatically on the fly without the need for <script> or <style> tags.

    var emitcss = function emittcss(){
    return '/* This file automatically generated by jsonToless() and LESS. */\n.apg-mono {\n  font-family: monospace;\n}\n.apg-active {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-match {\n  font-weight: bold;\n  color: #264BFF;\n}\n.apg-empty {\n  font-weight: bold;\n  color: #0fbd0f;\n}\n.apg-nomatch {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-lh-match {\n  font-weight: bold;\n  color: #1A97BA;\n}\n.apg-lb-match {\n  font-weight: bold;\n  color: #5F1687;\n}\n.apg-remainder {\n  font-weight: bold;\n  color: #999999;\n}\n.apg-ctrl-char {\n  font-weight: bolder;\n  font-style: italic;\n  font-size: 0.6em;\n}\n.apg-line-end {\n  font-weight: bold;\n  color: #000000;\n}\n.apg-error {\n  font-weight: bold;\n  color: #FF4000;\n}\n.apg-phrase {\n  color: #000000;\n  background-color: #8caae6;\n}\n.apg-empty-phrase {\n  color: #0fbd0f;\n}\ntable.apg-state {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th,\ntable.apg-state td {\n  text-align: left;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-state th:nth-last-child(2),\ntable.apg-state td:nth-last-child(2) {\n  text-align: right;\n}\ntable.apg-state caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-stats {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats th,\ntable.apg-stats td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-stats caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-trace th,\ntable.apg-trace td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-trace th:last-child,\ntable.apg-trace th:nth-last-child(2),\ntable.apg-trace td:last-child,\ntable.apg-trace td:nth-last-child(2) {\n  text-align: left;\n}\ntable.apg-grammar {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-grammar th,\ntable.apg-grammar td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-grammar th:last-child,\ntable.apg-grammar td:last-child {\n  text-align: left;\n}\ntable.apg-rules {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-rules th,\ntable.apg-rules td {\n  text-align: right;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-rules a {\n  color: #003399 !important;\n}\ntable.apg-rules a:hover {\n  color: #8caae6 !important;\n}\ntable.apg-attrs {\n  font-family: monospace;\n  margin-top: 5px;\n  font-size: 11px;\n  line-height: 130%;\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs caption {\n  font-size: 125%;\n  line-height: 130%;\n  font-weight: bold;\n  text-align: left;\n}\ntable.apg-attrs th,\ntable.apg-attrs td {\n  text-align: center;\n  border: 1px solid black;\n  border-collapse: collapse;\n}\ntable.apg-attrs th:nth-child(1),\ntable.apg-attrs th:nth-child(2),\ntable.apg-attrs th:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs td:nth-child(1),\ntable.apg-attrs td:nth-child(2),\ntable.apg-attrs td:nth-child(3) {\n  text-align: right;\n}\ntable.apg-attrs a {\n  color: #003399 !important;\n}\ntable.apg-attrs a:hover {\n  color: #8caae6 !important;\n}\n';
    };

    /* eslint-disable func-names */

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module exports a variety of utility functions that support
    // [`apg`](https://github.com/ldthomas/apg-js2), [`apg-lib`](https://github.com/ldthomas/apg-js2-lib)
    // and the generated parser applications.






    const thisFileName = 'utilities.js: ';
    const thisThis = commonjsGlobal;

    /* translate (implied) phrase beginning character and length to actual first and last character indexes */
    /* used by multiple phrase handling functions */
    const getBounds = function (length, begArg, len) {
      let end;
      let beg = begArg;
      const TRUE = true;
      while (TRUE) {
        if (length <= 0) {
          beg = 0;
          end = 0;
          break;
        }
        if (typeof beg !== 'number') {
          beg = 0;
          end = length;
          break;
        }
        if (beg >= length) {
          beg = length;
          end = length;
          break;
        }
        if (typeof len !== 'number') {
          end = length;
          break;
        }
        end = beg + len;
        if (end > length) {
          end = length;
          break;
        }
        break;
      }
      return {
        beg,
        end,
      };
    };
    // Generates a complete, minimal HTML5 page, inserting the user's HTML text on the page.
    // - *html* - the page text in HTML format
    // - *title* - the HTML page `<title>` - defaults to `htmlToPage`.
    var htmlToPage = function (html, titleArg) {
      let title;
      if (typeof html !== 'string') {
        throw new Error(`${thisFileName}htmlToPage: input HTML is not a string`);
      }
      if (typeof titleArg !== 'string') {
        title = 'htmlToPage';
      } else {
        title = titleArg;
      }
      let page = '';
      page += '<!DOCTYPE html>\n';
      page += '<html lang="en">\n';
      page += '<head>\n';
      page += '<meta charset="utf-8">\n';
      page += `<title>${title}</title>\n`;
      page += '<style>\n';
      page += emitcss();
      page += '</style>\n';
      page += '</head>\n<body>\n';
      page += `<p>${new Date()}</p>\n`;
      page += html;
      page += '</body>\n</html>\n';
      return page;
    };
    // Formats the returned object from `parser.parse()`
    // into an HTML table.
    // ```
    // return {
    //   success : sysData.success,
    //   state : sysData.state,
    //   length : charsLength,
    //   matched : sysData.phraseLength,
    //   maxMatched : maxMatched,
    //   maxTreeDepth : maxTreeDepth,
    //   nodeHits : nodeHits,
    //   inputLength : chars.length,
    //   subBegin : charsBegin,
    //   subEnd : charsEnd,
    //   subLength : charsLength
    // };
    // ```
    var parserResultToHtml = function (result, caption) {
      let cap = null;
      if (typeof caption === 'string' && caption !== '') {
        cap = caption;
      }
      let success;
      let state;
      if (result.success === true) {
        success = `<span class="${style.CLASS_MATCH}">true</span>`;
      } else {
        success = `<span class="${style.CLASS_NOMATCH}">false</span>`;
      }
      if (result.state === identifiers.EMPTY) {
        state = `<span class="${style.CLASS_EMPTY}">EMPTY</span>`;
      } else if (result.state === identifiers.MATCH) {
        state = `<span class="${style.CLASS_MATCH}">MATCH</span>`;
      } else if (result.state === identifiers.NOMATCH) {
        state = `<span class="${style.CLASS_NOMATCH}">NOMATCH</span>`;
      } else {
        state = `<span class="${style.CLASS_NOMATCH}">unrecognized</span>`;
      }
      let html = '';
      html += `<table class="${style.CLASS_STATE}">\n`;
      if (cap) {
        html += `<caption>${cap}</caption>\n`;
      }
      html += '<tr><th>state item</th><th>value</th><th>description</th></tr>\n';
      html += `<tr><td>parser success</td><td>${success}</td>\n`;
      html += `<td><span class="${style.CLASS_MATCH}">true</span> if the parse succeeded,\n`;
      html += ` <span class="${style.CLASS_NOMATCH}">false</span> otherwise`;
      html += '<br><i>NOTE: for success, entire string must be matched</i></td></tr>\n';
      html += `<tr><td>parser state</td><td>${state}</td>\n`;
      html += `<td><span class="${style.CLASS_EMPTY}">EMPTY</span>, `;
      html += `<span class="${style.CLASS_MATCH}">MATCH</span> or \n`;
      html += `<span class="${style.CLASS_NOMATCH}">NOMATCH</span></td></tr>\n`;
      html += `<tr><td>string length</td><td>${result.length}</td><td>length of the input (sub)string</td></tr>\n`;
      html += `<tr><td>matched length</td><td>${result.matched}</td><td>number of input string characters matched</td></tr>\n`;
      html += `<tr><td>max matched</td><td>${result.maxMatched}</td><td>maximum number of input string characters matched</td></tr>\n`;
      html += `<tr><td>max tree depth</td><td>${result.maxTreeDepth}</td><td>maximum depth of the parse tree reached</td></tr>\n`;
      html += `<tr><td>node hits</td><td>${result.nodeHits}</td><td>number of parse tree node hits (opcode function calls)</td></tr>\n`;
      html += `<tr><td>input length</td><td>${result.inputLength}</td><td>length of full input string</td></tr>\n`;
      html += `<tr><td>sub-string begin</td><td>${result.subBegin}</td><td>sub-string first character index</td></tr>\n`;
      html += `<tr><td>sub-string end</td><td>${result.subEnd}</td><td>sub-string end-of-string index</td></tr>\n`;
      html += `<tr><td>sub-string length</td><td>${result.subLength}</td><td>sub-string length</td></tr>\n`;
      html += '</table>\n';
      return html;
    };
    // Translates a sub-array of integer character codes into a string.
    // Very useful in callback functions to translate the matched phrases into strings.
    var charsToString = function (chars, phraseIndex, phraseLength) {
      let beg;
      let end;
      if (typeof phraseIndex === 'number') {
        if (phraseIndex >= chars.length) {
          return '';
        }
        beg = phraseIndex < 0 ? 0 : phraseIndex;
      } else {
        beg = 0;
      }
      if (typeof phraseLength === 'number') {
        if (phraseLength <= 0) {
          return '';
        }
        end = phraseLength > chars.length - beg ? chars.length : beg + phraseLength;
      } else {
        end = chars.length;
      }
      if (beg < end) {
        return converter.encode('UTF16LE', chars.slice(beg, end)).toString('utf16le');
      }
      return '';
    };
    // Translates a string into an array of integer character codes.
    var stringToChars = function (string) {
      return converter.decode('STRING', string);
    };
    // Translates an opcode identifier into a human-readable string.
    var opcodeToString = function (type) {
      let ret = 'unknown';
      switch (type) {
        case identifiers.ALT:
          ret = 'ALT';
          break;
        case identifiers.CAT:
          ret = 'CAT';
          break;
        case identifiers.RNM:
          ret = 'RNM';
          break;
        case identifiers.UDT:
          ret = 'UDT';
          break;
        case identifiers.AND:
          ret = 'AND';
          break;
        case identifiers.NOT:
          ret = 'NOT';
          break;
        case identifiers.REP:
          ret = 'REP';
          break;
        case identifiers.TRG:
          ret = 'TRG';
          break;
        case identifiers.TBS:
          ret = 'TBS';
          break;
        case identifiers.TLS:
          ret = 'TLS';
          break;
        case identifiers.BKR:
          ret = 'BKR';
          break;
        case identifiers.BKA:
          ret = 'BKA';
          break;
        case identifiers.BKN:
          ret = 'BKN';
          break;
        case identifiers.ABG:
          ret = 'ABG';
          break;
        case identifiers.AEN:
          ret = 'AEN';
          break;
        default:
          throw new Error('unrecognized opcode');
      }
      return ret;
    };
    // Translates an state identifier into a human-readable string.
    var stateToString = function (state) {
      let ret = 'unknown';
      switch (state) {
        case identifiers.ACTIVE:
          ret = 'ACTIVE';
          break;
        case identifiers.MATCH:
          ret = 'MATCH';
          break;
        case identifiers.EMPTY:
          ret = 'EMPTY';
          break;
        case identifiers.NOMATCH:
          ret = 'NOMATCH';
          break;
        default:
          throw new Error('unrecognized state');
      }
      return ret;
    };
    // Array which translates all 128, 7-bit ASCII character codes to their respective HTML format.
    var asciiChars = [
      'NUL',
      'SOH',
      'STX',
      'ETX',
      'EOT',
      'ENQ',
      'ACK',
      'BEL',
      'BS',
      'TAB',
      'LF',
      'VT',
      'FF',
      'CR',
      'SO',
      'SI',
      'DLE',
      'DC1',
      'DC2',
      'DC3',
      'DC4',
      'NAK',
      'SYN',
      'ETB',
      'CAN',
      'EM',
      'SUB',
      'ESC',
      'FS',
      'GS',
      'RS',
      'US',
      '&nbsp;',
      '!',
      '&#34;',
      '#',
      '$',
      '%',
      '&#38;',
      '&#39;',
      '(',
      ')',
      '*',
      '+',
      ',',
      '-',
      '.',
      '/',
      '0',
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      ':',
      ';',
      '&#60;',
      '=',
      '&#62;',
      '?',
      '@',
      'A',
      'B',
      'C',
      'D',
      'E',
      'F',
      'G',
      'H',
      'I',
      'J',
      'K',
      'L',
      'M',
      'N',
      'O',
      'P',
      'Q',
      'R',
      'S',
      'T',
      'U',
      'V',
      'W',
      'X',
      'Y',
      'Z',
      '[',
      '&#92;',
      ']',
      '^',
      '_',
      '`',
      'a',
      'b',
      'c',
      'd',
      'e',
      'f',
      'g',
      'h',
      'i',
      'j',
      'k',
      'l',
      'm',
      'n',
      'o',
      'p',
      'q',
      'r',
      's',
      't',
      'u',
      'v',
      'w',
      'x',
      'y',
      'z',
      '{',
      '|',
      '}',
      '~',
      'DEL',
    ];
    // Translates a single character to hexadecimal with leading zeros for 2, 4, or 8 digit display.
    var charToHex = function (char) {
      let ch = char.toString(16).toUpperCase();
      switch (ch.length) {
        case 1:
        case 3:
        case 7:
          ch = `0${ch}`;
          break;
        case 2:
        case 6:
          ch = `00${ch}`;
          break;
        case 4:
          break;
        case 5:
          ch = `000${ch}`;
          break;
        default:
          throw new Error('unrecognized option');
      }
      return ch;
    };
    // Translates a sub-array of character codes to decimal display format.
    var charsToDec = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToDec: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += chars[bounds.beg];
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,${chars[i]}`;
        }
      }
      return ret;
    };
    // Translates a sub-array of character codes to hexadecimal display format.
    var charsToHex = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\x${thisThis.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\x${thisThis.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    var charsToHtmlEntities = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToHex: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          ret += `&#x${chars[i].toString(16)};`;
        }
      }
      return ret;
    };
    // Translates a sub-array of character codes to Unicode display format.
    function isUnicode(char) {
      if (char >= 0xd800 && char <= 0xdfff) {
        return false;
      }
      if (char > 0x10ffff) {
        return false;
      }
      return true;
    }
    var charsToUnicode = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        for (let i = bounds.beg; i < bounds.end; i += 1) {
          if (isUnicode(chars[i])) {
            ret += `&#${chars[i]};`;
          } else {
            ret += ` U+${thisThis.charToHex(chars[i])}`;
          }
        }
      }
      return ret;
    };
    // Translates a sub-array of character codes to JavaScript Unicode display format (`\uXXXX`).
    var charsToJsUnicode = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToJsUnicode: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      if (bounds.end > bounds.beg) {
        ret += `\\u${thisThis.charToHex(chars[bounds.beg])}`;
        for (let i = bounds.beg + 1; i < bounds.end; i += 1) {
          ret += `,\\u${thisThis.charToHex(chars[i])}`;
        }
      }
      return ret;
    };
    // Translates a sub-array of character codes to printing ASCII character display format.
    var charsToAscii = function (chars, beg, len) {
      let ret = '';
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAscii: input must be an array of integers`);
      }
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        const char = chars[i];
        if (char >= 32 && char <= 126) {
          ret += String.fromCharCode(char);
        } else {
          ret += `\\x${thisThis.charToHex(char)}`;
        }
      }
      return ret;
    };
    // Translates a sub-array of character codes to HTML display format.
    var charsToAsciiHtml = function (chars, beg, len) {
      if (!Array.isArray(chars)) {
        throw new Error(`${thisFileName}charsToAsciiHtml: input must be an array of integers`);
      }
      let html = '';
      let char;
      const bounds = getBounds(chars.length, beg, len);
      for (let i = bounds.beg; i < bounds.end; i += 1) {
        char = chars[i];
        if (char < 32 || char === 127) {
          /* control characters */
          html += `<span class="${style.CLASS_CTRLCHAR}">${thisThis.asciiChars[char]}</span>`;
        } else if (char > 127) {
          /* non-ASCII */
          html += `<span class="${style.CLASS_CTRLCHAR}">U+${thisThis.charToHex(char)}</span>`;
        } else {
          /* printing ASCII, 32 <= char <= 126 */
          html += thisThis.asciiChars[char];
        }
      }
      return html;
    };
    // Translates a JavaScript string to HTML display format.
    var stringToAsciiHtml = function (str) {
      const chars = converter.decode('STRING', str);
      return this.charsToAsciiHtml(chars);
    };

    var utilities = {
    	htmlToPage: htmlToPage,
    	parserResultToHtml: parserResultToHtml,
    	charsToString: charsToString,
    	stringToChars: stringToChars,
    	opcodeToString: opcodeToString,
    	stateToString: stateToString,
    	asciiChars: asciiChars,
    	charToHex: charToHex,
    	charsToDec: charsToDec,
    	charsToHex: charsToHex,
    	charsToHtmlEntities: charsToHtmlEntities,
    	charsToUnicode: charsToUnicode,
    	charsToJsUnicode: charsToJsUnicode,
    	charsToAscii: charsToAscii,
    	charsToAsciiHtml: charsToAsciiHtml,
    	stringToAsciiHtml: stringToAsciiHtml
    };

    /* eslint-disable guard-for-in */

    /* eslint-disable no-restricted-syntax */
    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module is used by the parser to build an [Abstract Syntax Tree](https://en.wikipedia.org/wiki/Abstract_syntax_tree) (AST).
    // The AST can be thought of as a subset of the full parse tree.
    // Each node of the AST holds the phrase that was matched at the corresponding, named parse tree node.
    // It is built as the parser successfully matches phrases to the rule names
    // (`RNM` operators) and `UDT`s as it parses an input string.
    // The user controls which `RNM` or `UDT` names to keep on the AST.
    // The user can also associate callback functions with some or all of the retained
    // AST nodes to be used to translate the node phrases. That is, associate semantic
    // actions to the matched phrases.
    // Translating the AST rather that attempting to apply semantic actions during
    // the parsing process, has the advantage that there is no backtracking and that the phrases
    // are known while traversing down tree as will as up.
    //
    // Let `ast` be an `ast.js` object. To identify a node to be kept on the AST:
    // ```
    // ast.callbacks["rulename"] = true; (all nodes default to false)
    // ```
    // To associate a callback function with a node:
    // ```
    // ast.callbacks["rulename"] = fn
    // ```
    // `rulename` is any `RNM` or `UDT` name defined by the associated grammar
    // and `fn` is a user-written callback function.
    // (See [`apg-examples`](https://github.com/ldthomas/apg-js2-examples/tree/master/ast) for examples of how to create an AST,
    // define the nodes and callback functions and attach it to a parser.)
    var ast = function exportsAst() {
      const id = identifiers;
      const utils = utilities;

      const thisFileName = 'ast.js: ';
      const that = this;
      let rules = null;
      let udts = null;
      let chars = null;
      let nodeCount = 0;
      const nodesDefined = [];
      const nodeCallbacks = [];
      const stack = [];
      const records = [];
      this.callbacks = [];
      this.astObject = 'astObject';
      /* called by the parser to initialize the AST with the rules, UDTs and the input characters */
      this.init = function init(rulesIn, udtsIn, charsIn) {
        stack.length = 0;
        records.length = 0;
        nodesDefined.length = 0;
        nodeCount = 0;
        rules = rulesIn;
        udts = udtsIn;
        chars = charsIn;
        let i;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        nodeCount = rules.length + udts.length;
        for (i = 0; i < nodeCount; i += 1) {
          nodesDefined[i] = false;
          nodeCallbacks[i] = null;
        }
        for (const index in that.callbacks) {
          const lower = index.toLowerCase();
          i = list.indexOf(lower);
          if (i < 0) {
            throw new Error(`${thisFileName}init: node '${index}' not a rule or udt name`);
          }
          if (typeof that.callbacks[index] === 'function') {
            nodesDefined[i] = true;
            nodeCallbacks[i] = that.callbacks[index];
          }
          if (that.callbacks[index] === true) {
            nodesDefined[i] = true;
          }
        }
      };
      /* AST node definitions - called by the parser's `RNM` operator */
      this.ruleDefined = function ruleDefined(index) {
        return nodesDefined[index] !== false;
      };
      /* AST node definitions - called by the parser's `UDT` operator */
      this.udtDefined = function udtDefined(index) {
        return nodesDefined[rules.length + index] !== false;
      };
      /* called by the parser's `RNM` & `UDT` operators */
      /* builds a record for the downward traversal of the node */
      this.down = function down(callbackIndex, name) {
        const thisIndex = records.length;
        stack.push(thisIndex);
        records.push({
          name,
          thisIndex,
          thatIndex: null,
          state: id.SEM_PRE,
          callbackIndex,
          phraseIndex: null,
          phraseLength: null,
          stack: stack.length,
        });
        return thisIndex;
      };
      /* called by the parser's `RNM` & `UDT` operators */
      /* builds a record for the upward traversal of the node */
      this.up = function up(callbackIndex, name, phraseIndex, phraseLength) {
        const thisIndex = records.length;
        const thatIndex = stack.pop();
        records.push({
          name,
          thisIndex,
          thatIndex,
          state: id.SEM_POST,
          callbackIndex,
          phraseIndex,
          phraseLength,
          stack: stack.length,
        });
        records[thatIndex].thatIndex = thisIndex;
        records[thatIndex].phraseIndex = phraseIndex;
        records[thatIndex].phraseLength = phraseLength;
        return thisIndex;
      };
      // Called by the user to translate the AST.
      // Translate means to associate or apply some semantic action to the
      // phrases that were syntactically matched to the AST nodes according
      // to the defining grammar.
      // ```
      // data - optional user-defined data
      //        passed to the callback functions by the translator
      // ```
      this.translate = function translate(data) {
        let ret;
        let callback;
        let record;
        for (let i = 0; i < records.length; i += 1) {
          record = records[i];
          callback = nodeCallbacks[record.callbackIndex];
          if (record.state === id.SEM_PRE) {
            if (callback !== null) {
              ret = callback(id.SEM_PRE, chars, record.phraseIndex, record.phraseLength, data);
              if (ret === id.SEM_SKIP) {
                i = record.thatIndex;
              }
            }
          } else if (callback !== null) {
            callback(id.SEM_POST, chars, record.phraseIndex, record.phraseLength, data);
          }
        }
      };
      /* called by the parser to reset the length of the records array */
      /* necessary on backtracking */
      this.setLength = function setLength(length) {
        records.length = length;
        if (length > 0) {
          stack.length = records[length - 1].stack;
        } else {
          stack.length = 0;
        }
      };
      /* called by the parser to get the length of the records array */
      this.getLength = function getLength() {
        return records.length;
      };
      /* helper for XML display */
      function indent(n) {
        let ret = '';
        for (let i = 0; i < n; i += 1) {
          ret += ' ';
        }
        return ret;
      }
      // Generate an `XML` version of the AST.
      // Useful if you want to use a special or favorite XML parser to translate the
      // AST.
      // ```
      // mode - the display mode of the captured phrases
      //      - default mode is "ascii"
      //      - can be: "ascii"
      //                "decimal"
      //                "hexadecimal"
      //                "unicode"
      // ```
      this.toXml = function toSml(modeArg) {
        let display = utils.charsToDec;
        let caption = 'decimal integer character codes';
        if (typeof modeArg === 'string' && modeArg.length >= 3) {
          const mode = modeArg.slice(0, 3).toLowerCase();
          if (mode === 'asc') {
            display = utils.charsToAscii;
            caption = 'ASCII for printing characters, hex for non-printing';
          } else if (mode === 'hex') {
            display = utils.charsToHex;
            caption = 'hexadecimal integer character codes';
          } else if (mode === 'uni') {
            display = utils.charsToUnicode;
            caption = 'Unicode UTF-32 integer character codes';
          }
        }
        let xml = '';
        let depth = 0;
        xml += '<?xml version="1.0" encoding="utf-8"?>\n';
        xml += `<root nodes="${records.length / 2}" characters="${chars.length}">\n`;
        xml += `<!-- input string, ${caption} -->\n`;
        xml += indent(depth + 2);
        xml += display(chars);
        xml += '\n';
        records.forEach((rec) => {
          if (rec.state === id.SEM_PRE) {
            depth += 1;
            xml += indent(depth);
            xml += `<node name="${rec.name}" index="${rec.phraseIndex}" length="${rec.phraseLength}">\n`;
            xml += indent(depth + 2);
            xml += display(chars, rec.phraseIndex, rec.phraseLength);
            xml += '\n';
          } else {
            xml += indent(depth);
            xml += `</node><!-- name="${rec.name}" -->\n`;
            depth -= 1;
          }
        });

        xml += '</root>\n';
        return xml;
      };
      /* generate a JavaScript object version of the AST */
      /* for the phrase-matching engine apg-exp */
      this.phrases = function phrases() {
        const obj = {};
        let i;
        let record;
        for (i = 0; i < records.length; i += 1) {
          record = records[i];
          if (record.state === id.SEM_PRE) {
            if (!Array.isArray(obj[record.name])) {
              obj[record.name] = [];
            }
            obj[record.name].push({
              index: record.phraseIndex,
              length: record.phraseLength,
            });
          }
        }
        return obj;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module acts as a "circular buffer". It is used to keep track
    // only the last N records in an array of records. If more than N records
    // are saved, each additional record overwrites the previously oldest record.
    // This module deals only with the record indexes and does not save
    // any actual records. It is used by [`trace.js`](./trace.html) for limiting the number of
    // trace records saved.
    var circularBuffer = function exportsCircularBuffer() {
      'use strict;';

      const thisFileName = 'circular-buffer.js: ';
      let itemIndex = -1;
      let maxListSize = 0;
      // Initialize buffer.<br>
      // *size* is `maxListSize`, the maximum number of records saved before overwriting begins.
      this.init = function init(size) {
        if (typeof size !== 'number' || size <= 0) {
          throw new Error(`${thisFileName}init: circular buffer size must an integer > 0`);
        }
        maxListSize = Math.ceil(size);
        itemIndex = -1;
      };
      // Call this to increment the number of records collected.<br>
      // Returns the array index number to store the next record in.
      this.increment = function increment() {
        itemIndex += 1;
        return (itemIndex + maxListSize) % maxListSize;
      };
      // Returns `maxListSize` - the maximum number of records to keep in the buffer.
      this.maxSize = function maxSize() {
        return maxListSize;
      };
      // Returns the highest number of items saved.<br>
      // (The number of items is the actual number of records processed
      // even though only `maxListSize` records are actually retained.)
      this.items = function items() {
        return itemIndex + 1;
      };
      // Returns the record number associated with this item index.
      this.getListIndex = function getListIndex(item) {
        if (itemIndex === -1) {
          return -1;
        }
        if (item < 0 || item > itemIndex) {
          return -1;
        }
        if (itemIndex - item >= maxListSize) {
          return -1;
        }
        return (item + maxListSize) % maxListSize;
      };
      // The iterator over the circular buffer.
      // The user's function, `fn`, will be called with arguments `fn(listIndex, itemIndex)`
      // where `listIndex` is the saved record index and `itemIndex` is the actual item index.
      this.forEach = function forEach(fn) {
        if (itemIndex === -1) {
          /* no records have been collected */
          return;
        }
        if (itemIndex < maxListSize) {
          /* fewer than maxListSize records have been collected - number of items = number of records */
          for (let i = 0; i <= itemIndex; i += 1) {
            fn(i, i);
          }
          return;
        }
        /* start with the oldest record saved and finish with the most recent record saved */
        for (let i = itemIndex - maxListSize + 1; i <= itemIndex; i += 1) {
          const listIndex = (i + maxListSize) % maxListSize;
          fn(listIndex, i);
        }
      };
    };

    /* eslint-disable func-names */

    /* eslint-disable no-restricted-syntax */
    /* eslint-disable new-cap */
    /* eslint-disable guard-for-in */
    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This is the primary object of `apg-lib`. Calling its `parse()` member function
    // walks the parse tree of opcodes, matching phrases from the input string as it goes.
    // The working code for all of the operators, `ALT`, `CAT`, etc. is in this module.
    var parser$1 = function parser() {
      const id = identifiers;
      const utils = utilities;

      const thisFileName = 'parser.js: ';
      const thisThis = this;
      let opExecute;
      this.ast = null;
      this.stats = null;
      this.trace = null;
      this.callbacks = [];
      let opcodes = null;
      let chars = null;
      let charsBegin;
      let charsLength;
      let charsEnd;
      let lookAround;
      let treeDepth = 0;
      let maxTreeDepth = 0;
      let nodeHits = 0;
      let ruleCallbacks = null;
      let udtCallbacks = null;
      let rules = null;
      let udts = null;
      let syntaxData = null;
      let maxMatched = 0;
      let limitTreeDepth = Infinity;
      let limitNodeHits = Infinity;
      // Evaluates any given rule. This can be called from the syntax callback
      // functions to evaluate any rule in the grammar's rule list. Great caution
      // should be used. Use of this function will alter the language that the
      // parser accepts.
      const evaluateRule = function evaluateRule(ruleIndex, phraseIndex, sysData) {
        const functionName = `${thisFileName}evaluateRule(): `;
        if (ruleIndex >= rules.length) {
          throw new Error(`${functionName}rule index: ${ruleIndex} out of range`);
        }
        if (phraseIndex >= charsEnd) {
          throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
        }
        const { length } = opcodes;
        opcodes.push({
          type: id.RNM,
          index: ruleIndex,
        });
        opExecute(length, phraseIndex, sysData);
        opcodes.pop();
      };
      // Evaluates any given UDT. This can be called from the syntax callback
      // functions to evaluate any UDT in the grammar's UDT list. Great caution
      // should be used. Use of this function will alter the language that the
      // parser accepts.
      const evaluateUdt = function (udtIndex, phraseIndex, sysData) {
        const functionName = `${thisFileName}evaluateUdt(): `;
        if (udtIndex >= udts.length) {
          throw new Error(`${functionName}udt index: ${udtIndex} out of range`);
        }
        if (phraseIndex >= charsEnd) {
          throw new Error(`${functionName}phrase index: ${phraseIndex} out of range`);
        }
        const { length } = opcodes;
        opcodes.push({
          type: id.UDT,
          empty: udts[udtIndex].empty,
          index: udtIndex,
        });
        opExecute(length, phraseIndex, sysData);
        opcodes.pop();
      };
      /* Clears this object of any/all data that has been initialized or added to it. */
      /* Called by parse() on initialization, allowing this object to be re-used for multiple parsing calls. */
      const clear = function () {
        treeDepth = 0;
        maxTreeDepth = 0;
        nodeHits = 0;
        maxMatched = 0;
        lookAround = [
          {
            lookAround: id.LOOKAROUND_NONE,
            anchor: 0,
            charsEnd: 0,
            charsLength: 0,
          },
        ];
        rules = null;
        udts = null;
        chars = null;
        charsBegin = 0;
        charsLength = 0;
        charsEnd = 0;
        ruleCallbacks = null;
        udtCallbacks = null;
        syntaxData = null;
        opcodes = null;
      };
      /* object for maintaining a stack of back reference frames */
      const backRef = function () {
        const stack = [];
        const init = function () {
          const obj = {};
          rules.forEach((rule) => {
            if (rule.isBkr) {
              obj[rule.lower] = null;
            }
          });
          if (udts.length > 0) {
            udts.forEach((udt) => {
              if (udt.isBkr) {
                obj[udt.lower] = null;
              }
            });
          }
          stack.push(obj);
        };
        const copy = function () {
          const top = stack[stack.length - 1];
          const obj = {};
          /* // eslint-disable-next-line no-restricted-syntax */
          for (const name in top) {
            obj[name] = top[name];
          }
          return obj;
        };
        this.push = function push() {
          stack.push(copy());
        };
        this.pop = function pop(lengthArg) {
          let length = lengthArg;
          if (!length) {
            length = stack.length - 1;
          }
          if (length < 1 || length > stack.length) {
            throw new Error(`${thisFileName}backRef.pop(): bad length: ${length}`);
          }
          stack.length = length;
          return stack[stack.length - 1];
        };
        this.length = function length() {
          return stack.length;
        };
        this.savePhrase = function savePhrase(name, index, length) {
          stack[stack.length - 1][name] = {
            phraseIndex: index,
            phraseLength: length,
          };
        };
        this.getPhrase = function (name) {
          return stack[stack.length - 1][name];
        };
        /* constructor */
        init();
      };
      // The system data structure that relays system information to and from the rule and UDT callback functions.
      // - *state* - the state of the parser, ACTIVE, MATCH, EMPTY or NOMATCH (see the `identifiers` object in
      // [`apg-lib`](https://github.com/ldthomas/apg-js2-lib))
      // - *phraseLength* - the number of characters matched if the state is MATCHED or EMPTY
      // - *lookaround* - the top of the stack holds the current look around state,
      // LOOKAROUND_NONE, LOOKAROUND_AHEAD or LOOKAROUND_BEHIND,
      // - *uFrame* - the "universal" back reference frame.
      // Holds the last matched phrase for each of the back referenced rules and UDTs.
      // - *pFrame* - the stack of "parent" back reference frames.
      // Holds the matched phrase from the parent frame of each back referenced rules and UDTs.
      // - *evaluateRule* - a reference to this object's `evaluateRule()` function.
      // Can be called from a callback function (use with extreme caution!)
      // - *evaluateUdt* - a reference to this object's `evaluateUdt()` function.
      // Can be called from a callback function (use with extreme caution!)
      const systemData = function systemData() {
        const thisData = this;
        this.state = id.ACTIVE;
        this.phraseLength = 0;
        this.ruleIndex = 0;
        this.udtIndex = 0;
        this.lookAround = lookAround[lookAround.length - 1];
        this.uFrame = new backRef();
        this.pFrame = new backRef();
        this.evaluateRule = evaluateRule;
        this.evaluateUdt = evaluateUdt;
        /* refresh the parser state for the next operation */
        this.refresh = function refresh() {
          thisData.state = id.ACTIVE;
          thisData.phraseLength = 0;
          thisData.lookAround = lookAround[lookAround.length - 1];
        };
      };
      /* some look around helper functions */
      const lookAroundValue = function lookAroundValue() {
        return lookAround[lookAround.length - 1];
      };
      /* return true if parser is in look around (ahead or behind) state */
      const inLookAround = function inLookAround() {
        return lookAround.length > 1;
      };
      /* return true if parser is in look behind state */
      const inLookBehind = function () {
        return lookAround[lookAround.length - 1].lookAround === id.LOOKAROUND_BEHIND;
      };
      /* called by parse() to initialize the AST object, if one has been defined */
      const initializeAst = function () {
        const functionName = `${thisFileName}initializeAst(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.ast === undefined) {
            thisThis.ast = null;
            break;
          }
          if (thisThis.ast === null) {
            break;
          }
          if (thisThis.ast.astObject !== 'astObject') {
            throw new Error(`${functionName}ast object not recognized`);
          }
          break;
        }
        if (thisThis.ast !== null) {
          thisThis.ast.init(rules, udts, chars);
        }
      };
      /* called by parse() to initialize the trace object, if one has been defined */
      const initializeTrace = function () {
        const functionName = `${thisFileName}initializeTrace(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.trace === undefined) {
            thisThis.trace = null;
            break;
          }
          if (thisThis.trace === null) {
            break;
          }
          if (thisThis.trace.traceObject !== 'traceObject') {
            throw new Error(`${functionName}trace object not recognized`);
          }
          break;
        }
        if (thisThis.trace !== null) {
          thisThis.trace.init(rules, udts, chars);
        }
      };
      /* called by parse() to initialize the statistics object, if one has been defined */
      const initializeStats = function () {
        const functionName = `${thisFileName}initializeStats(): `;
        const TRUE = true;
        while (TRUE) {
          if (thisThis.stats === undefined) {
            thisThis.stats = null;
            break;
          }
          if (thisThis.stats === null) {
            break;
          }
          if (thisThis.stats.statsObject !== 'statsObject') {
            throw new Error(`${functionName}stats object not recognized`);
          }
          break;
        }
        if (thisThis.stats !== null) {
          thisThis.stats.init(rules, udts);
        }
      };
      /* called by parse() to initialize the rules & udts from the grammar object */
      /* (the grammar object generated previously by apg) */
      const initializeGrammar = function (grammar) {
        const functionName = `${thisFileName}initializeGrammar(): `;
        if (!grammar) {
          throw new Error(`${functionName}grammar object undefined`);
        }
        if (grammar.grammarObject !== 'grammarObject') {
          throw new Error(`${functionName}bad grammar object`);
        }
        rules = grammar.rules;
        udts = grammar.udts;
      };
      /* called by parse() to initialize the start rule */
      const initializeStartRule = function (startRule) {
        const functionName = `${thisFileName}initializeStartRule(): `;
        let start = null;
        if (typeof startRule === 'number') {
          if (startRule >= rules.length) {
            throw new Error(`${functionName}start rule index too large: max: ${rules.length}: index: ${startRule}`);
          }
          start = startRule;
        } else if (typeof startRule === 'string') {
          const lower = startRule.toLowerCase();
          for (let i = 0; i < rules.length; i += 1) {
            if (lower === rules[i].lower) {
              start = rules[i].index;
              break;
            }
          }
          if (start === null) {
            throw new Error(`${functionName}start rule name '${startRule}' not recognized`);
          }
        } else {
          throw new Error(`${functionName}type of start rule '${typeof startRule}' not recognized`);
        }
        return start;
      };
      /* called by parse() to initialize the array of characters codes representing the input string */
      const initializeInputChars = function initializeInputChars(inputArg, begArg, lenArg) {
        const functionName = `${thisFileName}initializeInputChars(): `;
        /* varify and normalize input */
        let input = inputArg;
        let beg = begArg;
        let len = lenArg;
        if (input === undefined) {
          throw new Error(`${functionName}input string is undefined`);
        }
        if (input === null) {
          throw new Error(`${functionName}input string is null`);
        }
        if (typeof input === 'string') {
          input = utils.stringToChars(input);
        } else if (!Array.isArray(input)) {
          throw new Error(`${functionName}input string is not a string or array`);
        }
        if (input.length > 0) {
          if (typeof input[0] !== 'number') {
            throw new Error(`${functionName}input string not an array of integers`);
          }
        }
        /* verify and normalize beginning index */
        if (typeof beg !== 'number') {
          beg = 0;
        } else {
          beg = Math.floor(beg);
          if (beg < 0 || beg > input.length) {
            throw new Error(`${functionName}input beginning index out of range: ${beg}`);
          }
        }
        /* verify and normalize input length */
        if (typeof len !== 'number') {
          len = input.length - beg;
        } else {
          len = Math.floor(len);
          if (len < 0 || len > input.length - beg) {
            throw new Error(`${functionName}input length out of range: ${len}`);
          }
        }
        chars = input;
        charsBegin = beg;
        charsLength = len;
        charsEnd = charsBegin + charsLength;
      };
      /* called by parse() to initialize the user-written, syntax callback functions, if any */
      const initializeCallbacks = function () {
        const functionName = `${thisFileName}initializeCallbacks(): `;
        let i;
        ruleCallbacks = [];
        udtCallbacks = [];
        for (i = 0; i < rules.length; i += 1) {
          ruleCallbacks[i] = null;
        }
        for (i = 0; i < udts.length; i += 1) {
          udtCallbacks[i] = null;
        }
        let func;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        for (const index in thisThis.callbacks) {
          i = list.indexOf(index.toLowerCase());
          if (i < 0) {
            throw new Error(`${functionName}syntax callback '${index}' not a rule or udt name`);
          }
          func = thisThis.callbacks[index];
          if (!func) {
            func = null;
          }
          if (typeof func === 'function' || func === null) {
            if (i < rules.length) {
              ruleCallbacks[i] = func;
            } else {
              udtCallbacks[i - rules.length] = func;
            }
          } else {
            throw new Error(
              `${functionName}syntax callback[${index}] must be function reference or 'false' (false/null/undefined/etc.)`
            );
          }
        }
        /* make sure all udts have been defined - the parser can't work without them */
        for (i = 0; i < udts.length; i += 1) {
          if (udtCallbacks[i] === null) {
            throw new Error(
              `${functionName}all UDT callbacks must be defined. UDT callback[${udts[i].lower}] not a function reference`
            );
          }
        }
      };
      // Set the maximum parse tree depth allowed. The default is `Infinity`.
      // A limit is not normally needed, but can be used to protect against an
      // exponentual or "catastrophically backtracking" grammar.
      // <ul>
      // <li>
      // depth - max allowed parse tree depth. An exception is thrown if exceeded.
      // </li>
      // </ul>
      this.setMaxTreeDepth = function (depth) {
        if (typeof depth !== 'number') {
          throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
        }
        limitTreeDepth = Math.floor(depth);
        if (limitTreeDepth <= 0) {
          throw new Error(`parser: max tree depth must be integer > 0: ${depth}`);
        }
      };
      // Set the maximum number of node hits (parser unit steps or opcode function calls) allowed.
      // The default is `Infinity`.
      // A limit is not normally needed, but can be used to protect against an
      // exponentual or "catastrophically backtracking" grammar.
      // <ul>
      // <li>
      // hits - maximum number of node hits or parser unit steps allowed.
      // An exception thrown if exceeded.
      // </li>
      // </ul>
      this.setMaxNodeHits = function (hits) {
        if (typeof hits !== 'number') {
          throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
        }
        limitNodeHits = Math.floor(hits);
        if (limitNodeHits <= 0) {
          throw new Error(`parser: max node hits must be integer > 0: ${hits}`);
        }
      };
      /* the main parser function */
      const privateParse = function (grammar, startRuleArg, callbackData) {
        let success;
        const functionName = `${thisFileName}parse(): `;
        initializeGrammar(grammar);
        const startRule = initializeStartRule(startRuleArg);
        initializeCallbacks();
        initializeTrace();
        initializeStats();
        initializeAst();
        const sysData = new systemData();
        if (!(callbackData === undefined || callbackData === null)) {
          syntaxData = callbackData;
        }
        /* create a dummy opcode for the start rule */
        opcodes = [
          {
            type: id.RNM,
            index: startRule,
          },
        ];
        /* execute the start rule */
        opExecute(0, charsBegin, sysData);
        opcodes = null;
        /* test and return the sysData */
        switch (sysData.state) {
          case id.ACTIVE:
            throw new Error(`${functionName}final state should never be 'ACTIVE'`);
          case id.NOMATCH:
            success = false;
            break;
          case id.EMPTY:
          case id.MATCH:
            if (sysData.phraseLength === charsLength) {
              success = true;
            } else {
              success = false;
            }
            break;
          default:
            throw new Error('unrecognized state');
        }
        return {
          success,
          state: sysData.state,
          length: charsLength,
          matched: sysData.phraseLength,
          maxMatched,
          maxTreeDepth,
          nodeHits,
          inputLength: chars.length,
          subBegin: charsBegin,
          subEnd: charsEnd,
          subLength: charsLength,
        };
      };

      // This form allows parsing of a sub-string of the full input string.
      // <ul>
      // <li>*inputIndex* - index of the first character in the sub-string</li>
      // <li>*inputLength* - length of the sub-string</li>
      // </ul>
      // All other parameters as for the above function `parse()`.
      this.parseSubstring = function parseSubstring(grammar, startRule, inputChars, inputIndex, inputLength, callbackData) {
        clear();
        initializeInputChars(inputChars, inputIndex, inputLength);
        return privateParse(grammar, startRule, callbackData);
      };
      // This is the main function, called to parse an input string.
      // <ul>
      // <li>*grammar* - an instantiated grammar object - the output of `apg` for a
      // specific SABNF grammar</li>
      // <li>*startRule* - the rule name or rule index to be used as the root of the
      // parse tree. This is usually the first rule, index = 0, of the grammar
      // but can be any rule defined in the above grammar object.</li>
      // <li>*inputChars* - the input string. Can be a string or an array of integer character codes representing the
      // string.</li>
      // <li>*callbackData* - user-defined data object to be passed to the user's
      // callback functions.
      // This is not used by the parser in any way, merely passed on to the user.
      // May be `null` or omitted.</li>
      // </ul>
      this.parse = function parse(grammar, startRule, inputChars, callbackData) {
        clear();
        initializeInputChars(inputChars, 0, inputChars.length);
        return privateParse(grammar, startRule, callbackData);
      };
      // The `ALT` operator.<br>
      // Executes its child nodes, from left to right, until it finds a match.
      // Fails if *all* of its child nodes fail.
      const opALT = function (opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        for (let i = 0; i < op.children.length; i += 1) {
          opExecute(op.children[i], phraseIndex, sysData);
          if (sysData.state !== id.NOMATCH) {
            break;
          }
        }
      };
      // The `CAT` operator.<br>
      // Executes all of its child nodes, from left to right,
      // concatenating the matched phrases.
      // Fails if *any* child nodes fail.
      const opCAT = function (opIndex, phraseIndex, sysData) {
        let success;
        let astLength;
        let catCharIndex;
        let catPhrase;
        const op = opcodes[opIndex];
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        success = true;
        catCharIndex = phraseIndex;
        catPhrase = 0;
        for (let i = 0; i < op.children.length; i += 1) {
          opExecute(op.children[i], catCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            success = false;
            break;
          } else {
            catCharIndex += sysData.phraseLength;
            catPhrase += sysData.phraseLength;
          }
        }
        if (success) {
          sysData.state = catPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = catPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          /* reset the back referencing frames on failure */
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      // The `REP` operator.<br>
      // Repeatedly executes its single child node,
      // concatenating each of the matched phrases found.
      // The number of repetitions executed and its final sysData depends
      // on its `min` & `max` repetition values.
      const opREP = function (opIndex, phraseIndex, sysData) {
        let astLength;
        let repCharIndex;
        let repPhrase;
        let repCount;
        const op = opcodes[opIndex];
        repCharIndex = phraseIndex;
        repPhrase = 0;
        repCount = 0;
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        const TRUE = true;
        while (TRUE) {
          if (repCharIndex >= charsEnd) {
            /* exit on end of input string */
            break;
          }
          opExecute(opIndex + 1, repCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            /* always end if the child node fails */
            break;
          }
          if (sysData.state === id.EMPTY) {
            /* REP always succeeds when the child node returns an empty phrase */
            /* this may not seem obvious, but that's the way it works out */
            break;
          }
          repCount += 1;
          repPhrase += sysData.phraseLength;
          repCharIndex += sysData.phraseLength;
          if (repCount === op.max) {
            /* end on maxed out reps */
            break;
          }
        }
        /* evaluate the match count according to the min, max values */
        if (sysData.state === id.EMPTY) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else if (repCount >= op.min) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          /* reset the back referencing frames on failure */
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      // Validate the callback function's returned sysData values.
      // It's the user's responsibility to get them right
      // but `RNM` fails if not.
      const validateRnmCallbackResult = function (rule, sysData, charsLeft, down) {
        if (sysData.phraseLength > charsLeft) {
          let str = `${thisFileName}opRNM(${rule.name}): callback function error: `;
          str += `sysData.phraseLength: ${sysData.phraseLength}`;
          str += ` must be <= remaining chars: ${charsLeft}`;
          throw new Error(str);
        }
        switch (sysData.state) {
          case id.ACTIVE:
            if (down !== true) {
              throw new Error(
                `${thisFileName}opRNM(${rule.name}): callback function return error. ACTIVE state not allowed.`
              );
            }
            break;
          case id.EMPTY:
            sysData.phraseLength = 0;
            break;
          case id.MATCH:
            if (sysData.phraseLength === 0) {
              sysData.state = id.EMPTY;
            }
            break;
          case id.NOMATCH:
            sysData.phraseLength = 0;
            break;
          default:
            throw new Error(
              `${thisFileName}opRNM(${rule.name}): callback function return error. Unrecognized return state: ${sysData.state}`
            );
        }
      };
      // The `RNM` operator.<br>
      // This operator will acts as a root node for a parse tree branch below and
      // returns the matched phrase to its parent.
      // However, its larger responsibility is handling user-defined callback functions, back references and `AST` nodes.
      // Note that the `AST` is a separate object, but `RNM` calls its functions to create its nodes.
      // See [`ast.js`](./ast.html) for usage.
      const opRNM = function (opIndex, phraseIndex, sysData) {
        let astLength;
        let astDefined;
        let savedOpcodes;
        let ulen;
        let plen;
        let saveFrame;
        const op = opcodes[opIndex];
        const rule = rules[op.index];
        const callback = ruleCallbacks[rule.index];
        const notLookAround = !inLookAround();
        /* ignore AST and back references in lookaround */
        if (notLookAround) {
          /* begin AST and back references */
          astDefined = thisThis.ast && thisThis.ast.ruleDefined(op.index);
          if (astDefined) {
            astLength = thisThis.ast.getLength();
            thisThis.ast.down(op.index, rules[op.index].name);
          }
          ulen = sysData.uFrame.length();
          plen = sysData.pFrame.length();
          sysData.uFrame.push();
          sysData.pFrame.push();
          saveFrame = sysData.pFrame;
          sysData.pFrame = new backRef();
        }
        if (callback === null) {
          /* no callback - just execute the rule */
          savedOpcodes = opcodes;
          opcodes = rule.opcodes;
          opExecute(0, phraseIndex, sysData);
          opcodes = savedOpcodes;
        } else {
          /* call user's callback */
          const charsLeft = charsEnd - phraseIndex;
          sysData.ruleIndex = rule.index;
          callback(sysData, chars, phraseIndex, syntaxData);
          validateRnmCallbackResult(rule, sysData, charsLeft, true);
          if (sysData.state === id.ACTIVE) {
            savedOpcodes = opcodes;
            opcodes = rule.opcodes;
            opExecute(0, phraseIndex, sysData);
            opcodes = savedOpcodes;
            sysData.ruleIndex = rule.index;
            callback(sysData, chars, phraseIndex, syntaxData);
            validateRnmCallbackResult(rule, sysData, charsLeft, false);
          } /* implied else clause: just accept the callback sysData - RNM acting as UDT */
        }
        if (notLookAround) {
          /* end AST */
          if (astDefined) {
            if (sysData.state === id.NOMATCH) {
              thisThis.ast.setLength(astLength);
            } else {
              thisThis.ast.up(op.index, rule.name, phraseIndex, sysData.phraseLength);
            }
          }
          /* end back reference */
          sysData.pFrame = saveFrame;
          if (sysData.state === id.NOMATCH) {
            sysData.uFrame.pop(ulen);
            sysData.pFrame.pop(plen);
          } else if (rule.isBkr) {
            /* save phrase on both the parent and universal frames */
            /* BKR operator will decide which to use later */
            sysData.pFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
            sysData.uFrame.savePhrase(rule.lower, phraseIndex, sysData.phraseLength);
          }
        }
      };
      // Validate the callback function's returned sysData values.
      // It's the user's responsibility to get it right but `UDT` fails if not.
      const validateUdtCallbackResult = function (udt, sysData, charsLeft) {
        if (sysData.phraseLength > charsLeft) {
          let str = `${thisFileName}opUDT(${udt.name}): callback function error: `;
          str += `sysData.phraseLength: ${sysData.phraseLength}`;
          str += ` must be <= remaining chars: ${charsLeft}`;
          throw new Error(str);
        }
        switch (sysData.state) {
          case id.ACTIVE:
            throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. ACTIVE state not allowed.`);
          case id.EMPTY:
            if (udt.empty === false) {
              throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
            } else {
              sysData.phraseLength = 0;
            }
            break;
          case id.MATCH:
            if (sysData.phraseLength === 0) {
              if (udt.empty === false) {
                throw new Error(`${thisFileName}opUDT(${udt.name}): callback function return error. May not return EMPTY.`);
              } else {
                sysData.state = id.EMPTY;
              }
            }
            break;
          case id.NOMATCH:
            sysData.phraseLength = 0;
            break;
          default:
            throw new Error(
              `${thisFileName}opUDT(${udt.name}): callback function return error. Unrecognized return state: ${sysData.state}`
            );
        }
      };
      // The `UDT` operator.<br>
      // Simply calls the user's callback function, but operates like `RNM` with regard to the `AST`
      // and back referencing.
      // There is some ambiguity here. `UDT`s act as terminals for phrase recognition but as named rules
      // for `AST` nodes and back referencing.
      // See [`ast.js`](./ast.html) for usage.
      const opUDT = function (opIndex, phraseIndex, sysData) {
        let astLength;
        let astIndex;
        let astDefined;
        let ulen;
        let plen;
        let saveFrame;
        const op = opcodes[opIndex];
        const udt = udts[op.index];
        sysData.UdtIndex = udt.index;

        const notLookAround = !inLookAround();
        /* ignore AST and back references in lookaround */
        if (notLookAround) {
          /* begin AST and back reference */
          astDefined = thisThis.ast && thisThis.ast.udtDefined(op.index);
          if (astDefined) {
            astIndex = rules.length + op.index;
            astLength = thisThis.ast.getLength();
            thisThis.ast.down(astIndex, udt.name);
          }
          /* NOTE: push and pop of the back reference frame is normally not necessary */
          /* only in the case that the UDT calls evaluateRule() or evaluateUdt() */
          ulen = sysData.uFrame.length();
          plen = sysData.pFrame.length();
          sysData.uFrame.push();
          sysData.pFrame.push();
          saveFrame = sysData.pFrame;
          sysData.pFrame = new backRef();
        }
        /* call the UDT */
        const charsLeft = charsEnd - phraseIndex;
        udtCallbacks[op.index](sysData, chars, phraseIndex, syntaxData);
        validateUdtCallbackResult(udt, sysData, charsLeft);
        if (notLookAround) {
          /* end AST */
          if (astDefined) {
            if (sysData.state === id.NOMATCH) {
              thisThis.ast.setLength(astLength);
            } else {
              thisThis.ast.up(astIndex, udt.name, phraseIndex, sysData.phraseLength);
            }
          }
          /* end back reference */
          sysData.pFrame = saveFrame;
          if (sysData.state === id.NOMATCH) {
            sysData.uFrame.pop(ulen);
            sysData.pFrame.pop(plen);
          } else if (udt.isBkr) {
            /* save phrase on both the parent and universal frames */
            /* BKR operator will decide which to use later */
            sysData.pFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
            sysData.uFrame.savePhrase(udt.lower, phraseIndex, sysData.phraseLength);
          }
        }
      };
      // The `AND` operator.<br>
      // This is the positive `look ahead` operator.
      // Executes its single child node, returning the EMPTY state
      // if it succeedsand NOMATCH if it fails.
      // *Always* backtracks on any matched phrase and returns EMPTY on success.
      const opAND = function (opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_AHEAD,
          anchor: phraseIndex,
          charsEnd,
          charsLength,
        });
        charsEnd = chars.length;
        charsLength = chars.length - charsBegin;
        opExecute(opIndex + 1, phraseIndex, sysData);
        const pop = lookAround.pop();
        charsEnd = pop.charsEnd;
        charsLength = pop.charsLength;
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
            sysData.state = id.EMPTY;
            break;
          case id.MATCH:
            sysData.state = id.EMPTY;
            break;
          case id.NOMATCH:
            sysData.state = id.NOMATCH;
            break;
          default:
            throw new Error(`opAND: invalid state ${sysData.state}`);
        }
      };
      // The `NOT` operator.<br>
      // This is the negative `look ahead` operator.
      // Executes its single child node, returning the EMPTY state
      // if it *fails* and NOMATCH if it succeeds.
      // *Always* backtracks on any matched phrase and returns EMPTY
      // on success (failure of its child node).
      const opNOT = function (opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_AHEAD,
          anchor: phraseIndex,
          charsEnd,
          charsLength,
        });
        charsEnd = chars.length;
        charsLength = chars.length - charsBegin;
        opExecute(opIndex + 1, phraseIndex, sysData);
        const pop = lookAround.pop();
        charsEnd = pop.charsEnd;
        charsLength = pop.charsLength;
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
          case id.MATCH:
            sysData.state = id.NOMATCH;
            break;
          case id.NOMATCH:
            sysData.state = id.EMPTY;
            break;
          default:
            throw new Error(`opNOT: invalid state ${sysData.state}`);
        }
      };
      // The `TRG` operator.<br>
      // Succeeds if the single first character of the phrase is
      // within the `min - max` range.
      const opTRG = function (opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        if (phraseIndex < charsEnd) {
          if (op.min <= chars[phraseIndex] && chars[phraseIndex] <= op.max) {
            sysData.state = id.MATCH;
            sysData.phraseLength = 1;
          }
        }
      };
      // The `TBS` operator.<br>
      // Matches its pre-defined phrase against the input string.
      // All characters must match exactly.
      // Case-sensitive literal strings (`'string'` & `%s"string"`) are translated to `TBS`
      // operators by `apg`.
      // Phrase length of zero is not allowed.
      // Empty phrases can only be defined with `TLS` operators.
      const opTBS = function (opIndex, phraseIndex, sysData) {
        let i;
        const op = opcodes[opIndex];
        const len = op.string.length;
        sysData.state = id.NOMATCH;
        if (phraseIndex + len <= charsEnd) {
          for (i = 0; i < len; i += 1) {
            if (chars[phraseIndex + i] !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        } /* implied else NOMATCH */
      };
      // The `TLS` operator.<br>
      // Matches its pre-defined phrase against the input string.
      // A case-insensitive match is attempted for ASCII alphbetical characters.
      // `TLS` is the only operator that explicitly allows empty phrases.
      // `apg` will fail for empty `TBS`, case-sensitive strings (`''`) or
      // zero repetitions (`0*0RuleName` or `0RuleName`).
      const opTLS = function (opIndex, phraseIndex, sysData) {
        let i;
        let code;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        if (len === 0) {
          /* EMPTY match allowed for TLS */
          sysData.state = id.EMPTY;
          return;
        }
        if (phraseIndex + len <= charsEnd) {
          for (i = 0; i < len; i += 1) {
            code = chars[phraseIndex + i];
            if (code >= 65 && code <= 90) {
              code += 32;
            }
            if (code !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        } /* implied else NOMATCH */
      };
      // The `ABG` operator.<br>
      // This is an "anchor" for the beginning of the string, similar to the familiar regex `^` anchor.
      // An anchor matches a position rather than a phrase.
      // Returns EMPTY if `phraseIndex` is 0, NOMATCH otherwise.
      const opABG = function (opIndex, phraseIndex, sysData) {
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        sysData.state = phraseIndex === 0 ? id.EMPTY : id.NOMATCH;
      };
      // The `AEN` operator.<br>
      // This is an "anchor" for the end of the string, similar to the familiar regex `$` anchor.
      // An anchor matches a position rather than a phrase.
      // Returns EMPTY if `phraseIndex` equals the input string length, NOMATCH otherwise.
      const opAEN = function (opIndex, phraseIndex, sysData) {
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        sysData.state = phraseIndex === chars.length ? id.EMPTY : id.NOMATCH;
      };
      // The `BKR` operator.<br>
      // The back reference operator.
      // Matches the last matched phrase of the named rule or UDT against the input string.
      // For ASCII alphbetical characters the match may be case sensitive (`%s`) or insensitive (`%i`),
      // depending on the back reference definition.
      // For `universal` mode (`%u`) matches the last phrase found anywhere in the grammar.
      // For `parent frame` mode (`%p`) matches the last phrase found in the parent rule only.
      const opBKR = function (opIndex, phraseIndex, sysData) {
        let i;
        let code;
        let lmcode;
        let lower;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        if (op.index < rules.length) {
          lower = rules[op.index].lower;
        } else {
          lower = udts[op.index - rules.length].lower;
        }
        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
        const insensitive = op.bkrCase === id.BKR_MODE_CI;
        if (frame === null) {
          return;
        }
        const lmIndex = frame.phraseIndex;
        const len = frame.phraseLength;
        if (len === 0) {
          sysData.state = id.EMPTY;
          return;
        }
        if (phraseIndex + len <= charsEnd) {
          if (insensitive) {
            /* case-insensitive match */
            for (i = 0; i < len; i += 1) {
              code = chars[phraseIndex + i];
              lmcode = chars[lmIndex + i];
              if (code >= 65 && code <= 90) {
                code += 32;
              }
              if (lmcode >= 65 && lmcode <= 90) {
                lmcode += 32;
              }
              if (code !== lmcode) {
                return;
              }
            }
            sysData.state = id.MATCH;
            sysData.phraseLength = len;
          } else {
            /* case-sensitive match */
            for (i = 0; i < len; i += 1) {
              code = chars[phraseIndex + i];
              lmcode = chars[lmIndex + i];
              if (code !== lmcode) {
                return;
              }
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      // The `BKA` operator.<br>
      // This is the positive `look behind` operator.
      // It's child node is parsed right-to-left.
      // Returns the EMPTY state if a match is found, NOMATCH otherwise.
      // Like the look ahead operators, it always backtracks to `phraseIndex`.
      const opBKA = function (opIndex, phraseIndex, sysData) {
        lookAround.push({
          lookAround: id.LOOKAROUND_BEHIND,
          anchor: phraseIndex,
        });
        opExecute(opIndex + 1, phraseIndex, sysData);
        lookAround.pop();
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
            sysData.state = id.EMPTY;
            break;
          case id.MATCH:
            sysData.state = id.EMPTY;
            break;
          case id.NOMATCH:
            sysData.state = id.NOMATCH;
            break;
          default:
            throw new Error(`opBKA: invalid state ${sysData.state}`);
        }
      };
      // The `BKN` operator.<br>
      // This is the negative `look behind` operator.
      // It's child node is parsed right-to-left.
      // Returns the EMPTY state if a match is *not* found, NOMATCH otherwise.
      // Like the look ahead operators, it always backtracks to `phraseIndex`.
      const opBKN = function (opIndex, phraseIndex, sysData) {
        // let op;
        // op = opcodes[opIndex];
        lookAround.push({
          lookAround: id.LOOKAROUND_BEHIND,
          anchor: phraseIndex,
        });
        opExecute(opIndex + 1, phraseIndex, sysData);
        lookAround.pop();
        sysData.phraseLength = 0;
        switch (sysData.state) {
          case id.EMPTY:
          case id.MATCH:
            sysData.state = id.NOMATCH;
            break;
          case id.NOMATCH:
            sysData.state = id.EMPTY;
            break;
          default:
            throw new Error(`opBKN: invalid state ${sysData.state}`);
        }
      };
      // The right-to-left `CAT` operator.<br>
      // Called for `CAT` operators when in look behind mode.
      // Calls its child nodes from right to left concatenating matched phrases right to left.
      const opCATBehind = function (opIndex, phraseIndex, sysData) {
        let success;
        let astLength;
        let catCharIndex;
        let catMatched;
        const op = opcodes[opIndex];
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        success = true;
        catCharIndex = phraseIndex;
        catMatched = 0;
        // catPhrase = 0;
        for (let i = op.children.length - 1; i >= 0; i -= 1) {
          opExecute(op.children[i], catCharIndex, sysData);
          catCharIndex -= sysData.phraseLength;
          catMatched += sysData.phraseLength;
          // catPhrase += sysData.phraseLength;
          if (sysData.state === id.NOMATCH) {
            success = false;
            break;
          }
        }
        if (success) {
          sysData.state = catMatched === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = catMatched;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      // The right-to-left `REP` operator.<br>
      // Called for `REP` operators in look behind mode.
      // Makes repeated calls to its child node, concatenating matched phrases right to left.
      const opREPBehind = function (opIndex, phraseIndex, sysData) {
        let astLength;
        let repCharIndex;
        let repPhrase;
        let repCount;
        const op = opcodes[opIndex];
        repCharIndex = phraseIndex;
        repPhrase = 0;
        repCount = 0;
        const ulen = sysData.uFrame.length();
        const plen = sysData.pFrame.length();
        if (thisThis.ast) {
          astLength = thisThis.ast.getLength();
        }
        const TRUE = true;
        while (TRUE) {
          if (repCharIndex <= 0) {
            /* exit on end of input string */
            break;
          }
          opExecute(opIndex + 1, repCharIndex, sysData);
          if (sysData.state === id.NOMATCH) {
            /* always end if the child node fails */
            break;
          }
          if (sysData.state === id.EMPTY) {
            /* REP always succeeds when the child node returns an empty phrase */
            /* this may not seem obvious, but that's the way it works out */
            break;
          }
          repCount += 1;
          repPhrase += sysData.phraseLength;
          repCharIndex -= sysData.phraseLength;
          if (repCount === op.max) {
            /* end on maxed out reps */
            break;
          }
        }
        /* evaluate the match count according to the min, max values */
        if (sysData.state === id.EMPTY) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else if (repCount >= op.min) {
          sysData.state = repPhrase === 0 ? id.EMPTY : id.MATCH;
          sysData.phraseLength = repPhrase;
        } else {
          sysData.state = id.NOMATCH;
          sysData.phraseLength = 0;
          sysData.uFrame.pop(ulen);
          sysData.pFrame.pop(plen);
          if (thisThis.ast) {
            thisThis.ast.setLength(astLength);
          }
        }
      };
      // The right-to-left `TRG` operator.<br>
      // Called for `TRG` operators in look behind mode.
      // Matches a single character at `phraseIndex - 1` to the `min` - `max` range.
      const opTRGBehind = function (opIndex, phraseIndex, sysData) {
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        if (phraseIndex > 0) {
          const char = chars[phraseIndex - 1];
          if (op.min <= char && char <= op.max) {
            sysData.state = id.MATCH;
            sysData.phraseLength = 1;
          }
        }
      };
      // The right-to-left `TBS` operator.<br>
      // Called for `TBS` operators in look behind mode.
      // Matches the `TBS` phrase to the left of `phraseIndex`.
      const opTBSBehind = function (opIndex, phraseIndex, sysData) {
        let i;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        const beg = phraseIndex - len;
        if (beg >= 0) {
          for (i = 0; i < len; i += 1) {
            if (chars[beg + i] !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      // The right-to-left `TLS` operator.<br>
      // Called for `TLS` operators in look behind mode.
      // Matches the `TLS` phrase to the left of `phraseIndex`.
      const opTLSBehind = function (opIndex, phraseIndex, sysData) {
        let char;
        const op = opcodes[opIndex];
        sysData.state = id.NOMATCH;
        const len = op.string.length;
        if (len === 0) {
          /* EMPTY match allowed for TLS */
          sysData.state = id.EMPTY;
          return;
        }
        const beg = phraseIndex - len;
        if (beg >= 0) {
          for (let i = 0; i < len; i += 1) {
            char = chars[beg + i];
            if (char >= 65 && char <= 90) {
              char += 32;
            }
            if (char !== op.string[i]) {
              return;
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      // The right-to-left back reference operator.<br>
      // Matches the back referenced phrase to the left of `phraseIndex`.
      const opBKRBehind = function (opIndex, phraseIndex, sysData) {
        let i;
        let code;
        let lmcode;
        let lower;
        const op = opcodes[opIndex];
        /* NOMATCH default */
        sysData.state = id.NOMATCH;
        sysData.phraseLength = 0;
        if (op.index < rules.length) {
          lower = rules[op.index].lower;
        } else {
          lower = udts[op.index - rules.length].lower;
        }
        const frame = op.bkrMode === id.BKR_MODE_PM ? sysData.pFrame.getPhrase(lower) : sysData.uFrame.getPhrase(lower);
        const insensitive = op.bkrCase === id.BKR_MODE_CI;
        if (frame === null) {
          return;
        }
        const lmIndex = frame.phraseIndex;
        const len = frame.phraseLength;
        if (len === 0) {
          sysData.state = id.EMPTY;
          sysData.phraseLength = 0;
          return;
        }
        const beg = phraseIndex - len;
        if (beg >= 0) {
          if (insensitive) {
            /* case-insensitive match */
            for (i = 0; i < len; i += 1) {
              code = chars[beg + i];
              lmcode = chars[lmIndex + i];
              if (code >= 65 && code <= 90) {
                code += 32;
              }
              if (lmcode >= 65 && lmcode <= 90) {
                lmcode += 32;
              }
              if (code !== lmcode) {
                return;
              }
            }
            sysData.state = id.MATCH;
            sysData.phraseLength = len;
          } else {
            /* case-sensitive match */
            for (i = 0; i < len; i += 1) {
              code = chars[beg + i];
              lmcode = chars[lmIndex + i];
              if (code !== lmcode) {
                return;
              }
            }
          }
          sysData.state = id.MATCH;
          sysData.phraseLength = len;
        }
      };
      // Generalized execution function.<br>
      // Having a single, generalized function, allows a single location
      // for tracing and statistics gathering functions to be called.
      // Tracing and statistics are handled in separate objects.
      // However, the parser calls their API to build the object data records.
      // See [`trace.js`](./trace.html) and [`stats.js`](./stats.html) for their
      // usage.
      opExecute = function opExecuteFunc(opIndex, phraseIndex, sysData) {
        let ret = true;
        const op = opcodes[opIndex];
        nodeHits += 1;
        if (nodeHits > limitNodeHits) {
          throw new Error(`parser: maximum number of node hits exceeded: ${limitNodeHits}`);
        }
        treeDepth += 1;
        if (treeDepth > maxTreeDepth) {
          maxTreeDepth = treeDepth;
          if (maxTreeDepth > limitTreeDepth) {
            throw new Error(`parser: maximum parse tree depth exceeded: ${limitTreeDepth}`);
          }
        }
        sysData.refresh();
        if (thisThis.trace !== null) {
          /* collect the trace record for down the parse tree */
          const lk = lookAroundValue();
          thisThis.trace.down(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
        }
        if (inLookBehind()) {
          switch (op.type) {
            case id.ALT:
              opALT(opIndex, phraseIndex, sysData);
              break;
            case id.CAT:
              opCATBehind(opIndex, phraseIndex, sysData);
              break;
            case id.REP:
              opREPBehind(opIndex, phraseIndex, sysData);
              break;
            case id.RNM:
              opRNM(opIndex, phraseIndex, sysData);
              break;
            case id.UDT:
              opUDT(opIndex, phraseIndex, sysData);
              break;
            case id.AND:
              opAND(opIndex, phraseIndex, sysData);
              break;
            case id.NOT:
              opNOT(opIndex, phraseIndex, sysData);
              break;
            case id.TRG:
              opTRGBehind(opIndex, phraseIndex, sysData);
              break;
            case id.TBS:
              opTBSBehind(opIndex, phraseIndex, sysData);
              break;
            case id.TLS:
              opTLSBehind(opIndex, phraseIndex, sysData);
              break;
            case id.BKR:
              opBKRBehind(opIndex, phraseIndex, sysData);
              break;
            case id.BKA:
              opBKA(opIndex, phraseIndex, sysData);
              break;
            case id.BKN:
              opBKN(opIndex, phraseIndex, sysData);
              break;
            case id.ABG:
              opABG(opIndex, phraseIndex, sysData);
              break;
            case id.AEN:
              opAEN(opIndex, phraseIndex, sysData);
              break;
            default:
              ret = false;
              break;
          }
        } else {
          switch (op.type) {
            case id.ALT:
              opALT(opIndex, phraseIndex, sysData);
              break;
            case id.CAT:
              opCAT(opIndex, phraseIndex, sysData);
              break;
            case id.REP:
              opREP(opIndex, phraseIndex, sysData);
              break;
            case id.RNM:
              opRNM(opIndex, phraseIndex, sysData);
              break;
            case id.UDT:
              opUDT(opIndex, phraseIndex, sysData);
              break;
            case id.AND:
              opAND(opIndex, phraseIndex, sysData);
              break;
            case id.NOT:
              opNOT(opIndex, phraseIndex, sysData);
              break;
            case id.TRG:
              opTRG(opIndex, phraseIndex, sysData);
              break;
            case id.TBS:
              opTBS(opIndex, phraseIndex, sysData);
              break;
            case id.TLS:
              opTLS(opIndex, phraseIndex, sysData);
              break;
            case id.BKR:
              opBKR(opIndex, phraseIndex, sysData);
              break;
            case id.BKA:
              opBKA(opIndex, phraseIndex, sysData);
              break;
            case id.BKN:
              opBKN(opIndex, phraseIndex, sysData);
              break;
            case id.ABG:
              opABG(opIndex, phraseIndex, sysData);
              break;
            case id.AEN:
              opAEN(opIndex, phraseIndex, sysData);
              break;
            default:
              ret = false;
              break;
          }
        }
        if (!inLookAround() && phraseIndex + sysData.phraseLength > maxMatched) {
          maxMatched = phraseIndex + sysData.phraseLength;
        }
        if (thisThis.stats !== null) {
          /* collect the statistics */
          thisThis.stats.collect(op, sysData);
        }
        if (thisThis.trace !== null) {
          /* collect the trace record for up the parse tree */
          const lk = lookAroundValue();
          thisThis.trace.up(op, sysData.state, phraseIndex, sysData.phraseLength, lk.anchor, lk.lookAround);
        }
        treeDepth -= 1;
        return ret;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module is the constructor for the statistics gathering object.
    // The statistics are nothing more than keeping a count of the
    // number of times each node in the parse tree is traversed.
    //
    // Counts are collected for each of the individual types of operators.
    // Additionally, counts are collected for each of the individually named
    // `RNM` and `UDT` operators.
    var stats = function statsFunc() {
      const id = identifiers;
      const utils = utilities;
      const style$1 = style;

      const thisFileName = 'stats.js: ';
      let rules = [];
      let udts = [];
      const stats = [];
      let totals;
      const ruleStats = [];
      const udtStats = [];
      this.statsObject = 'statsObject';
      const nameId = 'stats';
      /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators alphabetically by name. */
      const sortAlpha = function sortAlpha(lhs, rhs) {
        if (lhs.lower < rhs.lower) {
          return -1;
        }
        if (lhs.lower > rhs.lower) {
          return 1;
        }
        return 0;
      };
      /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by hit count. */
      const sortHits = function sortHits(lhs, rhs) {
        if (lhs.total < rhs.total) {
          return 1;
        }
        if (lhs.total > rhs.total) {
          return -1;
        }
        return sortAlpha(lhs, rhs);
      };
      /* `Array.sort()` callback function for sorting `RNM` and `UDT` operators by index */
      /* (in the order in which they appear in the SABNF grammar). */
      const sortIndex = function sortIndex(lhs, rhs) {
        if (lhs.index < rhs.index) {
          return -1;
        }
        if (lhs.index > rhs.index) {
          return 1;
        }
        return 0;
      };
      const EmptyStat = function EmptyStat() {
        this.empty = 0;
        this.match = 0;
        this.nomatch = 0;
        this.total = 0;
      };
      /* Zero out all stats */
      const clear = function clear() {
        stats.length = 0;
        totals = new EmptyStat();
        stats[id.ALT] = new EmptyStat();
        stats[id.CAT] = new EmptyStat();
        stats[id.REP] = new EmptyStat();
        stats[id.RNM] = new EmptyStat();
        stats[id.TRG] = new EmptyStat();
        stats[id.TBS] = new EmptyStat();
        stats[id.TLS] = new EmptyStat();
        stats[id.UDT] = new EmptyStat();
        stats[id.AND] = new EmptyStat();
        stats[id.NOT] = new EmptyStat();
        stats[id.BKR] = new EmptyStat();
        stats[id.BKA] = new EmptyStat();
        stats[id.BKN] = new EmptyStat();
        stats[id.ABG] = new EmptyStat();
        stats[id.AEN] = new EmptyStat();
        ruleStats.length = 0;
        for (let i = 0; i < rules.length; i += 1) {
          ruleStats.push({
            empty: 0,
            match: 0,
            nomatch: 0,
            total: 0,
            name: rules[i].name,
            lower: rules[i].lower,
            index: rules[i].index,
          });
        }
        if (udts.length > 0) {
          udtStats.length = 0;
          for (let i = 0; i < udts.length; i += 1) {
            udtStats.push({
              empty: 0,
              match: 0,
              nomatch: 0,
              total: 0,
              name: udts[i].name,
              lower: udts[i].lower,
              index: udts[i].index,
            });
          }
        }
      };
      /* increment the designated operator hit count by one */
      const incStat = function incStat(stat, state) {
        stat.total += 1;
        switch (state) {
          case id.EMPTY:
            stat.empty += 1;
            break;
          case id.MATCH:
            stat.match += 1;
            break;
          case id.NOMATCH:
            stat.nomatch += 1;
            break;
          default:
            throw new Error(`${thisFileName}collect(): incStat(): unrecognized state: ${state}`);
        }
      };
      /* helper for toHtml() */
      const displayRow = function displayRow(name, stat) {
        let html = '';
        html += '<tr>';
        html += `<td class="${style$1.CLASS_ACTIVE}">${name}</td>`;
        html += `<td class="${style$1.CLASS_EMPTY}">${stat.empty}</td>`;
        html += `<td class="${style$1.CLASS_MATCH}">${stat.match}</td>`;
        html += `<td class="${style$1.CLASS_NOMATCH}">${stat.nomatch}</td>`;
        html += `<td class="${style$1.CLASS_ACTIVE}">${stat.total}</td>`;
        html += '</tr>\n';
        return html;
      };
      const displayOpsOnly = function displayOpsOnly() {
        let html = '';
        html += displayRow('ALT', stats[id.ALT]);
        html += displayRow('CAT', stats[id.CAT]);
        html += displayRow('REP', stats[id.REP]);
        html += displayRow('RNM', stats[id.RNM]);
        html += displayRow('TRG', stats[id.TRG]);
        html += displayRow('TBS', stats[id.TBS]);
        html += displayRow('TLS', stats[id.TLS]);
        html += displayRow('UDT', stats[id.UDT]);
        html += displayRow('AND', stats[id.AND]);
        html += displayRow('NOT', stats[id.NOT]);
        html += displayRow('BKR', stats[id.BKR]);
        html += displayRow('BKA', stats[id.BKA]);
        html += displayRow('BKN', stats[id.BKN]);
        html += displayRow('ABG', stats[id.ABG]);
        html += displayRow('AEN', stats[id.AEN]);
        html += displayRow('totals', totals);
        return html;
      };
      /* helper for toHtml() */
      const displayRules = function displayRules() {
        let html = '';
        html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\n';
        html += '<tr><th>rules</th><th></th><th></th><th></th><th></th></tr>\n';
        for (let i = 0; i < rules.length; i += 1) {
          if (ruleStats[i].total > 0) {
            html += '<tr>';
            html += `<td class="${style$1.CLASS_ACTIVE}">${ruleStats[i].name}</td>`;
            html += `<td class="${style$1.CLASS_EMPTY}">${ruleStats[i].empty}</td>`;
            html += `<td class="${style$1.CLASS_MATCH}">${ruleStats[i].match}</td>`;
            html += `<td class="${style$1.CLASS_NOMATCH}">${ruleStats[i].nomatch}</td>`;
            html += `<td class="${style$1.CLASS_ACTIVE}">${ruleStats[i].total}</td>`;
            html += '</tr>\n';
          }
        }
        if (udts.length > 0) {
          html += '<tr><th></th><th></th><th></th><th></th><th></th></tr>\n';
          html += '<tr><th>udts</th><th></th><th></th><th></th><th></th></tr>\n';
          for (let i = 0; i < udts.length; i += 1) {
            if (udtStats[i].total > 0) {
              html += '<tr>';
              html += `<td class="${style$1.CLASS_ACTIVE}">${udtStats[i].name}</td>`;
              html += `<td class="${style$1.CLASS_EMPTY}">${udtStats[i].empty}</td>`;
              html += `<td class="${style$1.CLASS_MATCH}">${udtStats[i].match}</td>`;
              html += `<td class="${style$1.CLASS_NOMATCH}">${udtStats[i].nomatch}</td>`;
              html += `<td class="${style$1.CLASS_ACTIVE}">${udtStats[i].total}</td>`;
              html += '</tr>\n';
            }
          }
        }
        return html;
      };
      /* called only by the parser to validate a stats object */
      this.validate = function validate(name) {
        let ret = false;
        if (typeof name === 'string' && nameId === name) {
          ret = true;
        }
        return ret;
      };
      /* no verification of input - only called by parser() */
      this.init = function init(inputRules, inputUdts) {
        rules = inputRules;
        udts = inputUdts;
        clear();
      };
      /* This function is the main interaction with the parser. */
      /* The parser calls it after each node has been traversed. */
      this.collect = function collect(op, result) {
        incStat(totals, result.state, result.phraseLength);
        incStat(stats[op.type], result.state, result.phraseLength);
        if (op.type === id.RNM) {
          incStat(ruleStats[op.index], result.state, result.phraseLength);
        }
        if (op.type === id.UDT) {
          incStat(udtStats[op.index], result.state, result.phraseLength);
        }
      };
      // Display the statistics as an HTML table.
      // - *type*
      //   - "ops" - (default) display only the total hit counts for all operator types.
      //   - "index" - additionally, display the hit counts for the individual `RNM` and `UDT` operators ordered by index.
      //   - "hits" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by hit count.
      //   - "alpha" - additionally, display the hit counts for the individual `RNM` and `UDT` operators by name alphabetically.
      // - *caption* - optional caption for the table
      this.toHtml = function toHtml(type, caption) {
        let html = '';
        html += `<table class="${style$1.CLASS_STATS}">\n`;
        if (typeof caption === 'string') {
          html += `<caption>${caption}</caption>\n`;
        }
        html += `<tr><th class="${style$1.CLASS_ACTIVE}">ops</th>\n`;
        html += `<th class="${style$1.CLASS_EMPTY}">EMPTY</th>\n`;
        html += `<th class="${style$1.CLASS_MATCH}">MATCH</th>\n`;
        html += `<th class="${style$1.CLASS_NOMATCH}">NOMATCH</th>\n`;
        html += `<th class="${style$1.CLASS_ACTIVE}">totals</th></tr>\n`;
        const test = true;
        while (test) {
          if (type === undefined) {
            html += displayOpsOnly();
            break;
          }
          if (type === null) {
            html += displayOpsOnly();
            break;
          }
          if (type === 'ops') {
            html += displayOpsOnly();
            break;
          }
          if (type === 'index') {
            ruleStats.sort(sortIndex);
            if (udtStats.length > 0) {
              udtStats.sort(sortIndex);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          if (type === 'hits') {
            ruleStats.sort(sortHits);
            if (udtStats.length > 0) {
              udtStats.sort(sortIndex);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          if (type === 'alpha') {
            ruleStats.sort(sortAlpha);
            if (udtStats.length > 0) {
              udtStats.sort(sortAlpha);
            }
            html += displayOpsOnly();
            html += displayRules();
            break;
          }
          break;
        }
        html += '</table>\n';
        return html;
      };
      // Display the stats table in a complete HTML5 page.
      this.toHtmlPage = function toHtmlPage(type, caption, title) {
        return utils.htmlToPage(this.toHtml(type, caption), title);
      };
    };

    /* eslint-disable func-names */

    /* eslint-disable prefer-destructuring */
    /* eslint-disable no-restricted-syntax */
    /* eslint-disable guard-for-in */
    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module provides a means of tracing the parser through the parse tree as it goes.
    // It is the primary debugging facility for debugging both the SABNF grammar syntax
    // and the input strings that are supposed to be valid grammar sentences.
    // It is also a very informative and educational tool for understanding
    // how a parser actually operates for a given language.
    //
    // Tracing is the process of generating and saving a record of information for each passage
    // of the parser through a parse tree node. And since it traverses each node twice, once down the tree
    // and once coming back up, there are two records for each node.
    // This, obviously, has the potential of generating lots of records.
    // And since these records are normally displayed on a web page
    // it is important to have a means to limit the actual number of records generated to
    // probably no more that a few thousand. This is almost always enough to find any errors.
    // The problem is to get the *right* few thousand records.
    // Therefore, this module has a number of ways of limiting and/or filtering, the number and type of records.
    // Considerable effort has been made to make this filtering of the trace output as simple
    // and intuitive as possible.
    //
    // However, the ability to filter the trace records, or for that matter even understand what they are
    // and the information they contain, does require a minimum amount of understanding of the APG parsing
    // method. The parse tree nodes are all represented by APG operators. They break down into two natural groups.
    // - The `RNM` operators and `UDT` operators are named phrases.
    // These are names chosen by the writer of the SABNF grammar to represent special phrases of interest.
    // - All others collect, concatenate and otherwise manipulate various intermediate phrases along the way.
    //
    // There are separate means of filtering which of these operators in each of these two groups get traced.
    // Let `trace` be an instantiated `trace.js` object.
    // Prior to parsing the string, filtering the rules and UDTs can be defined as follows:
    // ```
    // trace.filter.rules["rulename"] = true;
    //     /* trace rule name "rulename" */
    // trace.filter.rules["udtname"]  = true;
    //     /* trace UDT name "udtname" */
    // trace.filter.rules["<ALL>"]    = true;
    //     /* trace all rules and UDTs (the default) */
    // trace.filter.rules["<NONE>"]   = true;
    //     /* trace no rules or UDTS */
    // ```
    // If any rule or UDT name other than "&lt;ALL>" or "&lt;NONE>" is specified, all other names are turned off.
    // Therefore, to be selective of rule names, a filter statement is required for each rule/UDT name desired.
    //
    // Filtering of the other operators follows a similar procedure.
    // ```
    // trace.filter.operators["TRG"] = true;
    //     /* trace the terminal range, TRG, operators */
    // trace.filter.operators["CAT"]  = true;
    //     /* trace the concatenations, CAT, operators */
    // trace.filter.operators["<ALL>"]    = true;
    //     /* trace all operators */
    // trace.filter.operators["<NONE>"]   = true;
    //     /* trace no operators (the default) */
    // ```
    // If any operator name other than "&lt;ALL>" or "&lt;NONE>" is specified, all other names are turned off.
    // Therefore, to be selective of operator names, a filter statement is required for each name desired.
    //
    // There is, additionally, a means for limiting the total number of filtered or saved trace records.
    // See the function, `setMaxRecords(max)` below. This will result in only the last `max` records being saved.
    //
    // (See [`apg-examples`](https://github.com/ldthomas/apg-js-examples) for examples of using `trace.js`.)
    var trace = function exportTrace() {
      const utils = utilities;
      const style$1 = style;
      const circular = new (circularBuffer)();
      const id = identifiers;

      const thisFileName = 'trace.js: ';
      const that = this;
      const MODE_HEX = 16;
      const MODE_DEC = 10;
      const MODE_ASCII = 8;
      const MODE_UNICODE = 32;
      const MAX_PHRASE = 80;
      const MAX_TLS = 5;
      const records = [];
      let maxRecords = 5000;
      let lastRecord = -1;
      let filteredRecords = 0;
      let treeDepth = 0;
      const recordStack = [];
      let chars = null;
      let rules = null;
      let udts = null;
      const operatorFilter = [];
      const ruleFilter = [];
      /* special trace table phrases */
      const PHRASE_END = `<span class="${style$1.CLASS_LINEEND}">&bull;</span>`;
      const PHRASE_CONTINUE = `<span class="${style$1.CLASS_LINEEND}">&hellip;</span>`;
      const PHRASE_EMPTY = `<span class="${style$1.CLASS_EMPTY}">&#120634;</span>`;
      /* filter the non-RNM & non-UDT operators */
      const initOperatorFilter = function () {
        const setOperators = function (set) {
          operatorFilter[id.ALT] = set;
          operatorFilter[id.CAT] = set;
          operatorFilter[id.REP] = set;
          operatorFilter[id.TLS] = set;
          operatorFilter[id.TBS] = set;
          operatorFilter[id.TRG] = set;
          operatorFilter[id.AND] = set;
          operatorFilter[id.NOT] = set;
          operatorFilter[id.BKR] = set;
          operatorFilter[id.BKA] = set;
          operatorFilter[id.BKN] = set;
          operatorFilter[id.ABG] = set;
          operatorFilter[id.AEN] = set;
        };
        let items = 0;
        // eslint-disable-next-line no-unused-vars
        for (const name in that.filter.operators) {
          items += 1;
        }
        if (items === 0) {
          /* case 1: no operators specified: default: do not trace any operators */
          setOperators(false);
          return;
        }
        for (const name in that.filter.operators) {
          const upper = name.toUpperCase();
          if (upper === '<ALL>') {
            /* case 2: <all> operators specified: trace all operators ignore all other operator commands */
            setOperators(true);
            return;
          }
          if (upper === '<NONE>') {
            /* case 3: <none> operators specified: trace NO operators ignore all other operator commands */
            setOperators(false);
            return;
          }
        }
        setOperators(false);
        for (const name in that.filter.operators) {
          const upper = name.toUpperCase();
          /* case 4: one or more individual operators specified: trace 'true' operators only */
          if (upper === 'ALT') {
            operatorFilter[id.ALT] = that.filter.operators[name] === true;
          } else if (upper === 'CAT') {
            operatorFilter[id.CAT] = that.filter.operators[name] === true;
          } else if (upper === 'REP') {
            operatorFilter[id.REP] = that.filter.operators[name] === true;
          } else if (upper === 'AND') {
            operatorFilter[id.AND] = that.filter.operators[name] === true;
          } else if (upper === 'NOT') {
            operatorFilter[id.NOT] = that.filter.operators[name] === true;
          } else if (upper === 'TLS') {
            operatorFilter[id.TLS] = that.filter.operators[name] === true;
          } else if (upper === 'TBS') {
            operatorFilter[id.TBS] = that.filter.operators[name] === true;
          } else if (upper === 'TRG') {
            operatorFilter[id.TRG] = that.filter.operators[name] === true;
          } else if (upper === 'BKR') {
            operatorFilter[id.BKR] = that.filter.operators[name] === true;
          } else if (upper === 'BKA') {
            operatorFilter[id.BKA] = that.filter.operators[name] === true;
          } else if (upper === 'BKN') {
            operatorFilter[id.BKN] = that.filter.operators[name] === true;
          } else if (upper === 'ABG') {
            operatorFilter[id.ABG] = that.filter.operators[name] === true;
          } else if (upper === 'AEN') {
            operatorFilter[id.AEN] = that.filter.operators[name] === true;
          } else {
            throw new Error(
              `${thisFileName}initOpratorFilter: '${name}' not a valid operator name.` +
                ` Must be <all>, <none>, alt, cat, rep, tls, tbs, trg, and, not, bkr, bka or bkn`
            );
          }
        }
      };
      /* filter the rule and `UDT` named operators */
      const initRuleFilter = function () {
        const setRules = function (set) {
          operatorFilter[id.RNM] = set;
          operatorFilter[id.UDT] = set;
          const count = rules.length + udts.length;
          ruleFilter.length = 0;
          for (let i = 0; i < count; i += 1) {
            ruleFilter.push(set);
          }
        };
        let items;
        let i;
        const list = [];
        for (i = 0; i < rules.length; i += 1) {
          list.push(rules[i].lower);
        }
        for (i = 0; i < udts.length; i += 1) {
          list.push(udts[i].lower);
        }
        ruleFilter.length = 0;
        items = 0;
        // eslint-disable-next-line no-unused-vars
        for (const name in that.filter.rules) {
          items += 1;
        }
        if (items === 0) {
          /* case 1: default to all rules & udts */
          setRules(true);
          return;
        }
        for (const name in that.filter.rules) {
          const lower = name.toLowerCase();
          if (lower === '<all>') {
            /* case 2: trace all rules ignore all other rule commands */
            setRules(true);
            return;
          }
          if (lower === '<none>') {
            /* case 3: trace no rules */
            setRules(false);
            return;
          }
        }
        /* case 4: trace only individually specified rules */
        setRules(false);
        operatorFilter[id.RNM] = true;
        operatorFilter[id.UDT] = true;
        for (const name in that.filter.rules) {
          const lower = name.toLowerCase();
          i = list.indexOf(lower);
          if (i < 0) {
            throw new Error(`${thisFileName}initRuleFilter: '${name}' not a valid rule or udt name`);
          }
          ruleFilter[i] = that.filter.rules[name] === true;
        }
      };
      /* used by other APG components to verify that they have a valid trace object */
      this.traceObject = 'traceObject';
      this.filter = {
        operators: [],
        rules: [],
      };
      // Set the maximum number of records to keep (default = 5000).
      // Each record number larger than `maxRecords`
      // will result in deleting the previously oldest record.
      // - `max`: maximum number of records to retain (default = 5000)
      // - `last`: last record number to retain, (default = -1 for (unknown) actual last record)
      this.setMaxRecords = function (max, last) {
        lastRecord = -1;
        if (typeof max === 'number' && max > 0) {
          maxRecords = Math.ceil(max);
        } else {
          maxRecords = 0;
          return;
        }
        if (typeof last === 'number') {
          lastRecord = Math.floor(last);
          if (lastRecord < 0) {
            lastRecord = -1;
          }
        }
      };
      // Returns `maxRecords` to the caller.
      this.getMaxRecords = function () {
        return maxRecords;
      };
      // Returns `lastRecord` to the caller.
      this.getLastRecord = function () {
        return lastRecord;
      };
      /* Called only by the `parser.js` object. No verification of input. */
      this.init = function (rulesIn, udtsIn, charsIn) {
        records.length = 0;
        recordStack.length = 0;
        filteredRecords = 0;
        treeDepth = 0;
        chars = charsIn;
        rules = rulesIn;
        udts = udtsIn;
        initOperatorFilter();
        initRuleFilter();
        circular.init(maxRecords);
      };
      /* returns true if this records passes through the designated filter, false if the record is to be skipped */
      const filterOps = function (op) {
        let ret = false;
        if (op.type === id.RNM) {
          if (operatorFilter[op.type] && ruleFilter[op.index]) {
            ret = true;
          } else {
            ret = false;
          }
        } else if (op.type === id.UDT) {
          if (operatorFilter[op.type] && ruleFilter[rules.length + op.index]) {
            ret = true;
          } else {
            ret = false;
          }
        } else {
          ret = operatorFilter[op.type];
        }
        return ret;
      };
      const filterRecords = function (record) {
        if (lastRecord === -1) {
          return true;
        }
        if (record <= lastRecord) {
          return true;
        }
        return false;
      };
      /* Collect the "down" record. */
      this.down = function (op, state, offset, length, anchor, lookAround) {
        if (filterRecords(filteredRecords) && filterOps(op)) {
          recordStack.push(filteredRecords);
          records[circular.increment()] = {
            dirUp: false,
            depth: treeDepth,
            thisLine: filteredRecords,
            thatLine: undefined,
            opcode: op,
            state,
            phraseIndex: offset,
            phraseLength: length,
            lookAnchor: anchor,
            lookAround,
          };
          filteredRecords += 1;
          treeDepth += 1;
        }
      };
      /* Collect the "up" record. */
      this.up = function (op, state, offset, length, anchor, lookAround) {
        if (filterRecords(filteredRecords) && filterOps(op)) {
          const thisLine = filteredRecords;
          const thatLine = recordStack.pop();
          const thatRecord = circular.getListIndex(thatLine);
          if (thatRecord !== -1) {
            records[thatRecord].thatLine = thisLine;
          }
          treeDepth -= 1;
          records[circular.increment()] = {
            dirUp: true,
            depth: treeDepth,
            thisLine,
            thatLine,
            opcode: op,
            state,
            phraseIndex: offset,
            phraseLength: length,
            lookAnchor: anchor,
            lookAround,
          };
          filteredRecords += 1;
        }
      };
      /* convert the trace records to a tree of nodes */
      const toTreeObj = function () {
        /* private helper functions */
        function nodeOpcode(node, opcode) {
          let name;
          let casetype;
          let modetype;
          if (opcode) {
            node.op = { id: opcode.type, name: utils.opcodeToString(opcode.type) };
            node.opData = undefined;
            switch (opcode.type) {
              case id.RNM:
                node.opData = rules[opcode.index].name;
                break;
              case id.UDT:
                node.opData = udts[opcode.index].name;
                break;
              case id.BKR:
                if (opcode.index < rules.length) {
                  name = rules[opcode.index].name;
                } else {
                  name = udts[opcode.index - rules.length].name;
                }
                casetype = opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';
                modetype = opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';
                node.opData = `\\\\${casetype}${modetype}${name}`;
                break;
              case id.TLS:
                node.opData = [];
                for (let i = 0; i < opcode.string.length; i += 1) {
                  node.opData.push(opcode.string[i]);
                }
                break;
              case id.TBS:
                node.opData = [];
                for (let i = 0; i < opcode.string.length; i += 1) {
                  node.opData.push(opcode.string[i]);
                }
                break;
              case id.TRG:
                node.opData = [opcode.min, opcode.max];
                break;
              case id.REP:
                node.opData = [opcode.min, opcode.max];
                break;
              default:
                throw new Error('unrecognized opcode');
            }
          } else {
            node.op = { id: undefined, name: undefined };
            node.opData = undefined;
          }
        }
        function nodePhrase(state, index, length) {
          if (state === id.MATCH) {
            return {
              index,
              length,
            };
          }
          if (state === id.NOMATCH) {
            return {
              index,
              length: 0,
            };
          }
          if (state === id.EMPTY) {
            return {
              index,
              length: 0,
            };
          }
          return null;
        }
        let nodeId = -1;
        function nodeDown(parent, record, depth) {
          const node = {
            // eslint-disable-next-line no-plusplus
            id: nodeId++,
            branch: -1,
            parent,
            up: false,
            down: false,
            depth,
            children: [],
          };
          if (record) {
            node.down = true;
            node.state = { id: record.state, name: utils.stateToString(record.state) };
            node.phrase = null;
            nodeOpcode(node, record.opcode);
          } else {
            node.state = { id: undefined, name: undefined };
            node.phrase = nodePhrase();
            nodeOpcode(node, undefined);
          }
          return node;
        }
        function nodeUp(node, record) {
          if (record) {
            node.up = true;
            node.state = { id: record.state, name: utils.stateToString(record.state) };
            node.phrase = nodePhrase(record.state, record.phraseIndex, record.phraseLength);
            if (!node.down) {
              nodeOpcode(node, record.opcode);
            }
          }
        }
        /* walk the final tree: label branches and count leaf nodes */
        let leafNodes = 0;
        let depth = -1;
        let branchCount = 1;
        function walk(node) {
          depth += 1;
          node.branch = branchCount;
          if (depth > treeDepth) {
            treeDepth = depth;
          }
          if (node.children.length === 0) {
            leafNodes += 1;
          } else {
            for (let i = 0; i < node.children.length; i += 1) {
              if (i > 0) {
                branchCount += 1;
              }
              node.children[i].leftMost = false;
              node.children[i].rightMost = false;
              if (node.leftMost) {
                node.children[i].leftMost = i === 0;
              }
              if (node.rightMost) {
                node.children[i].rightMost = i === node.children.length - 1;
              }
              walk(node.children[i]);
            }
          }
          depth -= 1;
        }
        function display(node, offset) {
          let name;
          const obj = {};
          obj.id = node.id;
          obj.branch = node.branch;
          obj.leftMost = node.leftMost;
          obj.rightMost = node.rightMost;
          name = node.state.name ? node.state.name : 'ACTIVE';
          obj.state = { id: node.state.id, name };
          name = node.op.name ? node.op.name : '?';
          obj.op = { id: node.op.id, name };
          if (typeof node.opData === 'string') {
            obj.opData = node.opData;
          } else if (Array.isArray(node.opData)) {
            obj.opData = [];
            for (let i = 0; i < node.opData.length; i += 1) {
              obj.opData[i] = node.opData[i];
            }
          } else {
            obj.opData = undefined;
          }
          if (node.phrase) {
            obj.phrase = { index: node.phrase.index, length: node.phrase.length };
          } else {
            obj.phrase = null;
          }
          obj.depth = node.depth;
          obj.children = [];
          for (let i = 0; i < node.children.length; i += 1) {
            i !== node.children.length - 1;
            obj.children[i] = display(node.children[i]);
          }
          return obj;
        }

        /* construct the tree beginning here */
        const branch = [];
        let root;
        let node;
        let parent;
        let record;
        let firstRecord = true;
        /* push a dummy node so the root node will have a non-null parent */
        const dummy = nodeDown(null, null, -1);
        branch.push(dummy);
        node = dummy;
        circular.forEach((lineIndex) => {
          record = records[lineIndex];
          if (firstRecord) {
            firstRecord = false;
            if (record.depth > 0) {
              /* push some dummy nodes to fill in for missing records */
              const num = record.dirUp ? record.depth + 1 : record.depth;
              for (let i = 0; i < num; i += 1) {
                parent = node;
                node = nodeDown(node, null, i);
                branch.push(node);
                parent.children.push(node);
              }
            }
          }
          if (record.dirUp) {
            /* handle the next record up */
            node = branch.pop();
            nodeUp(node, record);
            node = branch[branch.length - 1];
          } else {
            /* handle the next record down */
            parent = node;
            node = nodeDown(node, record, record.depth);
            branch.push(node);
            parent.children.push(node);
          }
        });

        /* if not at root, walk it up to root */
        while (branch.length > 1) {
          node = branch.pop();
          nodeUp(node, null);
        }
        /* maybe redundant or paranoid tests: these should never happen */
        if (dummy.children.length === 0) {
          throw new Error('trace.toTree(): parse tree has no nodes');
        }
        if (branch.length === 0) {
          throw new Error('trace.toTree(): integrity check: dummy root node disappeared?');
        }

        /* if no record for start rule: find the pseudo root node (first dummy node above a real node) */
        root = dummy.children[0];
        let prev = root;
        while (root && !root.down && !root.up) {
          prev = root;
          root = root.children[0];
        }
        root = prev;

        /* walk the tree of nodes: label brances and count leaves */
        root.leftMost = true;
        root.rightMost = true;
        walk(root);
        root.branch = 0;

        /* generate the exported object */
        const obj = {};
        obj.string = [];
        for (let i = 0; i < chars.length; i += 1) {
          obj.string[i] = chars[i];
        }
        /* generate the exported rule names */
        obj.rules = [];
        for (let i = 0; i < rules.length; i += 1) {
          obj.rules[i] = rules[i].name;
        }
        /* generate the exported UDT names */
        obj.udts = [];
        for (let i = 0; i < udts.length; i += 1) {
          obj.udts[i] = udts[i].name;
        }
        /* generate the ids */
        obj.id = {};
        obj.id.ALT = { id: id.ALT, name: 'ALT' };
        obj.id.CAT = { id: id.CAT, name: 'CAT' };
        obj.id.REP = { id: id.REP, name: 'REP' };
        obj.id.RNM = { id: id.RNM, name: 'RNM' };
        obj.id.TLS = { id: id.TLS, name: 'TLS' };
        obj.id.TBS = { id: id.TBS, name: 'TBS' };
        obj.id.TRG = { id: id.TRG, name: 'TRG' };
        obj.id.UDT = { id: id.UDT, name: 'UDT' };
        obj.id.AND = { id: id.AND, name: 'AND' };
        obj.id.NOT = { id: id.NOT, name: 'NOT' };
        obj.id.BKR = { id: id.BKR, name: 'BKR' };
        obj.id.BKA = { id: id.BKA, name: 'BKA' };
        obj.id.BKN = { id: id.BKN, name: 'BKN' };
        obj.id.ABG = { id: id.ABG, name: 'ABG' };
        obj.id.AEN = { id: id.AEN, name: 'AEN' };
        obj.id.ACTIVE = { id: id.ACTIVE, name: 'ACTIVE' };
        obj.id.MATCH = { id: id.MATCH, name: 'MATCH' };
        obj.id.EMPTY = { id: id.EMPTY, name: 'EMPTY' };
        obj.id.NOMATCH = { id: id.NOMATCH, name: 'NOMATCH' };
        /* generate the max tree depth */
        obj.treeDepth = treeDepth;
        /* generate the number of leaf nodes (branches) */
        obj.leafNodes = leafNodes;
        /* generate the types of the left- and right-most branches */
        let branchesIncomplete;
        if (root.down) {
          if (root.up) {
            branchesIncomplete = 'none';
          } else {
            branchesIncomplete = 'right';
          }
        } else if (root.up) {
          branchesIncomplete = 'left';
        } else {
          branchesIncomplete = 'both';
        }
        obj.branchesIncomplete = branchesIncomplete;
        obj.tree = display(root, root.depth);
        return obj;
      };
      // Returns the trace records as JSON parse tree object.
      // - stringify: if `true`, the object is 'stringified' before returning, otherwise, the object itself is returned.
      this.toTree = function (stringify) {
        const obj = toTreeObj();
        if (stringify) {
          return JSON.stringify(obj);
        }
        return obj;
      };
      // Translate the trace records to HTML format and create a complete HTML page for browser display.
      this.toHtmlPage = function (mode, caption, title) {
        return utils.htmlToPage(this.toHtml(mode, caption), title);
      };

      /* From here on down, these are just helper functions for `toHtml()`. */
      const htmlHeader = function (mode, caption) {
        /* open the page */
        /* write the HTML5 header with table style */
        /* open the <table> tag */
        let modeName;
        switch (mode) {
          case MODE_HEX:
            modeName = 'hexadecimal';
            break;
          case MODE_DEC:
            modeName = 'decimal';
            break;
          case MODE_ASCII:
            modeName = 'ASCII';
            break;
          case MODE_UNICODE:
            modeName = 'UNICODE';
            break;
          default:
            throw new Error(`${thisFileName}htmlHeader: unrecognized mode: ${mode}`);
        }
        let header = '';
        header += `<p>display mode: ${modeName}</p>\n`;
        header += `<table class="${style$1.CLASS_TRACE}">\n`;
        if (typeof caption === 'string') {
          header += `<caption>${caption}</caption>`;
        }
        return header;
      };
      const htmlFooter = function () {
        let footer = '';
        /* close the </table> tag */
        footer += '</table>\n';
        /* display a table legend */
        footer += `<p class="${style$1.CLASS_MONOSPACE}">legend:<br>\n`;
        footer += '(a)&nbsp;-&nbsp;line number<br>\n';
        footer += '(b)&nbsp;-&nbsp;matching line number<br>\n';
        footer += '(c)&nbsp;-&nbsp;phrase offset<br>\n';
        footer += '(d)&nbsp;-&nbsp;phrase length<br>\n';
        footer += '(e)&nbsp;-&nbsp;tree depth<br>\n';
        footer += '(f)&nbsp;-&nbsp;operator state<br>\n';
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_ACTIVE}">&darr;</span>&nbsp;&nbsp;phrase opened<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_MATCH}">&uarr;M</span> phrase matched<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_EMPTY}">&uarr;E</span> empty phrase matched<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_NOMATCH}">&uarr;N</span> phrase not matched<br>\n`;
        footer +=
          'operator&nbsp;-&nbsp;ALT, CAT, REP, RNM, TRG, TLS, TBS<sup>&dagger;</sup>, UDT, AND, NOT, BKA, BKN, BKR, ABG, AEN<sup>&Dagger;</sup><br>\n';
        footer += `phrase&nbsp;&nbsp;&nbsp;-&nbsp;up to ${MAX_PHRASE} characters of the phrase being matched<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_MATCH}">matched characters</span><br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_LOOKAHEAD}">matched characters in look ahead mode</span><br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_LOOKBEHIND}">matched characters in look behind mode</span><br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_REMAINDER}">remainder characters(not yet examined by parser)</span><br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="${style$1.CLASS_CTRLCHAR}">control characters, TAB, LF, CR, etc. (ASCII mode only)</span><br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_EMPTY} empty string<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_END} end of input string<br>\n`;
        footer += `&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;${PHRASE_CONTINUE} input string display truncated<br>\n`;
        footer += '</p>\n';
        footer += `<p class="${style$1.CLASS_MONOSPACE}">\n`;
        footer += '<sup>&dagger;</sup>original ABNF operators:<br>\n';
        footer += 'ALT - alternation<br>\n';
        footer += 'CAT - concatenation<br>\n';
        footer += 'REP - repetition<br>\n';
        footer += 'RNM - rule name<br>\n';
        footer += 'TRG - terminal range<br>\n';
        footer += 'TLS - terminal literal string (case insensitive)<br>\n';
        footer += 'TBS - terminal binary string (case sensitive)<br>\n';
        footer += '<br>\n';
        footer += '<sup>&Dagger;</sup>super set SABNF operators:<br>\n';
        footer += 'UDT - user-defined terminal<br>\n';
        footer += 'AND - positive look ahead<br>\n';
        footer += 'NOT - negative look ahead<br>\n';
        footer += 'BKA - positive look behind<br>\n';
        footer += 'BKN - negative look behind<br>\n';
        footer += 'BKR - back reference<br>\n';
        footer += 'ABG - anchor - begin of input string<br>\n';
        footer += 'AEN - anchor - end of input string<br>\n';
        footer += '</p>\n';
        return footer;
      };
      this.indent = function (depth) {
        let html = '';
        for (let i = 0; i < depth; i += 1) {
          html += '.';
        }
        return html;
      };
      /* format the TRG operator */
      const displayTrg = function (mode, op) {
        let html = '';
        if (op.type === id.TRG) {
          if (mode === MODE_HEX || mode === MODE_UNICODE) {
            let hex = op.min.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html += mode === MODE_HEX ? '%x' : 'U+';
            html += hex;
            hex = op.max.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html += `&ndash;${hex}`;
          } else {
            html = `%d${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
          }
        }
        return html;
      };
      /* format the REP operator */
      const displayRep = function (mode, op) {
        let html = '';
        if (op.type === id.REP) {
          if (mode === MODE_HEX) {
            let hex = op.min.toString(16).toUpperCase();
            if (hex.length % 2 !== 0) {
              hex = `0${hex}`;
            }
            html = `x${hex}`;
            if (op.max < Infinity) {
              hex = op.max.toString(16).toUpperCase();
              if (hex.length % 2 !== 0) {
                hex = `0${hex}`;
              }
            } else {
              hex = 'inf';
            }
            html += `&ndash;${hex}`;
          } else if (op.max < Infinity) {
            html = `${op.min.toString(10)}&ndash;${op.max.toString(10)}`;
          } else {
            html = `${op.min.toString(10)}&ndash;inf`;
          }
        }
        return html;
      };
      /* format the TBS operator */
      const displayTbs = function (mode, op) {
        let html = '';
        if (op.type === id.TBS) {
          const len = Math.min(op.string.length, MAX_TLS * 2);
          if (mode === MODE_HEX || mode === MODE_UNICODE) {
            html += mode === MODE_HEX ? '%x' : 'U+';
            for (let i = 0; i < len; i += 1) {
              let hex;
              if (i > 0) {
                html += '.';
              }
              hex = op.string[i].toString(16).toUpperCase();
              if (hex.length % 2 !== 0) {
                hex = `0${hex}`;
              }
              html += hex;
            }
          } else {
            html = '%d';
            for (let i = 0; i < len; i += 1) {
              if (i > 0) {
                html += '.';
              }
              html += op.string[i].toString(10);
            }
          }
          if (len < op.string.length) {
            html += PHRASE_CONTINUE;
          }
        }
        return html;
      };
      /* format the TLS operator */
      const displayTls = function (mode, op) {
        let html = '';
        if (op.type === id.TLS) {
          const len = Math.min(op.string.length, MAX_TLS);
          if (mode === MODE_HEX || mode === MODE_DEC) {
            let charu;
            let charl;
            let base;
            if (mode === MODE_HEX) {
              html = '%x';
              base = 16;
            } else {
              html = '%d';
              base = 10;
            }
            for (let i = 0; i < len; i += 1) {
              if (i > 0) {
                html += '.';
              }
              charl = op.string[i];
              if (charl >= 97 && charl <= 122) {
                charu = charl - 32;
                html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
              } else if (charl >= 65 && charl <= 90) {
                charu = charl;
                charl += 32;
                html += `${charu.toString(base)}/${charl.toString(base)}`.toUpperCase();
              } else {
                html += charl.toString(base).toUpperCase();
              }
            }
            if (len < op.string.length) {
              html += PHRASE_CONTINUE;
            }
          } else {
            html = '"';
            for (let i = 0; i < len; i += 1) {
              html += utils.asciiChars[op.string[i]];
            }
            if (len < op.string.length) {
              html += PHRASE_CONTINUE;
            }
            html += '"';
          }
        }
        return html;
      };
      const subPhrase = function (mode, charsArg, index, length, prev) {
        if (length === 0) {
          return '';
        }
        let phrase = '';
        const comma = prev ? ',' : '';
        switch (mode) {
          case MODE_HEX:
            phrase = comma + utils.charsToHex(charsArg, index, length);
            break;
          case MODE_DEC:
            if (prev) {
              return `,${utils.charsToDec(charsArg, index, length)}`;
            }
            phrase = comma + utils.charsToDec(charsArg, index, length);
            break;
          case MODE_UNICODE:
            phrase = utils.charsToUnicode(charsArg, index, length);
            break;
          case MODE_ASCII:
          default:
            phrase = utils.charsToAsciiHtml(charsArg, index, length);
            break;
        }
        return phrase;
      };
      /* display phrases matched in look-behind mode */
      const displayBehind = function (mode, charsArg, state, index, length, anchor) {
        let html = '';
        let beg1;
        let len1;
        let beg2;
        let len2;
        let lastchar = PHRASE_END;
        const spanBehind = `<span class="${style$1.CLASS_LOOKBEHIND}">`;
        const spanRemainder = `<span class="${style$1.CLASS_REMAINDER}">`;
        const spanend = '</span>';
        let prev = false;
        switch (state) {
          case id.EMPTY:
            html += PHRASE_EMPTY;
          /* // eslint-disable-next-line no-fallthrough */
          case id.NOMATCH:
          case id.MATCH:
          case id.ACTIVE:
            beg1 = index - length;
            len1 = anchor - beg1;
            beg2 = anchor;
            len2 = charsArg.length - beg2;
            break;
          default:
            throw new Error('unrecognized state');
        }
        lastchar = PHRASE_END;
        if (len1 > MAX_PHRASE) {
          len1 = MAX_PHRASE;
          lastchar = PHRASE_CONTINUE;
          len2 = 0;
        } else if (len1 + len2 > MAX_PHRASE) {
          lastchar = PHRASE_CONTINUE;
          len2 = MAX_PHRASE - len1;
        }
        if (len1 > 0) {
          html += spanBehind;
          html += subPhrase(mode, charsArg, beg1, len1, prev);
          html += spanend;
          prev = true;
        }
        if (len2 > 0) {
          html += spanRemainder;
          html += subPhrase(mode, charsArg, beg2, len2, prev);
          html += spanend;
        }
        return html + lastchar;
      };
      const displayForward = function (mode, charsArg, state, index, length, spanAhead) {
        let html = '';
        let beg1;
        let len1;
        let beg2;
        let len2;
        let lastchar = PHRASE_END;
        const spanRemainder = `<span class="${style$1.CLASS_REMAINDER}">`;
        const spanend = '</span>';
        let prev = false;
        switch (state) {
          case id.EMPTY:
            html += PHRASE_EMPTY;
          /* // eslint-disable-next-line no-fallthrough */
          case id.NOMATCH:
          case id.ACTIVE:
            beg1 = index;
            len1 = 0;
            beg2 = index;
            len2 = charsArg.length - beg2;
            break;
          case id.MATCH:
            beg1 = index;
            len1 = length;
            beg2 = index + len1;
            len2 = charsArg.length - beg2;
            break;
          default:
            throw new Error('unrecognized state');
        }
        lastchar = PHRASE_END;
        if (len1 > MAX_PHRASE) {
          len1 = MAX_PHRASE;
          lastchar = PHRASE_CONTINUE;
          len2 = 0;
        } else if (len1 + len2 > MAX_PHRASE) {
          lastchar = PHRASE_CONTINUE;
          len2 = MAX_PHRASE - len1;
        }
        if (len1 > 0) {
          html += spanAhead;
          html += subPhrase(mode, charsArg, beg1, len1, prev);
          html += spanend;
          prev = true;
        }
        if (len2 > 0) {
          html += spanRemainder;
          html += subPhrase(mode, charsArg, beg2, len2, prev);
          html += spanend;
        }
        return html + lastchar;
      };
      /* display phrases matched in look-ahead mode */
      const displayAhead = function (mode, charsArg, state, index, length) {
        const spanAhead = `<span class="${style$1.CLASS_LOOKAHEAD}">`;
        return displayForward(mode, charsArg, state, index, length, spanAhead);
      };
      /* display phrases matched in normal parsing mode */
      const displayNone = function (mode, charsArg, state, index, length) {
        const spanAhead = `<span class="${style$1.CLASS_MATCH}">`;
        return displayForward(mode, charsArg, state, index, length, spanAhead);
      };
      /* Returns the filtered records, formatted as an HTML table. */
      const htmlTable = function (mode) {
        if (rules === null) {
          return '';
        }
        let html = '';
        let thisLine;
        let thatLine;
        let lookAhead;
        let lookBehind;
        let lookAround;
        let anchor;
        html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';
        html += '<th>operator</th><th>phrase</th></tr>\n';
        circular.forEach((lineIndex) => {
          const line = records[lineIndex];
          thisLine = line.thisLine;
          thatLine = line.thatLine !== undefined ? line.thatLine : '--';
          lookAhead = false;
          lookBehind = false;
          lookAround = false;
          if (line.lookAround === id.LOOKAROUND_AHEAD) {
            lookAhead = true;
            lookAround = true;
            anchor = line.lookAnchor;
          }
          if (line.opcode.type === id.AND || line.opcode.type === id.NOT) {
            lookAhead = true;
            lookAround = true;
            anchor = line.phraseIndex;
          }
          if (line.lookAround === id.LOOKAROUND_BEHIND) {
            lookBehind = true;
            lookAround = true;
            anchor = line.lookAnchor;
          }
          if (line.opcode.type === id.BKA || line.opcode.type === id.BKN) {
            lookBehind = true;
            lookAround = true;
            anchor = line.phraseIndex;
          }
          html += '<tr>';
          html += `<td>${thisLine}</td><td>${thatLine}</td>`;
          html += `<td>${line.phraseIndex}</td>`;
          html += `<td>${line.phraseLength}</td>`;
          html += `<td>${line.depth}</td>`;
          html += '<td>';
          switch (line.state) {
            case id.ACTIVE:
              html += `<span class="${style$1.CLASS_ACTIVE}">&darr;&nbsp;</span>`;
              break;
            case id.MATCH:
              html += `<span class="${style$1.CLASS_MATCH}">&uarr;M</span>`;
              break;
            case id.NOMATCH:
              html += `<span class="${style$1.CLASS_NOMATCH}">&uarr;N</span>`;
              break;
            case id.EMPTY:
              html += `<span class="${style$1.CLASS_EMPTY}">&uarr;E</span>`;
              break;
            default:
              html += `<span class="${style$1.CLASS_ACTIVE}">--</span>`;
              break;
          }
          html += '</td>';
          html += '<td>';
          html += that.indent(line.depth);
          if (lookAhead) {
            html += `<span class="${style$1.CLASS_LOOKAHEAD}">`;
          } else if (lookBehind) {
            html += `<span class="${style$1.CLASS_LOOKBEHIND}">`;
          }
          html += utils.opcodeToString(line.opcode.type);
          if (line.opcode.type === id.RNM) {
            html += `(${rules[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.BKR) {
            const casetype = line.opcode.bkrCase === id.BKR_MODE_CI ? '%i' : '%s';
            const modetype = line.opcode.bkrMode === id.BKR_MODE_UM ? '%u' : '%p';
            html += `(\\${casetype}${modetype}${rules[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.UDT) {
            html += `(${udts[line.opcode.index].name}) `;
          }
          if (line.opcode.type === id.TRG) {
            html += `(${displayTrg(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.TBS) {
            html += `(${displayTbs(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.TLS) {
            html += `(${displayTls(mode, line.opcode)}) `;
          }
          if (line.opcode.type === id.REP) {
            html += `(${displayRep(mode, line.opcode)}) `;
          }
          if (lookAround) {
            html += '</span>';
          }
          html += '</td>';
          html += '<td>';
          if (lookBehind) {
            html += displayBehind(mode, chars, line.state, line.phraseIndex, line.phraseLength, anchor);
          } else if (lookAhead) {
            html += displayAhead(mode, chars, line.state, line.phraseIndex, line.phraseLength);
          } else {
            html += displayNone(mode, chars, line.state, line.phraseIndex, line.phraseLength);
          }
          html += '</td></tr>\n';
        });
        html += '<tr><th>(a)</th><th>(b)</th><th>(c)</th><th>(d)</th><th>(e)</th><th>(f)</th>';
        html += '<th>operator</th><th>phrase</th></tr>\n';
        html += '</table>\n';
        return html;
      };
      // Translate the trace records to HTML format.
      // - *modearg* - can be `"ascii"`, `"decimal"`, `"hexadecimal"` or `"unicode"`.
      // Determines the format of the string character code display.
      // - *caption* - optional caption for the HTML table.
      this.toHtml = function (modearg, caption) {
        /* writes the trace records as a table in a complete html page */
        let mode = MODE_ASCII;
        if (typeof modearg === 'string' && modearg.length >= 3) {
          const modein = modearg.toLowerCase().slice(0, 3);
          if (modein === 'hex') {
            mode = MODE_HEX;
          } else if (modein === 'dec') {
            mode = MODE_DEC;
          } else if (modein === 'uni') {
            mode = MODE_UNICODE;
          }
        }
        let html = '';
        html += htmlHeader(mode, caption);
        html += htmlTable(mode);
        html += htmlFooter();
        return html;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module serves to export all library objects and object constructors with the `require("apg-lib")` statement.
    // For example, to create a new parser in your program,
    // ````
    // let apglib = require("../apg-lib/node-exports");
    // let my-parser = new apglib.parser();
    // ````
    var nodeExports = {
      ast: ast,
      circular: circularBuffer,
      ids: identifiers,
      parser: parser$1,
      stats: stats,
      trace: trace,
      utils: utilities,
      emitcss: emitcss,
      style: style,
    };

    // copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved<br>
    //   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
    //
    // Generated by apg-js, Version 4.0.0 [apg-js](https://github.com/ldthomas/apg-js)
    var scannerGrammar = function grammar(){
      // ```
      // SUMMARY
      //      rules = 10
      //       udts = 0
      //    opcodes = 31
      //        ---   ABNF original opcodes
      //        ALT = 5
      //        CAT = 2
      //        REP = 4
      //        RNM = 11
      //        TLS = 0
      //        TBS = 4
      //        TRG = 5
      //        ---   SABNF superset opcodes
      //        UDT = 0
      //        AND = 0
      //        NOT = 0
      //        BKA = 0
      //        BKN = 0
      //        BKR = 0
      //        ABG = 0
      //        AEN = 0
      // characters = [0 - 4294967295]
      // ```
      /* OBJECT IDENTIFIER (for internal parser use) */
      this.grammarObject = 'grammarObject';

      /* RULES */
      this.rules = [];
      this.rules[0] = {name: 'file', lower: 'file', index: 0, isBkr: false};
      this.rules[1] = {name: 'line', lower: 'line', index: 1, isBkr: false};
      this.rules[2] = {name: 'line-text', lower: 'line-text', index: 2, isBkr: false};
      this.rules[3] = {name: 'last-line', lower: 'last-line', index: 3, isBkr: false};
      this.rules[4] = {name: 'valid', lower: 'valid', index: 4, isBkr: false};
      this.rules[5] = {name: 'invalid', lower: 'invalid', index: 5, isBkr: false};
      this.rules[6] = {name: 'end', lower: 'end', index: 6, isBkr: false};
      this.rules[7] = {name: 'CRLF', lower: 'crlf', index: 7, isBkr: false};
      this.rules[8] = {name: 'LF', lower: 'lf', index: 8, isBkr: false};
      this.rules[9] = {name: 'CR', lower: 'cr', index: 9, isBkr: false};

      /* UDTS */
      this.udts = [];

      /* OPCODES */
      /* file */
      this.rules[0].opcodes = [];
      this.rules[0].opcodes[0] = {type: 2, children: [1,3]};// CAT
      this.rules[0].opcodes[1] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(line)
      this.rules[0].opcodes[3] = {type: 3, min: 0, max: 1};// REP
      this.rules[0].opcodes[4] = {type: 4, index: 3};// RNM(last-line)

      /* line */
      this.rules[1].opcodes = [];
      this.rules[1].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[1].opcodes[1] = {type: 4, index: 2};// RNM(line-text)
      this.rules[1].opcodes[2] = {type: 4, index: 6};// RNM(end)

      /* line-text */
      this.rules[2].opcodes = [];
      this.rules[2].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[2].opcodes[1] = {type: 1, children: [2,3]};// ALT
      this.rules[2].opcodes[2] = {type: 4, index: 4};// RNM(valid)
      this.rules[2].opcodes[3] = {type: 4, index: 5};// RNM(invalid)

      /* last-line */
      this.rules[3].opcodes = [];
      this.rules[3].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[3].opcodes[1] = {type: 1, children: [2,3]};// ALT
      this.rules[3].opcodes[2] = {type: 4, index: 4};// RNM(valid)
      this.rules[3].opcodes[3] = {type: 4, index: 5};// RNM(invalid)

      /* valid */
      this.rules[4].opcodes = [];
      this.rules[4].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[4].opcodes[1] = {type: 5, min: 32, max: 126};// TRG
      this.rules[4].opcodes[2] = {type: 6, string: [9]};// TBS

      /* invalid */
      this.rules[5].opcodes = [];
      this.rules[5].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT
      this.rules[5].opcodes[1] = {type: 5, min: 0, max: 8};// TRG
      this.rules[5].opcodes[2] = {type: 5, min: 11, max: 12};// TRG
      this.rules[5].opcodes[3] = {type: 5, min: 14, max: 31};// TRG
      this.rules[5].opcodes[4] = {type: 5, min: 127, max: 4294967295};// TRG

      /* end */
      this.rules[6].opcodes = [];
      this.rules[6].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
      this.rules[6].opcodes[1] = {type: 4, index: 7};// RNM(CRLF)
      this.rules[6].opcodes[2] = {type: 4, index: 8};// RNM(LF)
      this.rules[6].opcodes[3] = {type: 4, index: 9};// RNM(CR)

      /* CRLF */
      this.rules[7].opcodes = [];
      this.rules[7].opcodes[0] = {type: 6, string: [13,10]};// TBS

      /* LF */
      this.rules[8].opcodes = [];
      this.rules[8].opcodes[0] = {type: 6, string: [10]};// TBS

      /* CR */
      this.rules[9].opcodes = [];
      this.rules[9].opcodes[0] = {type: 6, string: [13]};// TBS

      // The `toString()` function will display the original grammar file(s) that produced these opcodes.
      this.toString = function toString(){
        let str = "";
        str += "file = *line [last-line]\n";
        str += "line = line-text end\n";
        str += "line-text = *(valid/invalid)\n";
        str += "last-line = 1*(valid/invalid)\n";
        str += "valid = %d32-126 / %d9\n";
        str += "invalid = %d0-8 / %d11-12 /%d14-31 / %x7f-ffffffff\n";
        str += "end = CRLF / LF / CR\n";
        str += "CRLF = %d13.10\n";
        str += "LF = %d10\n";
        str += "CR = %d13\n";
        return str;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // These are the AST translation callback functions used by the scanner
    // to analyze the characters and lines.



    function semLine(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.endLength = 0;
        data.textLength = 0;
        data.invalidCount = 0;
      } else {
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount,
          textLength: data.textLength,
          endType: data.endType,
          invalidChars: data.invalidCount,
        });
      }
      return identifiers.SEM_OK;
    }
    function semLineText(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.textLength = phraseCount;
      }
      return identifiers.SEM_OK;
    }
    function semLastLine(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.endLength = 0;
        data.textLength = 0;
        data.invalidCount = 0;
      } else if (data.strict) {
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount,
          textLength: phraseCount,
          endType: 'none',
          invalidChars: data.invalidCount,
        });
        data.errors.push({
          line: data.lineNo,
          char: phraseIndex + phraseCount,
          msg: 'no line end on last line - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)',
        });
      } else {
        /* add a line ender */
        chars.push(10);
        data.lines.push({
          lineNo: data.lines.length,
          beginChar: phraseIndex,
          length: phraseCount + 1,
          textLength: phraseCount,
          endType: 'LF',
          invalidChars: data.invalidCount,
        });
      }
      return identifiers.SEM_OK;
    }
    function semInvalid(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.errors.push({
          line: data.lineNo,
          char: phraseIndex,
          msg: `invalid character found '\\x${utilities.charToHex(chars[phraseIndex])}'`,
        });
      }
      return identifiers.SEM_OK;
    }
    function semEnd(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_POST) {
        data.lineNo += 1;
      }
      return identifiers.SEM_OK;
    }
    function semLF(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.endType = 'LF';
        if (data.strict) {
          data.errors.push({
            line: data.lineNo,
            char: phraseIndex,
            msg: 'line end character LF(\\n, \\x0A) - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)',
          });
        }
      }
      return identifiers.SEM_OK;
    }
    function semCR(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.endType = 'CR';
        if (data.strict) {
          data.errors.push({
            line: data.lineNo,
            char: phraseIndex,
            msg: 'line end character CR(\\r, \\x0D) - strict ABNF specifies CRLF(\\r\\n, \\x0D\\x0A)',
          });
        }
      }
      return identifiers.SEM_OK;
    }
    function semCRLF(state, chars, phraseIndex, phraseCount, data) {
      if (state === identifiers.SEM_PRE) {
        data.endType = 'CRLF';
      }
      return identifiers.SEM_OK;
    }
    const callbacks = [];
    callbacks.line = semLine;
    callbacks['line-text'] = semLineText;
    callbacks['last-line'] = semLastLine;
    callbacks.invalid = semInvalid;
    callbacks.end = semEnd;
    callbacks.lf = semLF;
    callbacks.cr = semCR;
    callbacks.crlf = semCRLF;
    var callbacks_1 = callbacks;

    var scannerCallbacks = {
    	callbacks: callbacks_1
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module reads the input grammar file and does a preliminary analysis
    // before attempting to parse it into a grammar object.
    // See:<br>
    // `./dist/scanner-grammar.bnf`<br>
    // for the grammar file this parser is based on.
    //
    // It has two primary functions.
    // - verify the character codes - no non-printing ASCII characters
    // - catalog the lines - create an array with a line object for each line.
    // The object carries information about the line number and character length which is used
    // by the parser generator primarily for error reporting.
    var scanner = function exfn(chars, errors, strict, trace) {
      const thisFileName = 'scanner.js: ';
      const apglib = nodeExports;
      const grammar = new (scannerGrammar)();
      const { callbacks } = scannerCallbacks;

      /* Scan the grammar for character code errors and catalog the lines. */
      const lines = [];
      // eslint-disable-next-line new-cap
      const parser = new apglib.parser();
      // eslint-disable-next-line new-cap
      parser.ast = new apglib.ast();
      parser.ast.callbacks = callbacks;
      if (trace) {
        if (trace.traceObject !== 'traceObject') {
          throw new TypeError(`${thisFileName}trace argument is not a trace object`);
        }
        parser.trace = trace;
      }

      /* parse the input SABNF grammar */
      const test = parser.parse(grammar, 'file', chars);
      if (test.success !== true) {
        errors.push({
          line: 0,
          char: 0,
          msg: 'syntax analysis error analyzing input SABNF grammar',
        });
        return;
      }
      const data = {
        lines,
        lineNo: 0,
        errors,
        strict: !!strict,
      };

      /* translate (analyze) the input SABNF grammar */
      parser.ast.translate(data);
      // eslint-disable-next-line consistent-return
      return lines;
    };

    /* eslint-disable func-names */

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // This module has all of the callback functions for the syntax phase of the generation.
    // See:<br>
    // `./dist/abnf-for-sabnf-grammar.bnf`<br>
    // for the grammar file these callback functions are based on.
    var syntaxCallbacks = function exfn() {
      const thisFileName = 'syntax-callbacks.js: ';
      const apglib = nodeExports;
      const id = apglib.ids;
      let topAlt;
      /* syntax, RNM, callback functions */
      const synFile = function synFile(result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.altStack = [];
            data.repCount = 0;
            break;
          case id.EMPTY:
            data.errors.push({
              line: 0,
              char: 0,
              msg: 'grammar file is empty',
            });
            break;
          case id.MATCH:
            if (data.ruleCount === 0) {
              data.errors.push({
                line: 0,
                char: 0,
                msg: 'no rules defined',
              });
            }
            break;
          case id.NOMATCH:
            throw new Error(`${thisFileName}synFile: grammar file NOMATCH: design error: should never happen.`);
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      // eslint-disable-next-line func-names
      const synRule = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.altStack.length = 0;
            topAlt = {
              groupOpen: null,
              groupError: false,
              optionOpen: null,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false,
            };
            data.altStack.push(topAlt);
            break;
          case id.EMPTY:
            throw new Error(`${thisFileName}synRule: EMPTY: rule cannot be empty`);
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.ruleCount += 1;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRuleError = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: 'Unrecognized SABNF line. Invalid rule, comment or blank line.',
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRuleNameError = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: 'Rule names must be alphanum and begin with alphabetic character.',
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synDefinedAsError = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: "Expected '=' or '=/'. Not found.",
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAndOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'AND operator(&) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synNotOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'NOT operator(!) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBkaOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'Positive look-behind operator(&&) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBknOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'Negative look-behind operator(!!) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAbgOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'Beginning of string anchor(%^) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synAenOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'End of string anchor(%$) found - strict ABNF specified.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBkrOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Back reference operator(${name}) found - strict ABNF specified.`,
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synUdtOp = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.strict) {
              const name = apglib.utils.charsToString(chars, phraseIndex, result.phraseLength);
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `UDT operator found(${name}) - strict ABNF specified.`,
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsOpen = function (result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.tlsOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsString = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: "Tab character (\\t, x09) not allowed in literal string (see 'quoted-string' definition, RFC 7405.)",
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synStringTab = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.stringTabChar = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synTlsClose = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.tlsOpen),
              char: topAlt.tlsOpen,
              msg: 'Case-insensitive literal string("...") opened but not closed.',
            });
            topAlt.basicError = true;
            topAlt.tlsOpen = null;
            break;
          case id.MATCH:
            topAlt.tlsOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsOpen = function (result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.clsOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsString = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: 'Tab character (\\t, x09) not allowed in literal string.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synClsClose = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.clsOpen),
              char: topAlt.clsOpen,
              msg: "Case-sensitive literal string('...') opened but not closed.",
            });
            topAlt.clsOpen = null;
            topAlt.basicError = true;
            break;
          case id.MATCH:
            if (data.strict) {
              data.errors.push({
                line: data.findLine(data.lines, topAlt.clsOpen),
                char: topAlt.clsOpen,
                msg: "Case-sensitive string operator('...') found - strict ABNF specified.",
              });
            }
            topAlt.clsOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValOpen = function (result, chars, phraseIndex) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt.prosValOpen = phraseIndex;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValString = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            data.stringTabChar = false;
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (data.stringTabChar !== false) {
              data.errors.push({
                line: data.findLine(data.lines, data.stringTabChar),
                char: data.stringTabChar,
                msg: 'Tab character (\\t, x09) not allowed in prose value string.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synProsValClose = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.prosValOpen),
              char: topAlt.prosValOpen,
              msg: 'Prose value operator(<...>) opened but not closed.',
            });
            topAlt.basicError = true;
            topAlt.prosValOpen = null;
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.prosValOpen),
              char: topAlt.prosValOpen,
              msg: 'Prose value operator(<...>) found. The ABNF syntax is valid, but a parser cannot be generated from this grammar.',
            });
            topAlt.prosValOpen = null;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synGroupOpen = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt = {
              groupOpen: phraseIndex,
              groupError: false,
              optionOpen: null,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false,
            };
            data.altStack.push(topAlt);
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synGroupClose = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.groupOpen),
              char: topAlt.groupOpen,
              msg: 'Group "(...)" opened but not closed.',
            });
            topAlt = data.altStack.pop();
            topAlt.groupError = true;
            break;
          case id.MATCH:
            topAlt = data.altStack.pop();
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synOptionOpen = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            topAlt = {
              groupOpen: null,
              groupError: false,
              optionOpen: phraseIndex,
              optionError: false,
              tlsOpen: null,
              clsOpen: null,
              prosValOpen: null,
              basicError: false,
            };
            data.altStack.push(topAlt);
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synOptionClose = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.errors.push({
              line: data.findLine(data.lines, topAlt.optionOpen),
              char: topAlt.optionOpen,
              msg: 'Option "[...]" opened but not closed.',
            });
            topAlt = data.altStack.pop();
            topAlt.optionError = true;
            break;
          case id.MATCH:
            topAlt = data.altStack.pop();
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synBasicElementError = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (topAlt.basicError === false) {
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: 'Unrecognized SABNF element.',
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synLineEnd = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            if (result.phraseLength === 1 && data.strict) {
              const end = chars[phraseIndex] === 13 ? 'CR' : 'LF';
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Line end '${end}' found - strict ABNF specified, only CRLF allowed.`,
              });
            }
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synLineEndError = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            break;
          case id.MATCH:
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: 'Unrecognized grammar element or characters.',
            });
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      const synRepetition = function (result, chars, phraseIndex, data) {
        switch (result.state) {
          case id.ACTIVE:
            break;
          case id.EMPTY:
            break;
          case id.NOMATCH:
            data.repCount += 1;
            break;
          case id.MATCH:
            data.repCount += 1;
            break;
          default:
            throw new Error(`${thisFileName}synFile: unrecognized case.`);
        }
      };
      // Define the list of callback functions.
      this.callbacks = [];
      this.callbacks.andop = synAndOp;
      this.callbacks.basicelementerr = synBasicElementError;
      this.callbacks.clsclose = synClsClose;
      this.callbacks.clsopen = synClsOpen;
      this.callbacks.clsstring = synClsString;
      this.callbacks.definedaserror = synDefinedAsError;
      this.callbacks.file = synFile;
      this.callbacks.groupclose = synGroupClose;
      this.callbacks.groupopen = synGroupOpen;
      this.callbacks.lineenderror = synLineEndError;
      this.callbacks.lineend = synLineEnd;
      this.callbacks.notop = synNotOp;
      this.callbacks.optionclose = synOptionClose;
      this.callbacks.optionopen = synOptionOpen;
      this.callbacks.prosvalclose = synProsValClose;
      this.callbacks.prosvalopen = synProsValOpen;
      this.callbacks.prosvalstring = synProsValString;
      this.callbacks.repetition = synRepetition;
      this.callbacks.rule = synRule;
      this.callbacks.ruleerror = synRuleError;
      this.callbacks.rulenameerror = synRuleNameError;
      this.callbacks.stringtab = synStringTab;
      this.callbacks.tlsclose = synTlsClose;
      this.callbacks.tlsopen = synTlsOpen;
      this.callbacks.tlsstring = synTlsString;
      this.callbacks.udtop = synUdtOp;
      this.callbacks.bkaop = synBkaOp;
      this.callbacks.bknop = synBknOp;
      this.callbacks.bkrop = synBkrOp;
      this.callbacks.abgop = synAbgOp;
      this.callbacks.aenop = synAenOp;
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module has all of the AST translation callback functions for the semantic analysis
    // phase of the generator.
    // See:<br>
    // `./dist/abnf-for-sabnf-grammar.bnf`<br>
    // for the grammar file these callback functions are based on.
    var semanticCallbacks = function exfn() {
      const apglib = nodeExports;
      const id = apglib.ids;

      /* Some helper functions. */
      const NameList = function NameList() {
        this.names = [];
        /* Adds a new rule name object to the list. Returns -1 if the name already exists. */
        /* Returns the added name object if the name does not already exist. */
        this.add = function add(name) {
          let ret = -1;
          const find = this.get(name);
          if (find === -1) {
            ret = {
              name,
              lower: name.toLowerCase(),
              index: this.names.length,
            };
            this.names.push(ret);
          }
          return ret;
        };
        /* Brute-force look up. */
        this.get = function get(name) {
          let ret = -1;
          const lower = name.toLowerCase();
          for (let i = 0; i < this.names.length; i += 1) {
            if (this.names[i].lower === lower) {
              ret = this.names[i];
              break;
            }
          }
          return ret;
        };
      };
      /* converts text decimal numbers from, e.g. %d99, to an integer */
      const decnum = function decnum(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          num = 10 * num + chars[i] - 48;
        }
        return num;
      };
      /* converts text binary numbers from, e.g. %b10, to an integer */
      const binnum = function binnum(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          num = 2 * num + chars[i] - 48;
        }
        return num;
      };
      /* converts text hexadecimal numbers from, e.g. %xff, to an integer */
      const hexnum = function hexnum(chars, beg, len) {
        let num = 0;
        for (let i = beg; i < beg + len; i += 1) {
          let digit = chars[i];
          if (digit >= 48 && digit <= 57) {
            digit -= 48;
          } else if (digit >= 65 && digit <= 70) {
            digit -= 55;
          } else if (digit >= 97 && digit <= 102) {
            digit -= 87;
          } else {
            throw new Error('hexnum out of range');
          }
          num = 16 * num + digit;
        }
        return num;
      };

      // This is the prototype for all semantic analysis callback functions.
      // ````
      // state - the translator state
      //   id.SEM_PRE for downward (pre-branch) traversal of the AST
      //   id.SEM_POST for upward (post branch) traversal of the AST
      // chars - the array of character codes for the input string
      // phraseIndex - index into the chars array to the first
      //               character of the phrase
      // phraseCount - the number of characters in the phrase
      // data - user-defined data passed to the translator
      //        for use by the callback functions.
      // @return id.SEM_OK, normal return.
      //         id.SEM_SKIP in state id.SEM_PRE will
      //         skip the branch below.
      //         Any thing else is an error which will
      //         stop the translation.
      // ````
      /*
      function semCallbackPrototype(state, chars, phraseIndex, phraseCount, data) {
        let ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
        } else if (state === id.SEM_POST) {
        }
        return ret;
      }
      */
      // The AST callback functions.
      function semFile(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleNames = new NameList();
          data.udtNames = new NameList();
          data.rules = [];
          data.udts = [];
          data.rulesLineMap = [];
          data.opcodes = [];
          data.altStack = [];
          data.topStack = null;
          data.topRule = null;
        } else if (state === id.SEM_POST) {
          /* validate RNM rule names and set opcode rule index */
          let nameObj;
          data.rules.forEach((rule) => {
            rule.isBkr = false;
            rule.opcodes.forEach((op) => {
              if (op.type === id.RNM) {
                nameObj = data.ruleNames.get(op.index.name);
                if (nameObj === -1) {
                  data.errors.push({
                    line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),
                    char: op.index.phraseIndex,
                    msg: `Rule name '${op.index.name}' used but not defined.`,
                  });
                  op.index = -1;
                } else {
                  op.index = nameObj.index;
                }
              }
            });
          });
          /* validate BKR rule names and set opcode rule index */
          data.udts.forEach((udt) => {
            udt.isBkr = false;
          });
          data.rules.forEach((rule) => {
            rule.opcodes.forEach((op) => {
              if (op.type === id.BKR) {
                rule.hasBkr = true;
                nameObj = data.ruleNames.get(op.index.name);
                if (nameObj !== -1) {
                  data.rules[nameObj.index].isBkr = true;
                  op.index = nameObj.index;
                } else {
                  nameObj = data.udtNames.get(op.index.name);
                  if (nameObj !== -1) {
                    data.udts[nameObj.index].isBkr = true;
                    op.index = data.rules.length + nameObj.index;
                  } else {
                    data.errors.push({
                      line: data.findLine(data.lines, op.index.phraseIndex, data.charsLength),
                      char: op.index.phraseIndex,
                      msg: `Back reference name '${op.index.name}' refers to undefined rule or unamed UDT.`,
                    });
                    op.index = -1;
                  }
                }
              }
            });
          });
        }
        return ret;
      }
      function semRule(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.altStack.length = 0;
          data.topStack = null;
          data.rulesLineMap.push({
            line: data.findLine(data.lines, phraseIndex, data.charsLength),
            char: phraseIndex,
          });
        }
        return ret;
      }
      function semRuleLookup(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleName = '';
          data.definedas = '';
        } else if (state === id.SEM_POST) {
          let ruleName;
          if (data.definedas === '=') {
            ruleName = data.ruleNames.add(data.ruleName);
            if (ruleName === -1) {
              data.definedas = null;
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Rule name '${data.ruleName}' previously defined.`,
              });
            } else {
              /* start a new rule */
              data.topRule = {
                name: ruleName.name,
                lower: ruleName.lower,
                opcodes: [],
                index: ruleName.index,
              };
              data.rules.push(data.topRule);
              data.opcodes = data.topRule.opcodes;
            }
          } else {
            ruleName = data.ruleNames.get(data.ruleName);
            if (ruleName === -1) {
              data.definedas = null;
              data.errors.push({
                line: data.findLine(data.lines, phraseIndex, data.charsLength),
                char: phraseIndex,
                msg: `Rule name '${data.ruleName}' for incremental alternate not previously defined.`,
              });
            } else {
              data.topRule = data.rules[ruleName.index];
              data.opcodes = data.topRule.opcodes;
            }
          }
        }
        return ret;
      }
      function semAlternation(state, chars, phraseIndex, phraseCount, data) {
        let ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          const TRUE = true;
          while (TRUE) {
            if (data.definedas === null) {
              /* rule error - skip opcode generation */
              ret = id.SEM_SKIP;
              break;
            }
            if (data.topStack === null) {
              /* top-level ALT */
              if (data.definedas === '=') {
                /* "=" new rule */
                data.topStack = {
                  alt: {
                    type: id.ALT,
                    children: [],
                  },
                  cat: null,
                };
                data.altStack.push(data.topStack);
                data.opcodes.push(data.topStack.alt);
                break;
              }
              /* "=/" incremental alternate */
              data.topStack = {
                alt: data.opcodes[0],
                cat: null,
              };
              data.altStack.push(data.topStack);
              break;
            }
            /* lower-level ALT */
            data.topStack = {
              alt: {
                type: id.ALT,
                children: [],
              },
              cat: null,
            };
            data.altStack.push(data.topStack);
            data.opcodes.push(data.topStack.alt);
            break;
          }
        } else if (state === id.SEM_POST) {
          data.altStack.pop();
          if (data.altStack.length > 0) {
            data.topStack = data.altStack[data.altStack.length - 1];
          } else {
            data.topStack = null;
          }
        }
        return ret;
      }
      function semConcatenation(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.topStack.alt.children.push(data.opcodes.length);
          data.topStack.cat = {
            type: id.CAT,
            children: [],
          };
          data.opcodes.push(data.topStack.cat);
        } else if (state === id.SEM_POST) {
          data.topStack.cat = null;
        }
        return ret;
      }
      function semRepetition(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.topStack.cat.children.push(data.opcodes.length);
        }
        return ret;
      }
      function semOptionOpen(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.REP,
            min: 0,
            max: 1,
            char: phraseIndex,
          });
        }
        return ret;
      }
      function semRuleName(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ruleName = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDefined(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.definedas = '=';
        }
        return ret;
      }
      function semIncAlt(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.definedas = '=/';
        }
        return ret;
      }
      function semRepOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.min = 0;
          data.max = Infinity;
          data.topRep = {
            type: id.REP,
            min: 0,
            max: Infinity,
          };
          data.opcodes.push(data.topRep);
        } else if (state === id.SEM_POST) {
          if (data.min > data.max) {
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: `repetition min cannot be greater than max: min: ${data.min}: max: ${data.max}`,
            });
          }
          data.topRep.min = data.min;
          data.topRep.max = data.max;
        }
        return ret;
      }
      function semRepMin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semRepMax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semRepMinMax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
          data.min = data.max;
        }
        return ret;
      }
      function semAndOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.AND,
          });
        }
        return ret;
      }
      function semNotOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.NOT,
          });
        }
        return ret;
      }
      function semRnmOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.RNM,
            /* NOTE: this is temporary info, index will be replaced with integer later. */
            /* Probably not the best coding practice but here you go. */
            index: {
              phraseIndex,
              name: apglib.utils.charsToString(chars, phraseIndex, phraseCount),
            },
          });
        }
        return ret;
      }
      function semAbgOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.ABG,
          });
        }
        return ret;
      }
      function semAenOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.AEN,
          });
        }
        return ret;
      }
      function semBkaOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKA,
          });
        }
        return ret;
      }
      function semBknOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKN,
          });
        }
        return ret;
      }
      function semBkrOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.ci = true; /* default to case insensitive */
          data.cs = false;
          data.um = true;
          data.pm = false;
        } else if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.BKR,
            bkrCase: data.cs === true ? id.BKR_MODE_CS : id.BKR_MODE_CI,
            bkrMode: data.pm === true ? id.BKR_MODE_PM : id.BKR_MODE_UM,
            /* NOTE: this is temporary info, index will be replaced with integer later. */
            /* Probably not the best coding practice but here you go. */
            index: {
              phraseIndex: data.bkrname.phraseIndex,
              name: apglib.utils.charsToString(chars, data.bkrname.phraseIndex, data.bkrname.phraseLength),
            },
          });
        }
        return ret;
      }
      function semBkrCi(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.ci = true;
        }
        return ret;
      }
      function semBkrCs(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.cs = true;
        }
        return ret;
      }
      function semBkrUm(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.um = true;
        }
        return ret;
      }
      function semBkrPm(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.pm = true;
        }
        return ret;
      }
      function semBkrName(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.bkrname = {
            phraseIndex,
            phraseLength: phraseCount,
          };
        }
        return ret;
      }
      function semUdtEmpty(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
          let udtName = data.udtNames.add(name);
          if (udtName === -1) {
            udtName = data.udtNames.get(name);
            if (udtName === -1) {
              throw new Error('semUdtEmpty: name look up error');
            }
          } else {
            data.udts.push({
              name: udtName.name,
              lower: udtName.lower,
              index: udtName.index,
              empty: true,
            });
          }
          data.opcodes.push({
            type: id.UDT,
            empty: true,
            index: udtName.index,
          });
        }
        return ret;
      }
      function semUdtNonEmpty(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          const name = apglib.utils.charsToString(chars, phraseIndex, phraseCount);
          let udtName = data.udtNames.add(name);
          if (udtName === -1) {
            udtName = data.udtNames.get(name);
            if (udtName === -1) {
              throw new Error('semUdtNonEmpty: name look up error');
            }
          } else {
            data.udts.push({
              name: udtName.name,
              lower: udtName.lower,
              index: udtName.index,
              empty: false,
            });
          }
          data.opcodes.push({
            type: id.UDT,
            empty: false,
            index: udtName.index,
            syntax: null,
            semantic: null,
          });
        }
        return ret;
      }
      function semTlsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.tlscase = true; /* default to case insensitive */
        }
        return ret;
      }
      function semTlsCase(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (phraseCount > 0 && (chars[phraseIndex + 1] === 83 || chars[phraseIndex + 1] === 115)) {
            data.tlscase = false; /* set to case sensitive */
          }
        }
        return ret;
      }
      function semTlsString(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (data.tlscase) {
            const str = chars.slice(phraseIndex, phraseIndex + phraseCount);
            for (let i = 0; i < str.length; i += 1) {
              if (str[i] >= 65 && str[i] <= 90) {
                str[i] += 32;
              }
            }
            data.opcodes.push({
              type: id.TLS,
              string: str,
            });
          } else {
            data.opcodes.push({
              type: id.TBS,
              string: chars.slice(phraseIndex, phraseIndex + phraseCount),
            });
          }
        }
        return ret;
      }
      function semClsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          if (phraseCount <= 2) {
            /* only TLS is allowed to be empty */
            data.opcodes.push({
              type: id.TLS,
              string: [],
            });
          } else {
            data.opcodes.push({
              type: id.TBS,
              string: chars.slice(phraseIndex + 1, phraseIndex + phraseCount - 1),
            });
          }
        }
        return ret;
      }
      function semTbsOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.tbsstr = [];
        } else if (state === id.SEM_POST) {
          data.opcodes.push({
            type: id.TBS,
            string: data.tbsstr,
          });
        }
        return ret;
      }
      function semTrgOp(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_PRE) {
          data.min = 0;
          data.max = 0;
        } else if (state === id.SEM_POST) {
          if (data.min > data.max) {
            data.errors.push({
              line: data.findLine(data.lines, phraseIndex, data.charsLength),
              char: phraseIndex,
              msg: `TRG, (%dmin-max), min cannot be greater than max: min: ${data.min}: max: ${data.max}`,
            });
          }
          data.opcodes.push({
            type: id.TRG,
            min: data.min,
            max: data.max,
          });
        }
        return ret;
      }
      function semDmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = decnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semBmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = binnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semBmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = binnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semXmin(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.min = hexnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semXmax(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.max = hexnum(chars, phraseIndex, phraseCount);
        }
        return ret;
      }
      function semDstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(decnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      function semBstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(binnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      function semXstring(state, chars, phraseIndex, phraseCount, data) {
        const ret = id.SEM_OK;
        if (state === id.SEM_POST) {
          data.tbsstr.push(hexnum(chars, phraseIndex, phraseCount));
        }
        return ret;
      }
      // Define the callback functions to the AST object.
      this.callbacks = [];
      this.callbacks.abgop = semAbgOp;
      this.callbacks.aenop = semAenOp;
      this.callbacks.alternation = semAlternation;
      this.callbacks.andop = semAndOp;
      this.callbacks.bmax = semBmax;
      this.callbacks.bmin = semBmin;
      this.callbacks.bkaop = semBkaOp;
      this.callbacks.bknop = semBknOp;
      this.callbacks.bkrop = semBkrOp;
      this.callbacks['bkr-name'] = semBkrName;
      this.callbacks.bstring = semBstring;
      this.callbacks.clsop = semClsOp;
      this.callbacks.ci = semBkrCi;
      this.callbacks.cs = semBkrCs;
      this.callbacks.um = semBkrUm;
      this.callbacks.pm = semBkrPm;
      this.callbacks.concatenation = semConcatenation;
      this.callbacks.defined = semDefined;
      this.callbacks.dmax = semDmax;
      this.callbacks.dmin = semDmin;
      this.callbacks.dstring = semDstring;
      this.callbacks.file = semFile;
      this.callbacks.incalt = semIncAlt;
      this.callbacks.notop = semNotOp;
      this.callbacks.optionopen = semOptionOpen;
      this.callbacks['rep-max'] = semRepMax;
      this.callbacks['rep-min'] = semRepMin;
      this.callbacks['rep-min-max'] = semRepMinMax;
      this.callbacks.repetition = semRepetition;
      this.callbacks.repop = semRepOp;
      this.callbacks.rnmop = semRnmOp;
      this.callbacks.rule = semRule;
      this.callbacks.rulelookup = semRuleLookup;
      this.callbacks.rulename = semRuleName;
      this.callbacks.tbsop = semTbsOp;
      this.callbacks.tlscase = semTlsCase;
      this.callbacks.tlsstring = semTlsString;
      this.callbacks.tlsop = semTlsOp;
      this.callbacks.trgop = semTrgOp;
      this.callbacks['udt-empty'] = semUdtEmpty;
      this.callbacks['udt-non-empty'] = semUdtNonEmpty;
      this.callbacks.xmax = semXmax;
      this.callbacks.xmin = semXmin;
      this.callbacks.xstring = semXstring;
    };

    // copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved<br>
    //   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>
    //
    // Generated by apg-js, Version 4.0.0 [apg-js](https://github.com/ldthomas/apg-js)
    var sabnfGrammar = function grammar(){
      // ```
      // SUMMARY
      //      rules = 95
      //       udts = 0
      //    opcodes = 372
      //        ---   ABNF original opcodes
      //        ALT = 43
      //        CAT = 48
      //        REP = 34
      //        RNM = 149
      //        TLS = 2
      //        TBS = 61
      //        TRG = 35
      //        ---   SABNF superset opcodes
      //        UDT = 0
      //        AND = 0
      //        NOT = 0
      //        BKA = 0
      //        BKN = 0
      //        BKR = 0
      //        ABG = 0
      //        AEN = 0
      // characters = [9 - 126]
      // ```
      /* OBJECT IDENTIFIER (for internal parser use) */
      this.grammarObject = 'grammarObject';

      /* RULES */
      this.rules = [];
      this.rules[0] = {name: 'File', lower: 'file', index: 0, isBkr: false};
      this.rules[1] = {name: 'BlankLine', lower: 'blankline', index: 1, isBkr: false};
      this.rules[2] = {name: 'Rule', lower: 'rule', index: 2, isBkr: false};
      this.rules[3] = {name: 'RuleLookup', lower: 'rulelookup', index: 3, isBkr: false};
      this.rules[4] = {name: 'RuleNameTest', lower: 'rulenametest', index: 4, isBkr: false};
      this.rules[5] = {name: 'RuleName', lower: 'rulename', index: 5, isBkr: false};
      this.rules[6] = {name: 'RuleNameError', lower: 'rulenameerror', index: 6, isBkr: false};
      this.rules[7] = {name: 'DefinedAsTest', lower: 'definedastest', index: 7, isBkr: false};
      this.rules[8] = {name: 'DefinedAsError', lower: 'definedaserror', index: 8, isBkr: false};
      this.rules[9] = {name: 'DefinedAs', lower: 'definedas', index: 9, isBkr: false};
      this.rules[10] = {name: 'Defined', lower: 'defined', index: 10, isBkr: false};
      this.rules[11] = {name: 'IncAlt', lower: 'incalt', index: 11, isBkr: false};
      this.rules[12] = {name: 'RuleError', lower: 'ruleerror', index: 12, isBkr: false};
      this.rules[13] = {name: 'LineEndError', lower: 'lineenderror', index: 13, isBkr: false};
      this.rules[14] = {name: 'Alternation', lower: 'alternation', index: 14, isBkr: false};
      this.rules[15] = {name: 'Concatenation', lower: 'concatenation', index: 15, isBkr: false};
      this.rules[16] = {name: 'Repetition', lower: 'repetition', index: 16, isBkr: false};
      this.rules[17] = {name: 'Modifier', lower: 'modifier', index: 17, isBkr: false};
      this.rules[18] = {name: 'Predicate', lower: 'predicate', index: 18, isBkr: false};
      this.rules[19] = {name: 'BasicElement', lower: 'basicelement', index: 19, isBkr: false};
      this.rules[20] = {name: 'BasicElementErr', lower: 'basicelementerr', index: 20, isBkr: false};
      this.rules[21] = {name: 'Group', lower: 'group', index: 21, isBkr: false};
      this.rules[22] = {name: 'GroupError', lower: 'grouperror', index: 22, isBkr: false};
      this.rules[23] = {name: 'GroupOpen', lower: 'groupopen', index: 23, isBkr: false};
      this.rules[24] = {name: 'GroupClose', lower: 'groupclose', index: 24, isBkr: false};
      this.rules[25] = {name: 'Option', lower: 'option', index: 25, isBkr: false};
      this.rules[26] = {name: 'OptionError', lower: 'optionerror', index: 26, isBkr: false};
      this.rules[27] = {name: 'OptionOpen', lower: 'optionopen', index: 27, isBkr: false};
      this.rules[28] = {name: 'OptionClose', lower: 'optionclose', index: 28, isBkr: false};
      this.rules[29] = {name: 'RnmOp', lower: 'rnmop', index: 29, isBkr: false};
      this.rules[30] = {name: 'BkrOp', lower: 'bkrop', index: 30, isBkr: false};
      this.rules[31] = {name: 'bkrModifier', lower: 'bkrmodifier', index: 31, isBkr: false};
      this.rules[32] = {name: 'cs', lower: 'cs', index: 32, isBkr: false};
      this.rules[33] = {name: 'ci', lower: 'ci', index: 33, isBkr: false};
      this.rules[34] = {name: 'um', lower: 'um', index: 34, isBkr: false};
      this.rules[35] = {name: 'pm', lower: 'pm', index: 35, isBkr: false};
      this.rules[36] = {name: 'bkr-name', lower: 'bkr-name', index: 36, isBkr: false};
      this.rules[37] = {name: 'rname', lower: 'rname', index: 37, isBkr: false};
      this.rules[38] = {name: 'uname', lower: 'uname', index: 38, isBkr: false};
      this.rules[39] = {name: 'ename', lower: 'ename', index: 39, isBkr: false};
      this.rules[40] = {name: 'UdtOp', lower: 'udtop', index: 40, isBkr: false};
      this.rules[41] = {name: 'udt-non-empty', lower: 'udt-non-empty', index: 41, isBkr: false};
      this.rules[42] = {name: 'udt-empty', lower: 'udt-empty', index: 42, isBkr: false};
      this.rules[43] = {name: 'RepOp', lower: 'repop', index: 43, isBkr: false};
      this.rules[44] = {name: 'AltOp', lower: 'altop', index: 44, isBkr: false};
      this.rules[45] = {name: 'CatOp', lower: 'catop', index: 45, isBkr: false};
      this.rules[46] = {name: 'StarOp', lower: 'starop', index: 46, isBkr: false};
      this.rules[47] = {name: 'AndOp', lower: 'andop', index: 47, isBkr: false};
      this.rules[48] = {name: 'NotOp', lower: 'notop', index: 48, isBkr: false};
      this.rules[49] = {name: 'BkaOp', lower: 'bkaop', index: 49, isBkr: false};
      this.rules[50] = {name: 'BknOp', lower: 'bknop', index: 50, isBkr: false};
      this.rules[51] = {name: 'AbgOp', lower: 'abgop', index: 51, isBkr: false};
      this.rules[52] = {name: 'AenOp', lower: 'aenop', index: 52, isBkr: false};
      this.rules[53] = {name: 'TrgOp', lower: 'trgop', index: 53, isBkr: false};
      this.rules[54] = {name: 'TbsOp', lower: 'tbsop', index: 54, isBkr: false};
      this.rules[55] = {name: 'TlsOp', lower: 'tlsop', index: 55, isBkr: false};
      this.rules[56] = {name: 'TlsCase', lower: 'tlscase', index: 56, isBkr: false};
      this.rules[57] = {name: 'TlsOpen', lower: 'tlsopen', index: 57, isBkr: false};
      this.rules[58] = {name: 'TlsClose', lower: 'tlsclose', index: 58, isBkr: false};
      this.rules[59] = {name: 'TlsString', lower: 'tlsstring', index: 59, isBkr: false};
      this.rules[60] = {name: 'StringTab', lower: 'stringtab', index: 60, isBkr: false};
      this.rules[61] = {name: 'ClsOp', lower: 'clsop', index: 61, isBkr: false};
      this.rules[62] = {name: 'ClsOpen', lower: 'clsopen', index: 62, isBkr: false};
      this.rules[63] = {name: 'ClsClose', lower: 'clsclose', index: 63, isBkr: false};
      this.rules[64] = {name: 'ClsString', lower: 'clsstring', index: 64, isBkr: false};
      this.rules[65] = {name: 'ProsVal', lower: 'prosval', index: 65, isBkr: false};
      this.rules[66] = {name: 'ProsValOpen', lower: 'prosvalopen', index: 66, isBkr: false};
      this.rules[67] = {name: 'ProsValString', lower: 'prosvalstring', index: 67, isBkr: false};
      this.rules[68] = {name: 'ProsValClose', lower: 'prosvalclose', index: 68, isBkr: false};
      this.rules[69] = {name: 'rep-min', lower: 'rep-min', index: 69, isBkr: false};
      this.rules[70] = {name: 'rep-min-max', lower: 'rep-min-max', index: 70, isBkr: false};
      this.rules[71] = {name: 'rep-max', lower: 'rep-max', index: 71, isBkr: false};
      this.rules[72] = {name: 'rep-num', lower: 'rep-num', index: 72, isBkr: false};
      this.rules[73] = {name: 'dString', lower: 'dstring', index: 73, isBkr: false};
      this.rules[74] = {name: 'xString', lower: 'xstring', index: 74, isBkr: false};
      this.rules[75] = {name: 'bString', lower: 'bstring', index: 75, isBkr: false};
      this.rules[76] = {name: 'Dec', lower: 'dec', index: 76, isBkr: false};
      this.rules[77] = {name: 'Hex', lower: 'hex', index: 77, isBkr: false};
      this.rules[78] = {name: 'Bin', lower: 'bin', index: 78, isBkr: false};
      this.rules[79] = {name: 'dmin', lower: 'dmin', index: 79, isBkr: false};
      this.rules[80] = {name: 'dmax', lower: 'dmax', index: 80, isBkr: false};
      this.rules[81] = {name: 'bmin', lower: 'bmin', index: 81, isBkr: false};
      this.rules[82] = {name: 'bmax', lower: 'bmax', index: 82, isBkr: false};
      this.rules[83] = {name: 'xmin', lower: 'xmin', index: 83, isBkr: false};
      this.rules[84] = {name: 'xmax', lower: 'xmax', index: 84, isBkr: false};
      this.rules[85] = {name: 'dnum', lower: 'dnum', index: 85, isBkr: false};
      this.rules[86] = {name: 'bnum', lower: 'bnum', index: 86, isBkr: false};
      this.rules[87] = {name: 'xnum', lower: 'xnum', index: 87, isBkr: false};
      this.rules[88] = {name: 'alphanum', lower: 'alphanum', index: 88, isBkr: false};
      this.rules[89] = {name: 'owsp', lower: 'owsp', index: 89, isBkr: false};
      this.rules[90] = {name: 'wsp', lower: 'wsp', index: 90, isBkr: false};
      this.rules[91] = {name: 'space', lower: 'space', index: 91, isBkr: false};
      this.rules[92] = {name: 'comment', lower: 'comment', index: 92, isBkr: false};
      this.rules[93] = {name: 'LineEnd', lower: 'lineend', index: 93, isBkr: false};
      this.rules[94] = {name: 'LineContinue', lower: 'linecontinue', index: 94, isBkr: false};

      /* UDTS */
      this.udts = [];

      /* OPCODES */
      /* File */
      this.rules[0].opcodes = [];
      this.rules[0].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[0].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[0].opcodes[2] = {type: 4, index: 1};// RNM(BlankLine)
      this.rules[0].opcodes[3] = {type: 4, index: 2};// RNM(Rule)
      this.rules[0].opcodes[4] = {type: 4, index: 12};// RNM(RuleError)

      /* BlankLine */
      this.rules[1].opcodes = [];
      this.rules[1].opcodes[0] = {type: 2, children: [1,5,7]};// CAT
      this.rules[1].opcodes[1] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[1].opcodes[2] = {type: 1, children: [3,4]};// ALT
      this.rules[1].opcodes[3] = {type: 6, string: [32]};// TBS
      this.rules[1].opcodes[4] = {type: 6, string: [9]};// TBS
      this.rules[1].opcodes[5] = {type: 3, min: 0, max: 1};// REP
      this.rules[1].opcodes[6] = {type: 4, index: 92};// RNM(comment)
      this.rules[1].opcodes[7] = {type: 4, index: 93};// RNM(LineEnd)

      /* Rule */
      this.rules[2].opcodes = [];
      this.rules[2].opcodes[0] = {type: 2, children: [1,2,3,4]};// CAT
      this.rules[2].opcodes[1] = {type: 4, index: 3};// RNM(RuleLookup)
      this.rules[2].opcodes[2] = {type: 4, index: 89};// RNM(owsp)
      this.rules[2].opcodes[3] = {type: 4, index: 14};// RNM(Alternation)
      this.rules[2].opcodes[4] = {type: 1, children: [5,8]};// ALT
      this.rules[2].opcodes[5] = {type: 2, children: [6,7]};// CAT
      this.rules[2].opcodes[6] = {type: 4, index: 89};// RNM(owsp)
      this.rules[2].opcodes[7] = {type: 4, index: 93};// RNM(LineEnd)
      this.rules[2].opcodes[8] = {type: 2, children: [9,10]};// CAT
      this.rules[2].opcodes[9] = {type: 4, index: 13};// RNM(LineEndError)
      this.rules[2].opcodes[10] = {type: 4, index: 93};// RNM(LineEnd)

      /* RuleLookup */
      this.rules[3].opcodes = [];
      this.rules[3].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
      this.rules[3].opcodes[1] = {type: 4, index: 4};// RNM(RuleNameTest)
      this.rules[3].opcodes[2] = {type: 4, index: 89};// RNM(owsp)
      this.rules[3].opcodes[3] = {type: 4, index: 7};// RNM(DefinedAsTest)

      /* RuleNameTest */
      this.rules[4].opcodes = [];
      this.rules[4].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[4].opcodes[1] = {type: 4, index: 5};// RNM(RuleName)
      this.rules[4].opcodes[2] = {type: 4, index: 6};// RNM(RuleNameError)

      /* RuleName */
      this.rules[5].opcodes = [];
      this.rules[5].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)

      /* RuleNameError */
      this.rules[6].opcodes = [];
      this.rules[6].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[6].opcodes[1] = {type: 1, children: [2,3]};// ALT
      this.rules[6].opcodes[2] = {type: 5, min: 33, max: 60};// TRG
      this.rules[6].opcodes[3] = {type: 5, min: 62, max: 126};// TRG

      /* DefinedAsTest */
      this.rules[7].opcodes = [];
      this.rules[7].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[7].opcodes[1] = {type: 4, index: 9};// RNM(DefinedAs)
      this.rules[7].opcodes[2] = {type: 4, index: 8};// RNM(DefinedAsError)

      /* DefinedAsError */
      this.rules[8].opcodes = [];
      this.rules[8].opcodes[0] = {type: 3, min: 1, max: 2};// REP
      this.rules[8].opcodes[1] = {type: 5, min: 33, max: 126};// TRG

      /* DefinedAs */
      this.rules[9].opcodes = [];
      this.rules[9].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[9].opcodes[1] = {type: 4, index: 11};// RNM(IncAlt)
      this.rules[9].opcodes[2] = {type: 4, index: 10};// RNM(Defined)

      /* Defined */
      this.rules[10].opcodes = [];
      this.rules[10].opcodes[0] = {type: 6, string: [61]};// TBS

      /* IncAlt */
      this.rules[11].opcodes = [];
      this.rules[11].opcodes[0] = {type: 6, string: [61,47]};// TBS

      /* RuleError */
      this.rules[12].opcodes = [];
      this.rules[12].opcodes[0] = {type: 2, children: [1,6]};// CAT
      this.rules[12].opcodes[1] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[12].opcodes[2] = {type: 1, children: [3,4,5]};// ALT
      this.rules[12].opcodes[3] = {type: 5, min: 32, max: 126};// TRG
      this.rules[12].opcodes[4] = {type: 6, string: [9]};// TBS
      this.rules[12].opcodes[5] = {type: 4, index: 94};// RNM(LineContinue)
      this.rules[12].opcodes[6] = {type: 4, index: 93};// RNM(LineEnd)

      /* LineEndError */
      this.rules[13].opcodes = [];
      this.rules[13].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[13].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[13].opcodes[2] = {type: 5, min: 32, max: 126};// TRG
      this.rules[13].opcodes[3] = {type: 6, string: [9]};// TBS
      this.rules[13].opcodes[4] = {type: 4, index: 94};// RNM(LineContinue)

      /* Alternation */
      this.rules[14].opcodes = [];
      this.rules[14].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[14].opcodes[1] = {type: 4, index: 15};// RNM(Concatenation)
      this.rules[14].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[14].opcodes[3] = {type: 2, children: [4,5,6]};// CAT
      this.rules[14].opcodes[4] = {type: 4, index: 89};// RNM(owsp)
      this.rules[14].opcodes[5] = {type: 4, index: 44};// RNM(AltOp)
      this.rules[14].opcodes[6] = {type: 4, index: 15};// RNM(Concatenation)

      /* Concatenation */
      this.rules[15].opcodes = [];
      this.rules[15].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[15].opcodes[1] = {type: 4, index: 16};// RNM(Repetition)
      this.rules[15].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[15].opcodes[3] = {type: 2, children: [4,5]};// CAT
      this.rules[15].opcodes[4] = {type: 4, index: 45};// RNM(CatOp)
      this.rules[15].opcodes[5] = {type: 4, index: 16};// RNM(Repetition)

      /* Repetition */
      this.rules[16].opcodes = [];
      this.rules[16].opcodes[0] = {type: 2, children: [1,3]};// CAT
      this.rules[16].opcodes[1] = {type: 3, min: 0, max: 1};// REP
      this.rules[16].opcodes[2] = {type: 4, index: 17};// RNM(Modifier)
      this.rules[16].opcodes[3] = {type: 1, children: [4,5,6,7]};// ALT
      this.rules[16].opcodes[4] = {type: 4, index: 21};// RNM(Group)
      this.rules[16].opcodes[5] = {type: 4, index: 25};// RNM(Option)
      this.rules[16].opcodes[6] = {type: 4, index: 19};// RNM(BasicElement)
      this.rules[16].opcodes[7] = {type: 4, index: 20};// RNM(BasicElementErr)

      /* Modifier */
      this.rules[17].opcodes = [];
      this.rules[17].opcodes[0] = {type: 1, children: [1,5]};// ALT
      this.rules[17].opcodes[1] = {type: 2, children: [2,3]};// CAT
      this.rules[17].opcodes[2] = {type: 4, index: 18};// RNM(Predicate)
      this.rules[17].opcodes[3] = {type: 3, min: 0, max: 1};// REP
      this.rules[17].opcodes[4] = {type: 4, index: 43};// RNM(RepOp)
      this.rules[17].opcodes[5] = {type: 4, index: 43};// RNM(RepOp)

      /* Predicate */
      this.rules[18].opcodes = [];
      this.rules[18].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT
      this.rules[18].opcodes[1] = {type: 4, index: 49};// RNM(BkaOp)
      this.rules[18].opcodes[2] = {type: 4, index: 50};// RNM(BknOp)
      this.rules[18].opcodes[3] = {type: 4, index: 47};// RNM(AndOp)
      this.rules[18].opcodes[4] = {type: 4, index: 48};// RNM(NotOp)

      /* BasicElement */
      this.rules[19].opcodes = [];
      this.rules[19].opcodes[0] = {type: 1, children: [1,2,3,4,5,6,7,8,9,10]};// ALT
      this.rules[19].opcodes[1] = {type: 4, index: 40};// RNM(UdtOp)
      this.rules[19].opcodes[2] = {type: 4, index: 29};// RNM(RnmOp)
      this.rules[19].opcodes[3] = {type: 4, index: 53};// RNM(TrgOp)
      this.rules[19].opcodes[4] = {type: 4, index: 54};// RNM(TbsOp)
      this.rules[19].opcodes[5] = {type: 4, index: 55};// RNM(TlsOp)
      this.rules[19].opcodes[6] = {type: 4, index: 61};// RNM(ClsOp)
      this.rules[19].opcodes[7] = {type: 4, index: 30};// RNM(BkrOp)
      this.rules[19].opcodes[8] = {type: 4, index: 51};// RNM(AbgOp)
      this.rules[19].opcodes[9] = {type: 4, index: 52};// RNM(AenOp)
      this.rules[19].opcodes[10] = {type: 4, index: 65};// RNM(ProsVal)

      /* BasicElementErr */
      this.rules[20].opcodes = [];
      this.rules[20].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[20].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT
      this.rules[20].opcodes[2] = {type: 5, min: 33, max: 40};// TRG
      this.rules[20].opcodes[3] = {type: 5, min: 42, max: 46};// TRG
      this.rules[20].opcodes[4] = {type: 5, min: 48, max: 92};// TRG
      this.rules[20].opcodes[5] = {type: 5, min: 94, max: 126};// TRG

      /* Group */
      this.rules[21].opcodes = [];
      this.rules[21].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
      this.rules[21].opcodes[1] = {type: 4, index: 23};// RNM(GroupOpen)
      this.rules[21].opcodes[2] = {type: 4, index: 14};// RNM(Alternation)
      this.rules[21].opcodes[3] = {type: 1, children: [4,5]};// ALT
      this.rules[21].opcodes[4] = {type: 4, index: 24};// RNM(GroupClose)
      this.rules[21].opcodes[5] = {type: 4, index: 22};// RNM(GroupError)

      /* GroupError */
      this.rules[22].opcodes = [];
      this.rules[22].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[22].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT
      this.rules[22].opcodes[2] = {type: 5, min: 33, max: 40};// TRG
      this.rules[22].opcodes[3] = {type: 5, min: 42, max: 46};// TRG
      this.rules[22].opcodes[4] = {type: 5, min: 48, max: 92};// TRG
      this.rules[22].opcodes[5] = {type: 5, min: 94, max: 126};// TRG

      /* GroupOpen */
      this.rules[23].opcodes = [];
      this.rules[23].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[23].opcodes[1] = {type: 6, string: [40]};// TBS
      this.rules[23].opcodes[2] = {type: 4, index: 89};// RNM(owsp)

      /* GroupClose */
      this.rules[24].opcodes = [];
      this.rules[24].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[24].opcodes[1] = {type: 4, index: 89};// RNM(owsp)
      this.rules[24].opcodes[2] = {type: 6, string: [41]};// TBS

      /* Option */
      this.rules[25].opcodes = [];
      this.rules[25].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
      this.rules[25].opcodes[1] = {type: 4, index: 27};// RNM(OptionOpen)
      this.rules[25].opcodes[2] = {type: 4, index: 14};// RNM(Alternation)
      this.rules[25].opcodes[3] = {type: 1, children: [4,5]};// ALT
      this.rules[25].opcodes[4] = {type: 4, index: 28};// RNM(OptionClose)
      this.rules[25].opcodes[5] = {type: 4, index: 26};// RNM(OptionError)

      /* OptionError */
      this.rules[26].opcodes = [];
      this.rules[26].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[26].opcodes[1] = {type: 1, children: [2,3,4,5]};// ALT
      this.rules[26].opcodes[2] = {type: 5, min: 33, max: 40};// TRG
      this.rules[26].opcodes[3] = {type: 5, min: 42, max: 46};// TRG
      this.rules[26].opcodes[4] = {type: 5, min: 48, max: 92};// TRG
      this.rules[26].opcodes[5] = {type: 5, min: 94, max: 126};// TRG

      /* OptionOpen */
      this.rules[27].opcodes = [];
      this.rules[27].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[27].opcodes[1] = {type: 6, string: [91]};// TBS
      this.rules[27].opcodes[2] = {type: 4, index: 89};// RNM(owsp)

      /* OptionClose */
      this.rules[28].opcodes = [];
      this.rules[28].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[28].opcodes[1] = {type: 4, index: 89};// RNM(owsp)
      this.rules[28].opcodes[2] = {type: 6, string: [93]};// TBS

      /* RnmOp */
      this.rules[29].opcodes = [];
      this.rules[29].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)

      /* BkrOp */
      this.rules[30].opcodes = [];
      this.rules[30].opcodes[0] = {type: 2, children: [1,2,4]};// CAT
      this.rules[30].opcodes[1] = {type: 6, string: [92]};// TBS
      this.rules[30].opcodes[2] = {type: 3, min: 0, max: 1};// REP
      this.rules[30].opcodes[3] = {type: 4, index: 31};// RNM(bkrModifier)
      this.rules[30].opcodes[4] = {type: 4, index: 36};// RNM(bkr-name)

      /* bkrModifier */
      this.rules[31].opcodes = [];
      this.rules[31].opcodes[0] = {type: 1, children: [1,7,13,19]};// ALT
      this.rules[31].opcodes[1] = {type: 2, children: [2,3]};// CAT
      this.rules[31].opcodes[2] = {type: 4, index: 32};// RNM(cs)
      this.rules[31].opcodes[3] = {type: 3, min: 0, max: 1};// REP
      this.rules[31].opcodes[4] = {type: 1, children: [5,6]};// ALT
      this.rules[31].opcodes[5] = {type: 4, index: 34};// RNM(um)
      this.rules[31].opcodes[6] = {type: 4, index: 35};// RNM(pm)
      this.rules[31].opcodes[7] = {type: 2, children: [8,9]};// CAT
      this.rules[31].opcodes[8] = {type: 4, index: 33};// RNM(ci)
      this.rules[31].opcodes[9] = {type: 3, min: 0, max: 1};// REP
      this.rules[31].opcodes[10] = {type: 1, children: [11,12]};// ALT
      this.rules[31].opcodes[11] = {type: 4, index: 34};// RNM(um)
      this.rules[31].opcodes[12] = {type: 4, index: 35};// RNM(pm)
      this.rules[31].opcodes[13] = {type: 2, children: [14,15]};// CAT
      this.rules[31].opcodes[14] = {type: 4, index: 34};// RNM(um)
      this.rules[31].opcodes[15] = {type: 3, min: 0, max: 1};// REP
      this.rules[31].opcodes[16] = {type: 1, children: [17,18]};// ALT
      this.rules[31].opcodes[17] = {type: 4, index: 32};// RNM(cs)
      this.rules[31].opcodes[18] = {type: 4, index: 33};// RNM(ci)
      this.rules[31].opcodes[19] = {type: 2, children: [20,21]};// CAT
      this.rules[31].opcodes[20] = {type: 4, index: 35};// RNM(pm)
      this.rules[31].opcodes[21] = {type: 3, min: 0, max: 1};// REP
      this.rules[31].opcodes[22] = {type: 1, children: [23,24]};// ALT
      this.rules[31].opcodes[23] = {type: 4, index: 32};// RNM(cs)
      this.rules[31].opcodes[24] = {type: 4, index: 33};// RNM(ci)

      /* cs */
      this.rules[32].opcodes = [];
      this.rules[32].opcodes[0] = {type: 6, string: [37,115]};// TBS

      /* ci */
      this.rules[33].opcodes = [];
      this.rules[33].opcodes[0] = {type: 6, string: [37,105]};// TBS

      /* um */
      this.rules[34].opcodes = [];
      this.rules[34].opcodes[0] = {type: 6, string: [37,117]};// TBS

      /* pm */
      this.rules[35].opcodes = [];
      this.rules[35].opcodes[0] = {type: 6, string: [37,112]};// TBS

      /* bkr-name */
      this.rules[36].opcodes = [];
      this.rules[36].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
      this.rules[36].opcodes[1] = {type: 4, index: 38};// RNM(uname)
      this.rules[36].opcodes[2] = {type: 4, index: 39};// RNM(ename)
      this.rules[36].opcodes[3] = {type: 4, index: 37};// RNM(rname)

      /* rname */
      this.rules[37].opcodes = [];
      this.rules[37].opcodes[0] = {type: 4, index: 88};// RNM(alphanum)

      /* uname */
      this.rules[38].opcodes = [];
      this.rules[38].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[38].opcodes[1] = {type: 6, string: [117,95]};// TBS
      this.rules[38].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)

      /* ename */
      this.rules[39].opcodes = [];
      this.rules[39].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[39].opcodes[1] = {type: 6, string: [101,95]};// TBS
      this.rules[39].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)

      /* UdtOp */
      this.rules[40].opcodes = [];
      this.rules[40].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[40].opcodes[1] = {type: 4, index: 42};// RNM(udt-empty)
      this.rules[40].opcodes[2] = {type: 4, index: 41};// RNM(udt-non-empty)

      /* udt-non-empty */
      this.rules[41].opcodes = [];
      this.rules[41].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[41].opcodes[1] = {type: 6, string: [117,95]};// TBS
      this.rules[41].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)

      /* udt-empty */
      this.rules[42].opcodes = [];
      this.rules[42].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[42].opcodes[1] = {type: 6, string: [101,95]};// TBS
      this.rules[42].opcodes[2] = {type: 4, index: 88};// RNM(alphanum)

      /* RepOp */
      this.rules[43].opcodes = [];
      this.rules[43].opcodes[0] = {type: 1, children: [1,5,8,11,12]};// ALT
      this.rules[43].opcodes[1] = {type: 2, children: [2,3,4]};// CAT
      this.rules[43].opcodes[2] = {type: 4, index: 69};// RNM(rep-min)
      this.rules[43].opcodes[3] = {type: 4, index: 46};// RNM(StarOp)
      this.rules[43].opcodes[4] = {type: 4, index: 71};// RNM(rep-max)
      this.rules[43].opcodes[5] = {type: 2, children: [6,7]};// CAT
      this.rules[43].opcodes[6] = {type: 4, index: 69};// RNM(rep-min)
      this.rules[43].opcodes[7] = {type: 4, index: 46};// RNM(StarOp)
      this.rules[43].opcodes[8] = {type: 2, children: [9,10]};// CAT
      this.rules[43].opcodes[9] = {type: 4, index: 46};// RNM(StarOp)
      this.rules[43].opcodes[10] = {type: 4, index: 71};// RNM(rep-max)
      this.rules[43].opcodes[11] = {type: 4, index: 46};// RNM(StarOp)
      this.rules[43].opcodes[12] = {type: 4, index: 70};// RNM(rep-min-max)

      /* AltOp */
      this.rules[44].opcodes = [];
      this.rules[44].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[44].opcodes[1] = {type: 6, string: [47]};// TBS
      this.rules[44].opcodes[2] = {type: 4, index: 89};// RNM(owsp)

      /* CatOp */
      this.rules[45].opcodes = [];
      this.rules[45].opcodes[0] = {type: 4, index: 90};// RNM(wsp)

      /* StarOp */
      this.rules[46].opcodes = [];
      this.rules[46].opcodes[0] = {type: 6, string: [42]};// TBS

      /* AndOp */
      this.rules[47].opcodes = [];
      this.rules[47].opcodes[0] = {type: 6, string: [38]};// TBS

      /* NotOp */
      this.rules[48].opcodes = [];
      this.rules[48].opcodes[0] = {type: 6, string: [33]};// TBS

      /* BkaOp */
      this.rules[49].opcodes = [];
      this.rules[49].opcodes[0] = {type: 6, string: [38,38]};// TBS

      /* BknOp */
      this.rules[50].opcodes = [];
      this.rules[50].opcodes[0] = {type: 6, string: [33,33]};// TBS

      /* AbgOp */
      this.rules[51].opcodes = [];
      this.rules[51].opcodes[0] = {type: 6, string: [37,94]};// TBS

      /* AenOp */
      this.rules[52].opcodes = [];
      this.rules[52].opcodes[0] = {type: 6, string: [37,36]};// TBS

      /* TrgOp */
      this.rules[53].opcodes = [];
      this.rules[53].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[53].opcodes[1] = {type: 6, string: [37]};// TBS
      this.rules[53].opcodes[2] = {type: 1, children: [3,8,13]};// ALT
      this.rules[53].opcodes[3] = {type: 2, children: [4,5,6,7]};// CAT
      this.rules[53].opcodes[4] = {type: 4, index: 76};// RNM(Dec)
      this.rules[53].opcodes[5] = {type: 4, index: 79};// RNM(dmin)
      this.rules[53].opcodes[6] = {type: 6, string: [45]};// TBS
      this.rules[53].opcodes[7] = {type: 4, index: 80};// RNM(dmax)
      this.rules[53].opcodes[8] = {type: 2, children: [9,10,11,12]};// CAT
      this.rules[53].opcodes[9] = {type: 4, index: 77};// RNM(Hex)
      this.rules[53].opcodes[10] = {type: 4, index: 83};// RNM(xmin)
      this.rules[53].opcodes[11] = {type: 6, string: [45]};// TBS
      this.rules[53].opcodes[12] = {type: 4, index: 84};// RNM(xmax)
      this.rules[53].opcodes[13] = {type: 2, children: [14,15,16,17]};// CAT
      this.rules[53].opcodes[14] = {type: 4, index: 78};// RNM(Bin)
      this.rules[53].opcodes[15] = {type: 4, index: 81};// RNM(bmin)
      this.rules[53].opcodes[16] = {type: 6, string: [45]};// TBS
      this.rules[53].opcodes[17] = {type: 4, index: 82};// RNM(bmax)

      /* TbsOp */
      this.rules[54].opcodes = [];
      this.rules[54].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[54].opcodes[1] = {type: 6, string: [37]};// TBS
      this.rules[54].opcodes[2] = {type: 1, children: [3,10,17]};// ALT
      this.rules[54].opcodes[3] = {type: 2, children: [4,5,6]};// CAT
      this.rules[54].opcodes[4] = {type: 4, index: 76};// RNM(Dec)
      this.rules[54].opcodes[5] = {type: 4, index: 73};// RNM(dString)
      this.rules[54].opcodes[6] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[54].opcodes[7] = {type: 2, children: [8,9]};// CAT
      this.rules[54].opcodes[8] = {type: 6, string: [46]};// TBS
      this.rules[54].opcodes[9] = {type: 4, index: 73};// RNM(dString)
      this.rules[54].opcodes[10] = {type: 2, children: [11,12,13]};// CAT
      this.rules[54].opcodes[11] = {type: 4, index: 77};// RNM(Hex)
      this.rules[54].opcodes[12] = {type: 4, index: 74};// RNM(xString)
      this.rules[54].opcodes[13] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[54].opcodes[14] = {type: 2, children: [15,16]};// CAT
      this.rules[54].opcodes[15] = {type: 6, string: [46]};// TBS
      this.rules[54].opcodes[16] = {type: 4, index: 74};// RNM(xString)
      this.rules[54].opcodes[17] = {type: 2, children: [18,19,20]};// CAT
      this.rules[54].opcodes[18] = {type: 4, index: 78};// RNM(Bin)
      this.rules[54].opcodes[19] = {type: 4, index: 75};// RNM(bString)
      this.rules[54].opcodes[20] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[54].opcodes[21] = {type: 2, children: [22,23]};// CAT
      this.rules[54].opcodes[22] = {type: 6, string: [46]};// TBS
      this.rules[54].opcodes[23] = {type: 4, index: 75};// RNM(bString)

      /* TlsOp */
      this.rules[55].opcodes = [];
      this.rules[55].opcodes[0] = {type: 2, children: [1,2,3,4]};// CAT
      this.rules[55].opcodes[1] = {type: 4, index: 56};// RNM(TlsCase)
      this.rules[55].opcodes[2] = {type: 4, index: 57};// RNM(TlsOpen)
      this.rules[55].opcodes[3] = {type: 4, index: 59};// RNM(TlsString)
      this.rules[55].opcodes[4] = {type: 4, index: 58};// RNM(TlsClose)

      /* TlsCase */
      this.rules[56].opcodes = [];
      this.rules[56].opcodes[0] = {type: 3, min: 0, max: 1};// REP
      this.rules[56].opcodes[1] = {type: 1, children: [2,3]};// ALT
      this.rules[56].opcodes[2] = {type: 7, string: [37,105]};// TLS
      this.rules[56].opcodes[3] = {type: 7, string: [37,115]};// TLS

      /* TlsOpen */
      this.rules[57].opcodes = [];
      this.rules[57].opcodes[0] = {type: 6, string: [34]};// TBS

      /* TlsClose */
      this.rules[58].opcodes = [];
      this.rules[58].opcodes[0] = {type: 6, string: [34]};// TBS

      /* TlsString */
      this.rules[59].opcodes = [];
      this.rules[59].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[59].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[59].opcodes[2] = {type: 5, min: 32, max: 33};// TRG
      this.rules[59].opcodes[3] = {type: 5, min: 35, max: 126};// TRG
      this.rules[59].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)

      /* StringTab */
      this.rules[60].opcodes = [];
      this.rules[60].opcodes[0] = {type: 6, string: [9]};// TBS

      /* ClsOp */
      this.rules[61].opcodes = [];
      this.rules[61].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
      this.rules[61].opcodes[1] = {type: 4, index: 62};// RNM(ClsOpen)
      this.rules[61].opcodes[2] = {type: 4, index: 64};// RNM(ClsString)
      this.rules[61].opcodes[3] = {type: 4, index: 63};// RNM(ClsClose)

      /* ClsOpen */
      this.rules[62].opcodes = [];
      this.rules[62].opcodes[0] = {type: 6, string: [39]};// TBS

      /* ClsClose */
      this.rules[63].opcodes = [];
      this.rules[63].opcodes[0] = {type: 6, string: [39]};// TBS

      /* ClsString */
      this.rules[64].opcodes = [];
      this.rules[64].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[64].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[64].opcodes[2] = {type: 5, min: 32, max: 38};// TRG
      this.rules[64].opcodes[3] = {type: 5, min: 40, max: 126};// TRG
      this.rules[64].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)

      /* ProsVal */
      this.rules[65].opcodes = [];
      this.rules[65].opcodes[0] = {type: 2, children: [1,2,3]};// CAT
      this.rules[65].opcodes[1] = {type: 4, index: 66};// RNM(ProsValOpen)
      this.rules[65].opcodes[2] = {type: 4, index: 67};// RNM(ProsValString)
      this.rules[65].opcodes[3] = {type: 4, index: 68};// RNM(ProsValClose)

      /* ProsValOpen */
      this.rules[66].opcodes = [];
      this.rules[66].opcodes[0] = {type: 6, string: [60]};// TBS

      /* ProsValString */
      this.rules[67].opcodes = [];
      this.rules[67].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[67].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[67].opcodes[2] = {type: 5, min: 32, max: 61};// TRG
      this.rules[67].opcodes[3] = {type: 5, min: 63, max: 126};// TRG
      this.rules[67].opcodes[4] = {type: 4, index: 60};// RNM(StringTab)

      /* ProsValClose */
      this.rules[68].opcodes = [];
      this.rules[68].opcodes[0] = {type: 6, string: [62]};// TBS

      /* rep-min */
      this.rules[69].opcodes = [];
      this.rules[69].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)

      /* rep-min-max */
      this.rules[70].opcodes = [];
      this.rules[70].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)

      /* rep-max */
      this.rules[71].opcodes = [];
      this.rules[71].opcodes[0] = {type: 4, index: 72};// RNM(rep-num)

      /* rep-num */
      this.rules[72].opcodes = [];
      this.rules[72].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[72].opcodes[1] = {type: 5, min: 48, max: 57};// TRG

      /* dString */
      this.rules[73].opcodes = [];
      this.rules[73].opcodes[0] = {type: 4, index: 85};// RNM(dnum)

      /* xString */
      this.rules[74].opcodes = [];
      this.rules[74].opcodes[0] = {type: 4, index: 87};// RNM(xnum)

      /* bString */
      this.rules[75].opcodes = [];
      this.rules[75].opcodes[0] = {type: 4, index: 86};// RNM(bnum)

      /* Dec */
      this.rules[76].opcodes = [];
      this.rules[76].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[76].opcodes[1] = {type: 6, string: [68]};// TBS
      this.rules[76].opcodes[2] = {type: 6, string: [100]};// TBS

      /* Hex */
      this.rules[77].opcodes = [];
      this.rules[77].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[77].opcodes[1] = {type: 6, string: [88]};// TBS
      this.rules[77].opcodes[2] = {type: 6, string: [120]};// TBS

      /* Bin */
      this.rules[78].opcodes = [];
      this.rules[78].opcodes[0] = {type: 1, children: [1,2]};// ALT
      this.rules[78].opcodes[1] = {type: 6, string: [66]};// TBS
      this.rules[78].opcodes[2] = {type: 6, string: [98]};// TBS

      /* dmin */
      this.rules[79].opcodes = [];
      this.rules[79].opcodes[0] = {type: 4, index: 85};// RNM(dnum)

      /* dmax */
      this.rules[80].opcodes = [];
      this.rules[80].opcodes[0] = {type: 4, index: 85};// RNM(dnum)

      /* bmin */
      this.rules[81].opcodes = [];
      this.rules[81].opcodes[0] = {type: 4, index: 86};// RNM(bnum)

      /* bmax */
      this.rules[82].opcodes = [];
      this.rules[82].opcodes[0] = {type: 4, index: 86};// RNM(bnum)

      /* xmin */
      this.rules[83].opcodes = [];
      this.rules[83].opcodes[0] = {type: 4, index: 87};// RNM(xnum)

      /* xmax */
      this.rules[84].opcodes = [];
      this.rules[84].opcodes[0] = {type: 4, index: 87};// RNM(xnum)

      /* dnum */
      this.rules[85].opcodes = [];
      this.rules[85].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[85].opcodes[1] = {type: 5, min: 48, max: 57};// TRG

      /* bnum */
      this.rules[86].opcodes = [];
      this.rules[86].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[86].opcodes[1] = {type: 5, min: 48, max: 49};// TRG

      /* xnum */
      this.rules[87].opcodes = [];
      this.rules[87].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[87].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[87].opcodes[2] = {type: 5, min: 48, max: 57};// TRG
      this.rules[87].opcodes[3] = {type: 5, min: 65, max: 70};// TRG
      this.rules[87].opcodes[4] = {type: 5, min: 97, max: 102};// TRG

      /* alphanum */
      this.rules[88].opcodes = [];
      this.rules[88].opcodes[0] = {type: 2, children: [1,4]};// CAT
      this.rules[88].opcodes[1] = {type: 1, children: [2,3]};// ALT
      this.rules[88].opcodes[2] = {type: 5, min: 97, max: 122};// TRG
      this.rules[88].opcodes[3] = {type: 5, min: 65, max: 90};// TRG
      this.rules[88].opcodes[4] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[88].opcodes[5] = {type: 1, children: [6,7,8,9]};// ALT
      this.rules[88].opcodes[6] = {type: 5, min: 97, max: 122};// TRG
      this.rules[88].opcodes[7] = {type: 5, min: 65, max: 90};// TRG
      this.rules[88].opcodes[8] = {type: 5, min: 48, max: 57};// TRG
      this.rules[88].opcodes[9] = {type: 6, string: [45]};// TBS

      /* owsp */
      this.rules[89].opcodes = [];
      this.rules[89].opcodes[0] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[89].opcodes[1] = {type: 4, index: 91};// RNM(space)

      /* wsp */
      this.rules[90].opcodes = [];
      this.rules[90].opcodes[0] = {type: 3, min: 1, max: Infinity};// REP
      this.rules[90].opcodes[1] = {type: 4, index: 91};// RNM(space)

      /* space */
      this.rules[91].opcodes = [];
      this.rules[91].opcodes[0] = {type: 1, children: [1,2,3,4]};// ALT
      this.rules[91].opcodes[1] = {type: 6, string: [32]};// TBS
      this.rules[91].opcodes[2] = {type: 6, string: [9]};// TBS
      this.rules[91].opcodes[3] = {type: 4, index: 92};// RNM(comment)
      this.rules[91].opcodes[4] = {type: 4, index: 94};// RNM(LineContinue)

      /* comment */
      this.rules[92].opcodes = [];
      this.rules[92].opcodes[0] = {type: 2, children: [1,2]};// CAT
      this.rules[92].opcodes[1] = {type: 6, string: [59]};// TBS
      this.rules[92].opcodes[2] = {type: 3, min: 0, max: Infinity};// REP
      this.rules[92].opcodes[3] = {type: 1, children: [4,5]};// ALT
      this.rules[92].opcodes[4] = {type: 5, min: 32, max: 126};// TRG
      this.rules[92].opcodes[5] = {type: 6, string: [9]};// TBS

      /* LineEnd */
      this.rules[93].opcodes = [];
      this.rules[93].opcodes[0] = {type: 1, children: [1,2,3]};// ALT
      this.rules[93].opcodes[1] = {type: 6, string: [13,10]};// TBS
      this.rules[93].opcodes[2] = {type: 6, string: [10]};// TBS
      this.rules[93].opcodes[3] = {type: 6, string: [13]};// TBS

      /* LineContinue */
      this.rules[94].opcodes = [];
      this.rules[94].opcodes[0] = {type: 2, children: [1,5]};// CAT
      this.rules[94].opcodes[1] = {type: 1, children: [2,3,4]};// ALT
      this.rules[94].opcodes[2] = {type: 6, string: [13,10]};// TBS
      this.rules[94].opcodes[3] = {type: 6, string: [10]};// TBS
      this.rules[94].opcodes[4] = {type: 6, string: [13]};// TBS
      this.rules[94].opcodes[5] = {type: 1, children: [6,7]};// ALT
      this.rules[94].opcodes[6] = {type: 6, string: [32]};// TBS
      this.rules[94].opcodes[7] = {type: 6, string: [9]};// TBS

      // The `toString()` function will display the original grammar file(s) that produced these opcodes.
      this.toString = function toString(){
        let str = "";
        str += ";\n";
        str += "; ABNF for JavaScript APG 2.0 SABNF\n";
        str += "; RFC 5234 with some restrictions and additions.\n";
        str += "; Updated 11/24/2015 for RFC 7405 case-sensitive literal string notation\n";
        str += ";  - accepts %s\"string\" as a case-sensitive string\n";
        str += ";  - accepts %i\"string\" as a case-insensitive string\n";
        str += ";  - accepts \"string\" as a case-insensitive string\n";
        str += ";\n";
        str += "; Some restrictions:\n";
        str += ";   1. Rules must begin at first character of each line.\n";
        str += ";      Indentations on first rule and rules thereafter are not allowed.\n";
        str += ";   2. Relaxed line endings. CRLF, LF or CR are accepted as valid line ending.\n";
        str += ";   3. Prose values, i.e. <prose value>, are accepted as valid grammar syntax.\n";
        str += ";      However, a working parser cannot be generated from them.\n";
        str += ";\n";
        str += "; Super set (SABNF) additions:\n";
        str += ";   1. Look-ahead (syntactic predicate) operators are accepted as element prefixes.\n";
        str += ";      & is the positive look-ahead operator, succeeds and backtracks if the look-ahead phrase is found\n";
        str += ";      ! is the negative look-ahead operator, succeeds and backtracks if the look-ahead phrase is NOT found\n";
        str += ";      e.g. &%d13 or &rule or !(A / B)\n";
        str += ";   2. User-Defined Terminals (UDT) of the form, u_name and e_name are accepted.\n";
        str += ";      'name' is alpha followed by alpha/num/hyphen just like a rule name.\n";
        str += ";      u_name may be used as an element but no rule definition is given.\n";
        str += ";      e.g. rule = A / u_myUdt\n";
        str += ";           A = \"a\"\n";
        str += ";      would be a valid grammar.\n";
        str += ";   3. Case-sensitive, single-quoted strings are accepted.\n";
        str += ";      e.g. 'abc' would be equivalent to %d97.98.99\n";
        str += ";      (kept for backward compatibility, but superseded by %s\"abc\")  \n";
        str += "; New 12/26/2015\n";
        str += ";   4. Look-behind operators are accepted as element prefixes.\n";
        str += ";      && is the positive look-behind operator, succeeds and backtracks if the look-behind phrase is found\n";
        str += ";      !! is the negative look-behind operator, succeeds and backtracks if the look-behind phrase is NOT found\n";
        str += ";      e.g. &&%d13 or &&rule or !!(A / B)\n";
        str += ";   5. Back reference operators, i.e. \\rulename, are accepted.\n";
        str += ";      A back reference operator acts like a TLS or TBS terminal except that the phrase it attempts\n";
        str += ";      to match is a phrase previously matched by the rule 'rulename'.\n";
        str += ";      There are two modes of previous phrase matching - the parent-frame mode and the universal mode.\n";
        str += ";      In universal mode, \\rulename matches the last match to 'rulename' regardless of where it was found.\n";
        str += ";      In parent-frame mode, \\rulename matches only the last match found on the parent's frame or parse tree level.\n";
        str += ";      Back reference modifiers can be used to specify case and mode.\n";
        str += ";      \\A defaults to case-insensitive and universal mode, e.g. \\A === \\%i%uA\n";
        str += ";      Modifiers %i and %s determine case-insensitive and case-sensitive mode, respectively.\n";
        str += ";      Modifiers %u and %p determine universal mode and parent frame mode, respectively.\n";
        str += ";      Case and mode modifiers can appear in any order, e.g. \\%s%pA === \\%p%sA. \n";
        str += ";   7. String begin anchor, ABG(%^) matches the beginning of the input string location.\n";
        str += ";      Returns EMPTY or NOMATCH. Never consumes any characters.\n";
        str += ";   8. String end anchor, AEN(%$) matches the end of the input string location.\n";
        str += ";      Returns EMPTY or NOMATCH. Never consumes any characters.\n";
        str += ";\n";
        str += "File            = *(BlankLine / Rule / RuleError)\n";
        str += "BlankLine       = *(%d32/%d9) [comment] LineEnd\n";
        str += "Rule            = RuleLookup owsp Alternation ((owsp LineEnd)\n";
        str += "                / (LineEndError LineEnd))\n";
        str += "RuleLookup      = RuleNameTest owsp DefinedAsTest\n";
        str += "RuleNameTest    = RuleName/RuleNameError\n";
        str += "RuleName        = alphanum\n";
        str += "RuleNameError   = 1*(%d33-60/%d62-126)\n";
        str += "DefinedAsTest   = DefinedAs / DefinedAsError\n";
        str += "DefinedAsError  = 1*2%d33-126\n";
        str += "DefinedAs       = IncAlt / Defined\n";
        str += "Defined         = %d61\n";
        str += "IncAlt          = %d61.47\n";
        str += "RuleError       = 1*(%d32-126 / %d9  / LineContinue) LineEnd\n";
        str += "LineEndError    = 1*(%d32-126 / %d9  / LineContinue)\n";
        str += "Alternation     = Concatenation *(owsp AltOp Concatenation)\n";
        str += "Concatenation   = Repetition *(CatOp Repetition)\n";
        str += "Repetition      = [Modifier] (Group / Option / BasicElement / BasicElementErr)\n";
        str += "Modifier        = (Predicate [RepOp])\n";
        str += "                / RepOp\n";
        str += "Predicate       = BkaOp\n";
        str += "                / BknOp\n";
        str += "                / AndOp\n";
        str += "                / NotOp\n";
        str += "BasicElement    = UdtOp\n";
        str += "                / RnmOp\n";
        str += "                / TrgOp\n";
        str += "                / TbsOp\n";
        str += "                / TlsOp\n";
        str += "                / ClsOp\n";
        str += "                / BkrOp\n";
        str += "                / AbgOp\n";
        str += "                / AenOp\n";
        str += "                / ProsVal\n";
        str += "BasicElementErr = 1*(%d33-40/%d42-46/%d48-92/%d94-126)\n";
        str += "Group           = GroupOpen  Alternation (GroupClose / GroupError)\n";
        str += "GroupError      = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\n";
        str += "GroupOpen       = %d40 owsp\n";
        str += "GroupClose      = owsp %d41\n";
        str += "Option          = OptionOpen Alternation (OptionClose / OptionError)\n";
        str += "OptionError     = 1*(%d33-40/%d42-46/%d48-92/%d94-126) ; same as BasicElementErr\n";
        str += "OptionOpen      = %d91 owsp\n";
        str += "OptionClose     = owsp %d93\n";
        str += "RnmOp           = alphanum\n";
        str += "BkrOp           = %d92 [bkrModifier] bkr-name\n";
        str += "bkrModifier     = (cs [um / pm]) / (ci [um / pm]) / (um [cs /ci]) / (pm [cs / ci])\n";
        str += "cs              = '%s'\n";
        str += "ci              = '%i'\n";
        str += "um              = '%u'\n";
        str += "pm              = '%p'\n";
        str += "bkr-name        = uname / ename / rname\n";
        str += "rname           = alphanum\n";
        str += "uname           = %d117.95 alphanum\n";
        str += "ename           = %d101.95 alphanum\n";
        str += "UdtOp           = udt-empty\n";
        str += "                / udt-non-empty\n";
        str += "udt-non-empty   = %d117.95 alphanum\n";
        str += "udt-empty       = %d101.95 alphanum\n";
        str += "RepOp           = (rep-min StarOp rep-max)\n";
        str += "                / (rep-min StarOp)\n";
        str += "                / (StarOp rep-max)\n";
        str += "                / StarOp\n";
        str += "                / rep-min-max\n";
        str += "AltOp           = %d47 owsp\n";
        str += "CatOp           = wsp\n";
        str += "StarOp          = %d42\n";
        str += "AndOp           = %d38\n";
        str += "NotOp           = %d33\n";
        str += "BkaOp           = %d38.38\n";
        str += "BknOp           = %d33.33\n";
        str += "AbgOp           = %d37.94\n";
        str += "AenOp           = %d37.36\n";
        str += "TrgOp           = %d37 ((Dec dmin %d45 dmax) / (Hex xmin %d45 xmax) / (Bin bmin %d45 bmax))\n";
        str += "TbsOp           = %d37 ((Dec dString *(%d46 dString)) / (Hex xString *(%d46 xString)) / (Bin bString *(%d46 bString)))\n";
        str += "TlsOp           = TlsCase TlsOpen TlsString TlsClose\n";
        str += "TlsCase         = [\"%i\" / \"%s\"]\n";
        str += "TlsOpen         = %d34\n";
        str += "TlsClose        = %d34\n";
        str += "TlsString       = *(%d32-33/%d35-126/StringTab)\n";
        str += "StringTab       = %d9\n";
        str += "ClsOp           = ClsOpen ClsString ClsClose\n";
        str += "ClsOpen         = %d39\n";
        str += "ClsClose        = %d39\n";
        str += "ClsString       = *(%d32-38/%d40-126/StringTab)\n";
        str += "ProsVal         = ProsValOpen ProsValString ProsValClose\n";
        str += "ProsValOpen     = %d60\n";
        str += "ProsValString   = *(%d32-61/%d63-126/StringTab)\n";
        str += "ProsValClose    = %d62\n";
        str += "rep-min         = rep-num\n";
        str += "rep-min-max     = rep-num\n";
        str += "rep-max         = rep-num\n";
        str += "rep-num         = 1*(%d48-57)\n";
        str += "dString         = dnum\n";
        str += "xString         = xnum\n";
        str += "bString         = bnum\n";
        str += "Dec             = (%d68/%d100)\n";
        str += "Hex             = (%d88/%d120)\n";
        str += "Bin             = (%d66/%d98)\n";
        str += "dmin            = dnum\n";
        str += "dmax            = dnum\n";
        str += "bmin            = bnum\n";
        str += "bmax            = bnum\n";
        str += "xmin            = xnum\n";
        str += "xmax            = xnum\n";
        str += "dnum            = 1*(%d48-57)\n";
        str += "bnum            = 1*%d48-49\n";
        str += "xnum            = 1*(%d48-57 / %d65-70 / %d97-102)\n";
        str += ";\n";
        str += "; Basics\n";
        str += "alphanum        = (%d97-122/%d65-90) *(%d97-122/%d65-90/%d48-57/%d45)\n";
        str += "owsp            = *space\n";
        str += "wsp             = 1*space\n";
        str += "space           = %d32\n";
        str += "                / %d9\n";
        str += "                / comment\n";
        str += "                / LineContinue\n";
        str += "comment         = %d59 *(%d32-126 / %d9)\n";
        str += "LineEnd         = %d13.10\n";
        str += "                / %d10\n";
        str += "                / %d13\n";
        str += "LineContinue    = (%d13.10 / %d10 / %d13) (%d32 / %d9)\n";
        return str;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module converts an input SABNF grammar text file into a
    // grammar object that can be used with `apg-lib` in an application parser.
    // **apg** is, in fact itself, an ABNF parser that generates an SABNF parser.
    // It is based on the grammar<br>
    // `./dist/abnf-for-sabnf-grammar.bnf`.<br>
    // In its syntax phase, **apg** analyzes the user's input SABNF grammar for correct syntax, generating an AST as it goes.
    // In its semantic phase, **apg** translates the AST to generate the parser for the input grammar.
    var parser = function exportParser() {
      const thisFileName = 'parser: ';
      const ApgLib = nodeExports;
      const id = ApgLib.ids;
      const syn = new (syntaxCallbacks)();
      const sem = new (semanticCallbacks)();
      const sabnfGrammar$1 = new (sabnfGrammar)();
      // eslint-disable-next-line new-cap
      const parser = new ApgLib.parser();
      // eslint-disable-next-line new-cap
      parser.ast = new ApgLib.ast();
      parser.callbacks = syn.callbacks;
      parser.ast.callbacks = sem.callbacks;

      /* find the line containing the given character index */
      const findLine = function findLine(lines, charIndex, charLength) {
        if (charIndex < 0 || charIndex >= charLength) {
          /* return error if out of range */
          return -1;
        }
        for (let i = 0; i < lines.length; i += 1) {
          if (charIndex >= lines[i].beginChar && charIndex < lines[i].beginChar + lines[i].length) {
            return i;
          }
        }
        /* should never reach here */
        return -1;
      };
      const translateIndex = function translateIndex(map, index) {
        let ret = -1;
        if (index < map.length) {
          for (let i = index; i < map.length; i += 1) {
            if (map[i] !== null) {
              ret = map[i];
              break;
            }
          }
        }
        return ret;
      };
      /* helper function when removing redundant opcodes */
      const reduceOpcodes = function reduceOpcodes(rules) {
        rules.forEach((rule) => {
          const opcodes = [];
          const map = [];
          let reducedIndex = 0;
          rule.opcodes.forEach((op) => {
            if (op.type === id.ALT && op.children.length === 1) {
              map.push(null);
            } else if (op.type === id.CAT && op.children.length === 1) {
              map.push(null);
            } else if (op.type === id.REP && op.min === 1 && op.max === 1) {
              map.push(null);
            } else {
              map.push(reducedIndex);
              opcodes.push(op);
              reducedIndex += 1;
            }
          });
          map.push(reducedIndex);
          /* translate original opcode indexes to the reduced set. */
          opcodes.forEach((op) => {
            if (op.type === id.ALT || op.type === id.CAT) {
              for (let i = 0; i < op.children.length; i += 1) {
                op.children[i] = translateIndex(map, op.children[i]);
              }
            }
          });
          rule.opcodes = opcodes;
        });
      };
      /* Parse the grammar - the syntax phase. */
      /* SABNF grammar syntax errors are caught and reported here. */
      this.syntax = function syntax(chars, lines, errors, strict, trace) {
        if (trace) {
          if (trace.traceObject !== 'traceObject') {
            throw new TypeError(`${thisFileName}trace argument is not a trace object`);
          }
          parser.trace = trace;
        }
        const data = {};
        data.errors = errors;
        data.strict = !!strict;
        data.lines = lines;
        data.findLine = findLine;
        data.charsLength = chars.length;
        data.ruleCount = 0;
        const result = parser.parse(sabnfGrammar$1, 'file', chars, data);
        if (!result.success) {
          errors.push({
            line: 0,
            char: 0,
            msg: 'syntax analysis of input grammar failed',
          });
        }
      };
      /* Parse the grammar - the semantic phase, translates the AST. */
      /* SABNF grammar syntax errors are caught and reported here. */
      this.semantic = function semantic(chars, lines, errors) {
        const data = {};
        data.errors = errors;
        data.lines = lines;
        data.findLine = findLine;
        data.charsLength = chars.length;
        parser.ast.translate(data);
        if (errors.length) {
          return null;
        }
        /* Remove unneeded operators. */
        /* ALT operators with a single alternate */
        /* CAT operators with a single phrase to concatenate */
        /* REP(1,1) operators (`1*1RuleName` or `1RuleName` is the same as just `RuleName`.) */
        reduceOpcodes(data.rules);
        return {
          rules: data.rules,
          udts: data.udts,
          lineMap: data.rulesLineMap,
        };
      };
      // Generate a grammar constructor function.
      // An object instantiated from this constructor is used with the `apg-lib` `parser()` function.
      this.generateSource = function generateSource(chars, lines, rules, udts, name) {
        let source = '';
        let i;
        let bkrname;
        let bkrlower;
        let opcodeCount = 0;
        let charCodeMin = Infinity;
        let charCodeMax = 0;
        const ruleNames = [];
        const udtNames = [];
        let alt = 0;
        let cat = 0;
        let rnm = 0;
        let udt = 0;
        let rep = 0;
        let and = 0;
        let not = 0;
        let tls = 0;
        let tbs = 0;
        let trg = 0;
        let bkr = 0;
        let bka = 0;
        let bkn = 0;
        let abg = 0;
        let aen = 0;
        rules.forEach((rule) => {
          ruleNames.push(rule.lower);
          opcodeCount += rule.opcodes.length;
          rule.opcodes.forEach((op) => {
            switch (op.type) {
              case id.ALT:
                alt += 1;
                break;
              case id.CAT:
                cat += 1;
                break;
              case id.RNM:
                rnm += 1;
                break;
              case id.UDT:
                udt += 1;
                break;
              case id.REP:
                rep += 1;
                break;
              case id.AND:
                and += 1;
                break;
              case id.NOT:
                not += 1;
                break;
              case id.BKA:
                bka += 1;
                break;
              case id.BKN:
                bkn += 1;
                break;
              case id.BKR:
                bkr += 1;
                break;
              case id.ABG:
                abg += 1;
                break;
              case id.AEN:
                aen += 1;
                break;
              case id.TLS:
                tls += 1;
                for (i = 0; i < op.string.length; i += 1) {
                  if (op.string[i] < charCodeMin) {
                    charCodeMin = op.string[i];
                  }
                  if (op.string[i] > charCodeMax) {
                    charCodeMax = op.string[i];
                  }
                }
                break;
              case id.TBS:
                tbs += 1;
                for (i = 0; i < op.string.length; i += 1) {
                  if (op.string[i] < charCodeMin) {
                    charCodeMin = op.string[i];
                  }
                  if (op.string[i] > charCodeMax) {
                    charCodeMax = op.string[i];
                  }
                }
                break;
              case id.TRG:
                trg += 1;
                if (op.min < charCodeMin) {
                  charCodeMin = op.min;
                }
                if (op.max > charCodeMax) {
                  charCodeMax = op.max;
                }
                break;
              default:
                throw new Error('generateSource: unrecognized opcode');
            }
          });
        });
        ruleNames.sort();
        if (udts.length > 0) {
          udts.forEach((udtFunc) => {
            udtNames.push(udtFunc.lower);
          });
          udtNames.sort();
        }
        let funcname = 'module.exports';
        if (name && typeof name === 'string') {
          funcname = `let ${name}`;
        }
        source += '// copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved<br>\n';
        source += '//   license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)<br>\n';
        source += '//\n';
        source += '// Generated by apg-js, Version 4.0.0 [apg-js](https://github.com/ldthomas/apg-js)\n';
        source += `${funcname} = function grammar(){\n`;
        source += '  // ```\n';
        source += '  // SUMMARY\n';
        source += `  //      rules = ${rules.length}\n`;
        source += `  //       udts = ${udts.length}\n`;
        source += `  //    opcodes = ${opcodeCount}\n`;
        source += '  //        ---   ABNF original opcodes\n';
        source += `  //        ALT = ${alt}\n`;
        source += `  //        CAT = ${cat}\n`;
        source += `  //        REP = ${rep}\n`;
        source += `  //        RNM = ${rnm}\n`;
        source += `  //        TLS = ${tls}\n`;
        source += `  //        TBS = ${tbs}\n`;
        source += `  //        TRG = ${trg}\n`;
        source += '  //        ---   SABNF superset opcodes\n';
        source += `  //        UDT = ${udt}\n`;
        source += `  //        AND = ${and}\n`;
        source += `  //        NOT = ${not}\n`;
        source += `  //        BKA = ${bka}\n`;
        source += `  //        BKN = ${bkn}\n`;
        source += `  //        BKR = ${bkr}\n`;
        source += `  //        ABG = ${abg}\n`;
        source += `  //        AEN = ${aen}\n`;
        source += '  // characters = [';
        if (tls + tbs + trg === 0) {
          source += ' none defined ]';
        } else {
          source += `${charCodeMin} - ${charCodeMax}]`;
        }
        if (udt > 0) {
          source += ' + user defined';
        }
        source += '\n';
        source += '  // ```\n';
        source += '  /* OBJECT IDENTIFIER (for internal parser use) */\n';
        source += "  this.grammarObject = 'grammarObject';\n";
        source += '\n';
        source += '  /* RULES */\n';
        source += '  this.rules = [];\n';
        rules.forEach((rule, ii) => {
          let thisRule = '  this.rules[';
          thisRule += ii;
          thisRule += "] = {name: '";
          thisRule += rule.name;
          thisRule += "', lower: '";
          thisRule += rule.lower;
          thisRule += "', index: ";
          thisRule += rule.index;
          thisRule += ', isBkr: ';
          thisRule += rule.isBkr;
          thisRule += '};\n';
          source += thisRule;
        });
        source += '\n';
        source += '  /* UDTS */\n';
        source += '  this.udts = [];\n';
        if (udts.length > 0) {
          udts.forEach((udtFunc, ii) => {
            let thisUdt = '  this.udts[';
            thisUdt += ii;
            thisUdt += "] = {name: '";
            thisUdt += udtFunc.name;
            thisUdt += "', lower: '";
            thisUdt += udtFunc.lower;
            thisUdt += "', index: ";
            thisUdt += udtFunc.index;
            thisUdt += ', empty: ';
            thisUdt += udtFunc.empty;
            thisUdt += ', isBkr: ';
            thisUdt += udtFunc.isBkr;
            thisUdt += '};\n';
            source += thisUdt;
          });
        }
        source += '\n';
        source += '  /* OPCODES */\n';
        rules.forEach((rule, ruleIndex) => {
          if (ruleIndex > 0) {
            source += '\n';
          }
          source += `  /* ${rule.name} */\n`;
          source += `  this.rules[${ruleIndex}].opcodes = [];\n`;
          rule.opcodes.forEach((op, opIndex) => {
            let prefix;
            switch (op.type) {
              case id.ALT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${
              op.type
            }, children: [${op.children.toString()}]};// ALT\n`;
                break;
              case id.CAT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${
              op.type
            }, children: [${op.children.toString()}]};// CAT\n`;
                break;
              case id.RNM:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}};// RNM(${
              rules[op.index].name
            })\n`;
                break;
              case id.BKR:
                if (op.index >= rules.length) {
                  bkrname = udts[op.index - rules.length].name;
                  bkrlower = udts[op.index - rules.length].lower;
                } else {
                  bkrname = rules[op.index].name;
                  bkrlower = rules[op.index].lower;
                }
                prefix = '%i';
                if (op.bkrCase === id.BKR_MODE_CS) {
                  prefix = '%s';
                }
                if (op.bkrMode === id.BKR_MODE_UM) {
                  prefix += '%u';
                } else {
                  prefix += '%p';
                }
                bkrname = prefix + bkrname;
                source +=
                  `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, index: ${op.index}, lower: '${bkrlower}'` +
                  `, bkrCase: ${op.bkrCase}, bkrMode: ${op.bkrMode}};// BKR(\\${bkrname})\n`;
                break;
              case id.UDT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, empty: ${op.empty}, index: ${
              op.index
            }};// UDT(${udts[op.index].name})\n`;
                break;
              case id.REP:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// REP\n`;
                break;
              case id.AND:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AND\n`;
                break;
              case id.NOT:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// NOT\n`;
                break;
              case id.ABG:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// ABG(%^)\n`;
                break;
              case id.AEN:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// AEN(%$)\n`;
                break;
              case id.BKA:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKA\n`;
                break;
              case id.BKN:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}};// BKN\n`;
                break;
              case id.TLS:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${
              op.type
            }, string: [${op.string.toString()}]};// TLS\n`;
                break;
              case id.TBS:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${
              op.type
            }, string: [${op.string.toString()}]};// TBS\n`;
                break;
              case id.TRG:
                source += `  this.rules[${ruleIndex}].opcodes[${opIndex}] = {type: ${op.type}, min: ${op.min}, max: ${op.max}};// TRG\n`;
                break;
              default:
                throw new Error('parser.js: ~143: unrecognized opcode');
            }
          });
        });
        source += '\n';
        source += '  // The `toString()` function will display the original grammar file(s) that produced these opcodes.\n';
        source += '  this.toString = function toString(){\n';
        source += '    let str = "";\n';
        let str;
        lines.forEach((line) => {
          const end = line.beginChar + line.length;
          str = '';
          source += '    str += "';
          for (let ii = line.beginChar; ii < end; ii += 1) {
            switch (chars[ii]) {
              case 9:
                str = ' ';
                break;
              case 10:
                str = '\\n';
                break;
              case 13:
                str = '\\r';
                break;
              case 34:
                str = '\\"';
                break;
              case 92:
                str = '\\\\';
                break;
              default:
                str = String.fromCharCode(chars[ii]);
                break;
            }
            source += str;
          }
          source += '";\n';
        });
        source += '    return str;\n';
        source += '  }\n';
        source += '}\n';
        return source;
      };
      // Generate a grammar file object.
      // Returns the same object as instantiating the constructor function returned by<br>
      // `this.generateSource()`.<br>
      this.generateObject = function generateObject(stringArg, rules, udts) {
        const obj = {};
        const ruleNames = [];
        const udtNames = [];
        const string = stringArg.slice(0);
        obj.grammarObject = 'grammarObject';
        rules.forEach((rule) => {
          ruleNames.push(rule.lower);
        });
        ruleNames.sort();
        if (udts.length > 0) {
          udts.forEach((udtFunc) => {
            udtNames.push(udtFunc.lower);
          });
          udtNames.sort();
        }
        obj.callbacks = [];
        ruleNames.forEach((name) => {
          obj.callbacks[name] = false;
        });
        if (udts.length > 0) {
          udtNames.forEach((name) => {
            obj.callbacks[name] = false;
          });
        }
        obj.rules = rules;
        obj.udts = udts;
        obj.toString = function toStringFunc() {
          return string;
        };
        return obj;
      };
    };

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module does the heavy lifting for attribute generation.
    var ruleAttributes = (function exportRuleAttributes() {
      const id = identifiers;
      const thisFile = 'rule-attributes.js';
      let state = null;
      function isEmptyOnly(attr) {
        if (attr.left || attr.nested || attr.right || attr.cyclic) {
          return false;
        }
        return attr.empty;
      }
      function isRecursive(attr) {
        if (attr.left || attr.nested || attr.right || attr.cyclic) {
          return true;
        }
        return false;
      }
      function isCatNested(attrs, count) {
        let i = 0;
        let j = 0;
        let k = 0;
        /* 1. if any child is nested, CAT is nested */
        for (i = 0; i < count; i += 1) {
          if (attrs[i].nested) {
            return true;
          }
        }
        /* 2.) the left-most right recursive child
                   is followed by at least one non-empty child */
        for (i = 0; i < count; i += 1) {
          if (attrs[i].right && !attrs[i].leaf) {
            for (j = i + 1; j < count; j += 1) {
              if (!isEmptyOnly(attrs[j])) {
                return true;
              }
            }
          }
        }
        /* 3.) the right-most left recursive child
                   is preceded by at least one non-empty child */
        for (i = count - 1; i >= 0; i -= 1) {
          if (attrs[i].left && !attrs[i].leaf) {
            for (j = i - 1; j >= 0; j -= 1) {
              if (!isEmptyOnly(attrs[j])) {
                return true;
              }
            }
          }
        }
        /* 4. there is at lease one recursive child between
                  the left-most and right-most non-recursive, non-empty children */
        for (i = 0; i < count; i += 1) {
          if (!attrs[i].empty && !isRecursive(attrs[i])) {
            for (j = i + 1; j < count; j += 1) {
              if (isRecursive(attrs[j])) {
                for (k = j + 1; k < count; k += 1) {
                  if (!attrs[k].empty && !isRecursive(attrs[k])) {
                    return true;
                  }
                }
              }
            }
          }
        }

        /* none of the above */
        return false;
      }
      function isCatCyclic(attrs, count) {
        /* if all children are cyclic, CAT is cyclic */
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].cyclic) {
            return false;
          }
        }
        return true;
      }
      function isCatLeft(attrs, count) {
        /* if the left-most non-empty is left, CAT is left */
        for (let i = 0; i < count; i += 1) {
          if (attrs[i].left) {
            return true;
          }
          if (!attrs[i].empty) {
            return false;
          }
          /* keep looking */
        }
        return false; /* all left-most are empty */
      }
      function isCatRight(attrs, count) {
        /* if the right-most non-empty is right, CAT is right */
        for (let i = count - 1; i >= 0; i -= 1) {
          if (attrs[i].right) {
            return true;
          }
          if (!attrs[i].empty) {
            return false;
          }
          /* keep looking */
        }
        return false;
      }
      function isCatEmpty(attrs, count) {
        /* if all children are empty, CAT is empty */
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].empty) {
            return false;
          }
        }
        return true;
      }
      function isCatFinite(attrs, count) {
        /* if all children are finite, CAT is finite */
        for (let i = 0; i < count; i += 1) {
          if (!attrs[i].finite) {
            return false;
          }
        }
        return true;
      }
      function cat(stateArg, opcodes, opIndex, iAttr) {
        let i = 0;
        const opCat = opcodes[opIndex];
        const count = opCat.children.length;

        /* generate an empty array of child attributes */
        const childAttrs = [];
        for (i = 0; i < count; i += 1) {
          childAttrs.push(stateArg.attrGen());
        }
        for (i = 0; i < count; i += 1) {
          // eslint-disable-next-line no-use-before-define
          opEval(stateArg, opcodes, opCat.children[i], childAttrs[i]);
        }
        iAttr.left = isCatLeft(childAttrs, count);
        iAttr.right = isCatRight(childAttrs, count);
        iAttr.nested = isCatNested(childAttrs, count);
        iAttr.empty = isCatEmpty(childAttrs, count);
        iAttr.finite = isCatFinite(childAttrs, count);
        iAttr.cyclic = isCatCyclic(childAttrs, count);
      }
      function alt(stateArg, opcodes, opIndex, iAttr) {
        let i = 0;
        const opAlt = opcodes[opIndex];
        const count = opAlt.children.length;

        /* generate an empty array of child attributes */
        const childAttrs = [];
        for (i = 0; i < count; i += 1) {
          childAttrs.push(stateArg.attrGen());
        }
        for (i = 0; i < count; i += 1) {
          // eslint-disable-next-line no-use-before-define
          opEval(stateArg, opcodes, opAlt.children[i], childAttrs[i]);
        }

        /* if any child attribute is true, ALT is true */
        iAttr.left = false;
        iAttr.right = false;
        iAttr.nested = false;
        iAttr.empty = false;
        iAttr.finite = false;
        iAttr.cyclic = false;
        for (i = 0; i < count; i += 1) {
          if (childAttrs[i].left) {
            iAttr.left = true;
          }
          if (childAttrs[i].nested) {
            iAttr.nested = true;
          }
          if (childAttrs[i].right) {
            iAttr.right = true;
          }
          if (childAttrs[i].empty) {
            iAttr.empty = true;
          }
          if (childAttrs[i].finite) {
            iAttr.finite = true;
          }
          if (childAttrs[i].cyclic) {
            iAttr.cyclic = true;
          }
        }
      }
      function bkr(stateArg, opcodes, opIndex, iAttr) {
        const opBkr = opcodes[opIndex];
        if (opBkr.index >= stateArg.ruleCount) {
          /* use UDT values */
          iAttr.empty = stateArg.udts[opBkr.index - stateArg.ruleCount].empty;
          iAttr.finite = true;
        } else {
          /* use the empty and finite values from the back referenced rule */
          // eslint-disable-next-line no-use-before-define
          ruleAttrsEval(stateArg, opBkr.index, iAttr);

          /* however, this is a terminal node like TLS */
          iAttr.left = false;
          iAttr.nested = false;
          iAttr.right = false;
          iAttr.cyclic = false;
        }
      }

      function opEval(stateArg, opcodes, opIndex, iAttr) {
        stateArg.attrInit(iAttr);
        const opi = opcodes[opIndex];
        switch (opi.type) {
          case id.ALT:
            alt(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.CAT:
            cat(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.REP:
            opEval(stateArg, opcodes, opIndex + 1, iAttr);
            if (opi.min === 0) {
              iAttr.empty = true;
              iAttr.finite = true;
            }
            break;
          case id.RNM:
            // eslint-disable-next-line no-use-before-define
            ruleAttrsEval(stateArg, opcodes[opIndex].index, iAttr);
            break;
          case id.BKR:
            bkr(stateArg, opcodes, opIndex, iAttr);
            break;
          case id.AND:
          case id.NOT:
          case id.BKA:
          case id.BKN:
            opEval(stateArg, opcodes, opIndex + 1, iAttr);
            iAttr.empty = true;
            break;
          case id.TLS:
            iAttr.empty = !opcodes[opIndex].string.length;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.TBS:
          case id.TRG:
            iAttr.empty = false;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.UDT:
            iAttr.empty = opi.empty;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          case id.ABG:
          case id.AEN:
            iAttr.empty = true;
            iAttr.finite = true;
            iAttr.cyclic = false;
            break;
          default:
            throw new Error(`unknown opcode type: ${opi}`);
        }
      }
      // The main logic for handling rules that:
      //  - have already be evaluated
      //  - have not been evaluated and is the first occurrence on this branch
      //  - second occurrence on this branch for the start rule
      //  - second occurrence on this branch for non-start rules
      function ruleAttrsEval(stateArg, ruleIndex, iAttr) {
        const attri = stateArg.attrsWorking[ruleIndex];
        if (attri.isComplete) {
          /* just use the completed values */
          stateArg.attrCopy(iAttr, attri);
        } else if (!attri.isOpen) {
          /* open the rule and traverse it */
          attri.isOpen = true;
          opEval(stateArg, attri.rule.opcodes, 0, iAttr);
          /* complete this rule's attributes */
          attri.left = iAttr.left;
          attri.right = iAttr.right;
          attri.nested = iAttr.nested;
          attri.empty = iAttr.empty;
          attri.finite = iAttr.finite;
          attri.cyclic = iAttr.cyclic;
          attri.leaf = false;
          attri.isOpen = false;
          attri.isComplete = true;
        } else if (ruleIndex === stateArg.startRule) {
          /* use recursive leaf values */
          if (ruleIndex === stateArg.startRule) {
            iAttr.left = true;
            iAttr.right = true;
            iAttr.cyclic = true;
            iAttr.leaf = true;
          }
        } else {
          /* non-start rule terminal leaf */
          iAttr.finite = true;
        }
      }
      // The main driver for the attribute generation.
      const ruleAttributes = (stateArg) => {
        state = stateArg;
        let i = 0;
        let j = 0;
        const iAttr = state.attrGen();
        for (i = 0; i < state.ruleCount; i += 1) {
          /* initialize working attributes */
          for (j = 0; j < state.ruleCount; j += 1) {
            state.attrInit(state.attrsWorking[j]);
          }
          state.startRule = i;
          ruleAttrsEval(state, i, iAttr);

          /* save off the working attributes for this rule */
          state.attrCopy(state.attrs[i], state.attrsWorking[i]);
        }
        state.attributesComplete = true;
        let attri = null;
        for (i = 0; i < state.ruleCount; i += 1) {
          attri = state.attrs[i];
          if (attri.left || !attri.finite || attri.cyclic) {
            const temp = state.attrGen(attri.rule);
            state.attrCopy(temp, attri);
            state.attrsErrors.push(temp);
            state.attrsErrorCount += 1;
          }
        }
      };
      const truth = (val) => (val ? 't' : 'f');
      const tError = (val) => (val ? 'e' : 'f');
      const fError = (val) => (val ? 't' : 'e');
      const showAttr = (seq, index, attr, dep) => {
        let str = `${seq}:${index}:`;
        str += `${tError(attr.left)} `;
        str += `${truth(attr.nested)} `;
        str += `${truth(attr.right)} `;
        str += `${tError(attr.cyclic)} `;
        str += `${fError(attr.finite)} `;
        str += `${truth(attr.empty)}:`;
        str += `${state.typeToString(dep.recursiveType)}:`;
        str += dep.recursiveType === id.ATTR_MR ? dep.groupNumber : '-';
        str += `:${attr.rule.name}\n`;
        return str;
      };

      const showLegend = () => {
        let str = 'LEGEND - t=true, f=false, e=error\n';
        str += 'sequence:rule index:left nested right cyclic finite empty:type:group number:rule name\n';
        return str;
      };
      const showAttributeErrors = () => {
        let attri = null;
        let depi = null;
        let str = '';
        str += 'RULE ATTRIBUTES WITH ERRORS\n';
        str += showLegend();
        if (state.attrsErrorCount) {
          for (let i = 0; i < state.attrsErrorCount; i += 1) {
            attri = state.attrsErrors[i];
            depi = state.ruleDeps[attri.rule.index];
            str += showAttr(i, attri.rule.index, attri, depi);
          }
        } else {
          str += '<none>\n';
        }
        return str;
      };

      const show = (type) => {
        let i = 0;
        let ii = 0;
        let attri = null;
        let depi = null;
        let str = '';
        let { ruleIndexes } = state;
        // let udtIndexes = state.udtIndexes;
        if (type === 97) {
          ruleIndexes = state.ruleAlphaIndexes;
          // udtIndexes = state.udtAlphaIndexes;
        } else if (type === 116) {
          ruleIndexes = state.ruleTypeIndexes;
          // udtIndexes = state.udtAlphaIndexes;
        }
        /* show all attributes */
        for (i = 0; i < state.ruleCount; i += 1) {
          ii = ruleIndexes[i];
          attri = state.attrs[ii];
          depi = state.ruleDeps[ii];
          str += showAttr(i, ii, attri, depi);
        }
        return str;
      };

      // Display the rule attributes.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - "type" or "t", ordered by type (alphabetical within each type/group)
      //      - none of above, index order (default)
      const showAttributes = (order = 'index') => {
        if (!state.attributesComplete) {
          throw new Error(`${thisFile}:showAttributes: attributes not available`);
        }
        let str = '';
        const leader = 'RULE ATTRIBUTES\n';
        if (order.charCodeAt(0) === 97) {
          str += 'alphabetical by rule name\n';
          str += leader;
          str += showLegend();
          str += show(97);
        } else if (order.charCodeAt(0) === 116) {
          str += 'ordered by rule type\n';
          str += leader;
          str += showLegend();
          str += show(116);
        } else {
          str += 'ordered by rule index\n';
          str += leader;
          str += showLegend();
          str += show();
        }
        return str;
      };

      /* Destructuring assignment - see MDN Web Docs */
      return { ruleAttributes, showAttributes, showAttributeErrors };
    })();

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // Determine rule dependencies and types.
    // For each rule, determine which other rules it refers to
    // and which of the other rules refer back to it.
    //
    // Rule types are:
    //  - non-recursive - the rule never refers to itself, even indirectly
    //  - recursive - the rule refers to itself, possibly indirectly
    //  - mutually-recursive - belongs to a group of two or more rules, each of which refers to every other rule in the group, including itself.
    var ruleDependencies = (() => {
      const id = identifiers;
      let state = null; /* keep a global reference to the state for the show functions */

      /* scan the opcodes of the indexed rule and discover which rules it references and which rule refer back to it */
      const scan = (ruleCount, ruleDeps, index, isScanned) => {
        let i = 0;
        let j = 0;
        const rdi = ruleDeps[index];
        isScanned[index] = true;
        const op = rdi.rule.opcodes;
        for (i = 0; i < op.length; i += 1) {
          const opi = op[i];
          if (opi.type === id.RNM) {
            rdi.refersTo[opi.index] = true;
            if (!isScanned[opi.index]) {
              scan(ruleCount, ruleDeps, opi.index, isScanned);
            }
            for (j = 0; j < ruleCount; j += 1) {
              if (ruleDeps[opi.index].refersTo[j]) {
                rdi.refersTo[j] = true;
              }
            }
          } else if (opi.type === id.UDT) {
            rdi.refersToUdt[opi.index] = true;
          } else if (opi.type === id.BKR) {
            if (opi.index < ruleCount) {
              rdi.refersTo[opi.index] = true;
              if (!isScanned[opi.index]) {
                scan(ruleCount, ruleDeps, opi.index, isScanned);
              }
            } else {
              rdi.refersToUdt[ruleCount - opi.index] = true;
            }
          }
        }
      };
      // Determine the rule dependencies, types and mutually recursive groups.
      const ruleDependencies = (stateArg) => {
        state = stateArg; /* make it global */
        let i = 0;
        let j = 0;
        let groupCount = 0;
        let rdi = null;
        let rdj = null;
        let newGroup = false;
        state.dependenciesComplete = false;

        /* make a working array of rule scanned markers */
        const isScanned = state.falseArray(state.ruleCount);

        /* discover the rule dependencies */
        for (i = 0; i < state.ruleCount; i += 1) {
          state.falsifyArray(isScanned);
          scan(state.ruleCount, state.ruleDeps, i, isScanned);
        }
        /* discover all rules referencing each rule */
        for (i = 0; i < state.ruleCount; i += 1) {
          for (j = 0; j < state.ruleCount; j += 1) {
            if (i !== j) {
              if (state.ruleDeps[j].refersTo[i]) {
                state.ruleDeps[i].referencedBy[j] = true;
              }
            }
          }
        }
        /* find the non-recursive and recursive types */
        for (i = 0; i < state.ruleCount; i += 1) {
          state.ruleDeps[i].recursiveType = id.ATTR_N;
          if (state.ruleDeps[i].refersTo[i]) {
            state.ruleDeps[i].recursiveType = id.ATTR_R;
          }
        }

        /* find the mutually-recursive groups, if any */
        groupCount = -1;
        for (i = 0; i < state.ruleCount; i += 1) {
          rdi = state.ruleDeps[i];
          if (rdi.recursiveType === id.ATTR_R) {
            newGroup = true;
            for (j = 0; j < state.ruleCount; j += 1) {
              if (i !== j) {
                rdj = state.ruleDeps[j];
                if (rdj.recursiveType === id.ATTR_R) {
                  if (rdi.refersTo[j] && rdj.refersTo[i]) {
                    if (newGroup) {
                      groupCount += 1;
                      rdi.recursiveType = id.ATTR_MR;
                      rdi.groupNumber = groupCount;
                      newGroup = false;
                    }
                    rdj.recursiveType = id.ATTR_MR;
                    rdj.groupNumber = groupCount;
                  }
                }
              }
            }
          }
        }
        state.isMutuallyRecursive = groupCount > -1;

        /* sort the rules/UDTS */
        state.ruleAlphaIndexes.sort(state.compRulesAlpha);
        state.ruleTypeIndexes.sort(state.compRulesAlpha);
        state.ruleTypeIndexes.sort(state.compRulesType);
        if (state.isMutuallyRecursive) {
          state.ruleTypeIndexes.sort(state.compRulesGroup);
        }
        if (state.udtCount) {
          state.udtAlphaIndexes.sort(state.compUdtsAlpha);
        }

        state.dependenciesComplete = true;
      };
      const show = (type = null) => {
        let i = 0;
        let j = 0;
        let count = 0;
        let startSeg = 0;
        const maxRule = state.ruleCount - 1;
        const maxUdt = state.udtCount - 1;
        const lineLength = 100;
        let str = '';
        let pre = '';
        const toArrow = '=> ';
        const byArrow = '<= ';
        let first = false;
        let rdi = null;
        let { ruleIndexes } = state;
        let { udtIndexes } = state;
        if (type === 97) {
          ruleIndexes = state.ruleAlphaIndexes;
          udtIndexes = state.udtAlphaIndexes;
        } else if (type === 116) {
          ruleIndexes = state.ruleTypeIndexes;
          udtIndexes = state.udtAlphaIndexes;
        }
        for (i = 0; i < state.ruleCount; i += 1) {
          rdi = state.ruleDeps[ruleIndexes[i]];
          pre = `${ruleIndexes[i]}:${state.typeToString(rdi.recursiveType)}:`;
          if (state.isMutuallyRecursive) {
            pre += rdi.groupNumber > -1 ? rdi.groupNumber : '-';
            pre += ':';
          }
          pre += ' ';
          str += `${pre + state.rules[ruleIndexes[i]].name}\n`;
          first = true;
          count = 0;
          startSeg = str.length;
          str += pre;
          for (j = 0; j < state.ruleCount; j += 1) {
            if (rdi.refersTo[ruleIndexes[j]]) {
              if (first) {
                str += toArrow;
                first = false;
                str += state.ruleDeps[ruleIndexes[j]].rule.name;
              } else {
                str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;
              }
              count += 1;
            }
            if (str.length - startSeg > lineLength && j !== maxRule) {
              str += `\n${pre}${toArrow}`;
              startSeg = str.length;
            }
          }
          if (state.udtCount) {
            for (j = 0; j < state.udtCount; j += 1) {
              if (rdi.refersToUdt[udtIndexes[j]]) {
                if (first) {
                  str += toArrow;
                  first = false;
                  str += state.udts[udtIndexes[j]].name;
                } else {
                  str += `, ${state.udts[udtIndexes[j]].name}`;
                }
                count += 1;
              }
              if (str.length - startSeg > lineLength && j !== maxUdt) {
                str += `\n${pre}${toArrow}`;
                startSeg = str.length;
              }
            }
          }
          if (count === 0) {
            str += '=> <none>\n';
          }
          if (first === false) {
            str += '\n';
          }
          first = true;
          count = 0;
          startSeg = str.length;
          str += pre;
          for (j = 0; j < state.ruleCount; j += 1) {
            if (rdi.referencedBy[ruleIndexes[j]]) {
              if (first) {
                str += byArrow;
                first = false;
                str += state.ruleDeps[ruleIndexes[j]].rule.name;
              } else {
                str += `, ${state.ruleDeps[ruleIndexes[j]].rule.name}`;
              }
              count += 1;
            }
            if (str.length - startSeg > lineLength && j !== maxRule) {
              str += `\n${pre}${toArrow}`;
              startSeg = str.length;
            }
          }
          if (count === 0) {
            str += '<= <none>\n';
          }
          if (first === false) {
            str += '\n';
          }
          str += '\n';
        }
        return str;
      };
      // Display the rule dependencies.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - "type" or "t", ordered by type (alphabetical within each type/group)
      //      - none of above, index order (default)
      const showRuleDependencies = (order = 'index') => {
        let str = 'RULE DEPENDENCIES(index:type:[group number:])\n';
        str += '=> refers to rule names\n';
        str += '<= referenced by rule names\n';
        if (!state.dependenciesComplete) {
          return str;
        }

        if (order.charCodeAt(0) === 97) {
          str += 'alphabetical by rule name\n';
          str += show(97);
        } else if (order.charCodeAt(0) === 116) {
          str += 'ordered by rule type\n';
          str += show(116);
        } else {
          str += 'ordered by rule index\n';
          str += show(null);
        }
        return str;
      };

      /* Destructuring assignment - see MDN Web Docs */
      return { ruleDependencies, showRuleDependencies };
    })();

    /* eslint-disable class-methods-use-this */

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    // Attributes Validation
    //
    // It is well known that recursive-descent parsers will fail if a rule is left recursive.
    // Besides left recursion, there are a couple of other fatal attributes that need to be disclosed as well.
    // There are several non-fatal attributes that are of interest also.
    // This module will determine six different attributes listed here with simple examples.
    //
    // **fatal attributes**<br>
    // left recursion<br>
    // S = S "x" / "y"
    //
    // cyclic<br>
    // S = S
    //
    // infinite<br>
    // S = "y" S
    //
    // **non-fatal attributes** (but nice to know)<br>
    // nested recursion<br>
    // S = "a" S "b" / "y"
    //
    // right recursion<br>
    // S = "x" S / "y"
    //
    // empty string<br>
    // S = "x" S / ""
    //
    // Note that these are “aggregate” attributes, in that if the attribute is true it only means that it can be true,
    // not that it will always be true for every input string.
    // In the simple examples above the attributes may be obvious and definite – always true or false.
    // However, for a large grammar with possibly hundreds of rules and parse tree branches,
    // it can be obscure which branches lead to which attributes.
    // Furthermore, different input strings will lead the parser down different branches.
    // One input string may parse perfectly while another will hit a left-recursive branch and bottom out the call stack.
    //
    // It is for this reason that the APG parser generator computes these attributes.
    // When using the API the attributes call is optional but generating a parser without checking the attributes - proceed at your own peril.
    //
    // Additionally, the attribute phase will identify rule dependencies and mutually-recursive groups. For example,
    //
    // S = "a" A "b" / "y"<br>
    // A = "x"
    //
    // S is dependent on A but A is not dependent on S.
    //
    // S = "a" A "b" / "c"<br>
    // A = "x" S "y" / "z"
    //
    // S and A are dependent on one another and are mutually recursive.
    var attributes = (function exportAttributes() {
      const id = identifiers;
      const { ruleAttributes: ruleAttributes$1, showAttributes, showAttributeErrors } = ruleAttributes;
      const { ruleDependencies: ruleDependencies$1, showRuleDependencies } = ruleDependencies;
      class State {
        constructor(rules, udts) {
          this.rules = rules;
          this.udts = udts;
          this.ruleCount = rules.length;
          this.udtCount = udts.length;
          this.startRule = 0;
          this.dependenciesComplete = false;
          this.attributesComplete = false;
          this.isMutuallyRecursive = false;
          this.ruleIndexes = this.indexArray(this.ruleCount);
          this.ruleAlphaIndexes = this.indexArray(this.ruleCount);
          this.ruleTypeIndexes = this.indexArray(this.ruleCount);
          this.udtIndexes = this.indexArray(this.udtCount);
          this.udtAlphaIndexes = this.indexArray(this.udtCount);
          this.attrsErrorCount = 0;
          this.attrs = [];
          this.attrsErrors = [];
          this.attrsWorking = [];
          this.ruleDeps = [];
          for (let i = 0; i < this.ruleCount; i += 1) {
            this.attrs.push(this.attrGen(this.rules[i]));
            this.attrsWorking.push(this.attrGen(this.rules[i]));
            this.ruleDeps.push(this.rdGen(rules[i], this.ruleCount, this.udtCount));
          }
          this.compRulesAlpha = this.compRulesAlpha.bind(this);
          this.compUdtsAlpha = this.compUdtsAlpha.bind(this);
          this.compRulesType = this.compRulesType.bind(this);
          this.compRulesGroup = this.compRulesGroup.bind(this);
        }

        // eslint-disable-next-line class-methods-use-this
        attrGen(rule) {
          return {
            left: false,
            nested: false,
            right: false,
            empty: false,
            finite: false,
            cyclic: false,
            leaf: false,
            isOpen: false,
            isComplete: false,
            rule,
          };
        }

        // eslint-disable-next-line class-methods-use-this
        attrInit(attr) {
          attr.left = false;
          attr.nested = false;
          attr.right = false;
          attr.empty = false;
          attr.finite = false;
          attr.cyclic = false;
          attr.leaf = false;
          attr.isOpen = false;
          attr.isComplete = false;
        }

        attrCopy(dst, src) {
          dst.left = src.left;
          dst.nested = src.nested;
          dst.right = src.right;
          dst.empty = src.empty;
          dst.finite = src.finite;
          dst.cyclic = src.cyclic;
          dst.leaf = src.leaf;
          dst.isOpen = src.isOpen;
          dst.isComplete = src.isComplete;
          dst.rule = src.rule;
        }

        rdGen(rule, ruleCount, udtCount) {
          const ret = {
            rule,
            recursiveType: id.ATTR_N,
            groupNumber: -1,
            refersTo: this.falseArray(ruleCount),
            refersToUdt: this.falseArray(udtCount),
            referencedBy: this.falseArray(ruleCount),
          };
          return ret;
        }

        typeToString(recursiveType) {
          switch (recursiveType) {
            case id.ATTR_N:
              return ' N';
            case id.ATTR_R:
              return ' R';
            case id.ATTR_MR:
              return 'MR';
            default:
              return 'UNKNOWN';
          }
        }

        falseArray(length) {
          const ret = [];
          if (length > 0) {
            for (let i = 0; i < length; i += 1) {
              ret.push(false);
            }
          }
          return ret;
        }

        falsifyArray(a) {
          for (let i = 0; i < a.length; i += 1) {
            a[i] = false;
          }
        }

        indexArray(length) {
          const ret = [];
          if (length > 0) {
            for (let i = 0; i < length; i += 1) {
              ret.push(i);
            }
          }
          return ret;
        }

        compRulesAlpha(left, right) {
          if (this.rules[left].lower < this.rules[right].lower) {
            return -1;
          }
          if (this.rules[left].lower > this.rules[right].lower) {
            return 1;
          }
          return 0;
        }

        compUdtsAlpha(left, right) {
          if (this.udts[left].lower < this.udts[right].lower) {
            return -1;
          }
          if (this.udts[left].lower > this.udts[right].lower) {
            return 1;
          }
          return 0;
        }

        compRulesType(left, right) {
          if (this.ruleDeps[left].recursiveType < this.ruleDeps[right].recursiveType) {
            return -1;
          }
          if (this.ruleDeps[left].recursiveType > this.ruleDeps[right].recursiveType) {
            return 1;
          }
          return 0;
        }

        compRulesGroup(left, right) {
          if (this.ruleDeps[left].recursiveType === id.ATTR_MR && this.ruleDeps[right].recursiveType === id.ATTR_MR) {
            if (this.ruleDeps[left].groupNumber < this.ruleDeps[right].groupNumber) {
              return -1;
            }
            if (this.ruleDeps[left].groupNumber > this.ruleDeps[right].groupNumber) {
              return 1;
            }
          }
          return 0;
        }
      }
      // eslint-disable-next-line no-unused-vars
      const attributes = function attributes(rules = [], udts = [], lineMap = [], errors = []) {
        // let i = 0;
        // Initialize the state. The state of the computation get passed around to multiple functions in multiple files.
        const state = new State(rules, udts);

        // Determine all rule dependencies
        //  - which rules each rule refers to
        //  - which rules reference each rule
        ruleDependencies$1(state);

        // Determine the attributes for each rule.
        ruleAttributes$1(state);
        if (state.attrsErrorCount) {
          errors.push({ line: 0, char: 0, msg: `${state.attrsErrorCount} attribute errors` });
        }

        // Return the number of attribute errors to the caller.
        return state.attrsErrorCount;
      };

      /* Destructuring assignment - see MDN Web Docs */
      return { attributes, showAttributes, showAttributeErrors, showRuleDependencies };
    })();

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */
    var showRules = (function exfn() {
      const thisFileName = 'show-rules.js';
      // Display the rules.
      // This function may be called before the attributes calculation.
      // Sorting is done independently from the attributes.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - none of above, index order (default)
      const showRules = function showRules(rulesIn = [], udtsIn = [], order = 'index') {
        const thisFuncName = 'showRules';
        let alphaArray = [];
        let udtAlphaArray = [];
        const indexArray = [];
        const udtIndexArray = [];
        const rules = rulesIn;
        const udts = udtsIn;
        const ruleCount = rulesIn.length;
        const udtCount = udtsIn.length;
        let str = 'RULE/UDT NAMES';
        let i;
        function compRulesAlpha(left, right) {
          if (rules[left].lower < rules[right].lower) {
            return -1;
          }
          if (rules[left].lower > rules[right].lower) {
            return 1;
          }
          return 0;
        }
        function compUdtsAlpha(left, right) {
          if (udts[left].lower < udts[right].lower) {
            return -1;
          }
          if (udts[left].lower > udts[right].lower) {
            return 1;
          }
          return 0;
        }
        if (!(Array.isArray(rulesIn) && rulesIn.length)) {
          throw new Error(`${thisFileName}:${thisFuncName}: rules arg must be array with length > 0`);
        }
        if (!Array.isArray(udtsIn)) {
          throw new Error(`${thisFileName}:${thisFuncName}: udts arg must be array`);
        }

        for (i = 0; i < ruleCount; i += 1) {
          indexArray.push(i);
        }
        alphaArray = indexArray.slice(0);
        alphaArray.sort(compRulesAlpha);
        if (udtCount) {
          for (i = 0; i < udtCount; i += 1) {
            udtIndexArray.push(i);
          }
          udtAlphaArray = udtIndexArray.slice(0);
          udtAlphaArray.sort(compUdtsAlpha);
        }
        if (order.charCodeAt(0) === 97) {
          str += ' - alphabetical by rule/UDT name\n';
          for (i = 0; i < ruleCount; i += 1) {
            str += `${i}: ${alphaArray[i]}: ${rules[alphaArray[i]].name}\n`;
          }
          if (udtCount) {
            for (i = 0; i < udtCount; i += 1) {
              str += `${i}: ${udtAlphaArray[i]}: ${udts[udtAlphaArray[i]].name}\n`;
            }
          }
        } else {
          str += ' - ordered by rule/UDT index\n';
          for (i = 0; i < ruleCount; i += 1) {
            str += `${i}: ${rules[i].name}\n`;
          }
          if (udtCount) {
            for (i = 0; i < udtCount; i += 1) {
              str += `${i}: ${udts[i].name}\n`;
            }
          }
        }
        return str;
      };
      return showRules;
    })();

    /*  *************************************************************************************
     *   copyright: Copyright (c) 2021 Lowell D. Thomas, all rights reserved
     *     license: BSD-2-Clause (https://opensource.org/licenses/BSD-2-Clause)
     *   ********************************************************************************* */

    // This module is Application Programming Interface (API) for **APG** - the ABNF Parser Generator.
    //
    // *Note on teminology.*
    // APG is a parser generator.
    // However, it really only generates a "grammar object" (see below) from the defining SABNF grammar.
    // The generated parser is incomplete at this stage.
    // Remaining, it is the job of the user to develop the generated parser from the grammar object and the **APG** Library (**apg-lib**).
    //
    // The following terminology my help clear up any confusion between the idea of a "generated parser" versus a "generated grammar object".

    // - The generating parser: **APG** is an **APG** parser (yes, there is a circular dependence between **apg-api** and **apg-lib**). We'll call it the generating parser.
    // - The target parser: **APG**'s goal is to generate a parser. We'll call it the target parser.
    // - The target grammar: this is the (ASCII) SABNF grammar defining the target parser.
    // - The target grammar object: **APG** parses the SABNF grammar and generates the JavaScript source for a target grammar object constructor function
    // and/or an actual grammar object.
    // - The final target parser: The user then develops the final target parser using the generated target grammar
    // object and the **APG** parsing library, **apg-lib**.
    // Throws execeptions on fatal errors.
    //
    // src: the input SABNF grammar<br>
    // may be one of:
    // - Buffer of bytes
    // - JavaScript string
    // - Array of integer character codes
    var api = function api(src) {
      const thisFileName = 'api.js: ';
      const thisObject = this;

      /* PRIVATE PROPERTIES */
      const apglib = nodeExports;
      const converter$1 = converter;
      const scanner$1 = scanner;
      const parser$1 = new (parser)();
      const { attributes: attributes$1, showAttributes, showAttributeErrors, showRuleDependencies } = attributes;
      const showRules$1 = showRules;

      /* PRIVATE MEMBERS (FUNCTIONS) */
      /* Convert a phrase (array of character codes) to HTML. */
      const abnfToHtml = function abnfToHtml(chars, beg, len) {
        const NORMAL = 0;
        const CONTROL = 1;
        const INVALID = 2;
        const CONTROL_BEG = `<span class="${apglib.style.CLASS_CTRLCHAR}">`;
        const CONTROL_END = '</span>';
        const INVALID_BEG = `<span class="${apglib.style.CLASS_NOMATCH}">`;
        const INVALID_END = '</span>';
        let end;
        let html = '';
        const TRUE = true;
        while (TRUE) {
          if (!Array.isArray(chars) || chars.length === 0) {
            break;
          }
          if (typeof beg !== 'number') {
            throw new Error('abnfToHtml: beg must be type number');
          }
          if (beg >= chars.length) {
            break;
          }
          if (typeof len !== 'number' || beg + len >= chars.length) {
            end = chars.length;
          } else {
            end = beg + len;
          }
          let state = NORMAL;
          for (let i = beg; i < end; i += 1) {
            const ch = chars[i];
            if (ch >= 32 && ch <= 126) {
              /* normal - printable ASCII characters */
              if (state === CONTROL) {
                html += CONTROL_END;
                state = NORMAL;
              } else if (state === INVALID) {
                html += INVALID_END;
                state = NORMAL;
              }
              /* handle reserved HTML entity characters */
              switch (ch) {
                case 32:
                  html += '&nbsp;';
                  break;
                case 60:
                  html += '&lt;';
                  break;
                case 62:
                  html += '&gt;';
                  break;
                case 38:
                  html += '&amp;';
                  break;
                case 34:
                  html += '&quot;';
                  break;
                case 39:
                  html += '&#039;';
                  break;
                case 92:
                  html += '&#092;';
                  break;
                default:
                  html += String.fromCharCode(ch);
                  break;
              }
            } else if (ch === 9 || ch === 10 || ch === 13) {
              /* control characters */
              if (state === NORMAL) {
                html += CONTROL_BEG;
                state = CONTROL;
              } else if (state === INVALID) {
                html += INVALID_END + CONTROL_BEG;
                state = CONTROL;
              }
              if (ch === 9) {
                html += 'TAB';
              }
              if (ch === 10) {
                html += 'LF';
              }
              if (ch === 13) {
                html += 'CR';
              }
            } else {
              /* invalid characters */
              if (state === NORMAL) {
                html += INVALID_BEG;
                state = INVALID;
              } else if (state === CONTROL) {
                html += CONTROL_END + INVALID_BEG;
                state = INVALID;
              }
              /* display character as hexadecimal value */
              html += `\\x${apglib.utils.charToHex(ch)}`;
            }
          }
          if (state === INVALID) {
            html += INVALID_END;
          }
          if (state === CONTROL) {
            html += CONTROL_END;
          }
          break;
        }
        return html;
      };
      /* Convert a phrase (array of character codes) to ASCII text. */
      const abnfToAscii = function abnfToAscii(chars, beg, len) {
        let str = '';
        for (let i = beg; i < beg + len; i += 1) {
          const ch = chars[i];
          if (ch >= 32 && ch <= 126) {
            str += String.fromCharCode(ch);
          } else {
            switch (ch) {
              case 9:
                str += '\\t';
                break;
              case 10:
                str += '\\n';
                break;
              case 13:
                str += '\\r';
                break;
              default:
                str += '\\unknown';
                break;
            }
          }
        }
        return str;
      };
      /* translate lines (SABNF grammar) to ASCII text */
      const linesToAscii = function linesToAscii(lines) {
        let str = 'Annotated Input Grammar';
        lines.forEach((val) => {
          str += '\n';
          str += `line no: ${val.lineNo}`;
          str += ` : char index: ${val.beginChar}`;
          str += ` : length: ${val.length}`;
          str += ` : abnf: ${abnfToAscii(thisObject.chars, val.beginChar, val.length)}`;
        });
        str += '\n';
        return str;
      };
      /* translate lines (SABNF grammar) to HTML */
      const linesToHtml = function linesToHtml(lines) {
        let html = '';
        html += `<table class="${apglib.style.CLASS_GRAMMAR}">\n`;
        const title = 'Annotated Input Grammar';
        html += `<caption>${title}</caption>\n`;
        html += '<tr>';
        html += '<th>line<br>no.</th><th>first<br>char</th><th><br>length</th><th><br>text</th>';
        html += '</tr>\n';
        lines.forEach((val) => {
          html += '<tr>';
          html += `<td>${val.lineNo}`;
          html += `</td><td>${val.beginChar}`;
          html += `</td><td>${val.length}`;
          html += `</td><td>${abnfToHtml(thisObject.chars, val.beginChar, val.length)}`;
          html += '</td>';
          html += '</tr>\n';
        });

        html += '</table>\n';
        return html;
      };
      /* Format the error messages to HTML, for page display. */
      const errorsToHtml = function errorsToHtml(errors, lines, chars, title) {
        const [style] = apglib;
        let html = '';
        const errorArrow = `<span class="${style.CLASS_NOMATCH}">&raquo;</span>`;
        html += `<p><table class="${style.CLASS_GRAMMAR}">\n`;
        if (title && typeof title === 'string') {
          html += `<caption>${title}</caption>\n`;
        }
        html += '<tr><th>line<br>no.</th><th>line<br>offset</th><th>error<br>offset</th><th><br>text</th></tr>\n';
        errors.forEach((val) => {
          let line;
          let relchar;
          let beg;
          let end;
          let text;
          let prefix = '';
          let suffix = '';
          if (lines.length === 0) {
            text = errorArrow;
            relchar = 0;
          } else {
            line = lines[val.line];
            beg = line.beginChar;
            if (val.char > beg) {
              prefix = abnfToHtml(chars, beg, val.char - beg);
            }
            beg = val.char;
            end = line.beginChar + line.length;
            if (beg < end) {
              suffix = abnfToHtml(chars, beg, end - beg);
            }
            text = prefix + errorArrow + suffix;
            relchar = val.char - line.beginChar;
            html += '<tr>';
            html += `<td>${val.line}</td><td>${line.beginChar}</td><td>${relchar}</td><td>${text}</td>`;
            html += '</tr>\n';
            html += '<tr>';
            html += `<td colspan="3"></td><td>&uarr;:&nbsp;${apglib.utils.stringToAsciiHtml(val.msg)}</td>`;
            html += '</tr>\n';
          }
        });
        html += '</table></p>\n';
        return html;
      };
      /* Display an array of errors in ASCII text */
      const errorsToAscii = function errorsToAscii(errors, lines, chars) {
        let str;
        let line;
        let beg;
        let len;
        str = '';
        errors.forEach((error) => {
          line = lines[error.line];
          str += `${line.lineNo}: `;
          str += `${line.beginChar}: `;
          str += `${error.char - line.beginChar}: `;
          beg = line.beginChar;
          len = error.char - line.beginChar;
          str += abnfToAscii(chars, beg, len);
          str += ' >> ';
          beg = error.char;
          len = line.beginChar + line.length - error.char;
          str += abnfToAscii(chars, beg, len);
          str += '\n';
          str += `${line.lineNo}: `;
          str += `${line.beginChar}: `;
          str += `${error.char - line.beginChar}: `;
          str += 'error: ';
          str += error.msg;
          str += '\n';
        });
        return str;
      };
      let isScanned = false;
      let isParsed = false;
      let isTranslated = false;
      let haveAttributes = false;
      let attributeErrors = 0;
      let lineMap;

      /* PUBLIC PROPERTIES */
      // The input SABNF grammar as a JavaScript string.
      // this.sabnf;
      // The input SABNF grammar as an array of character codes.
      // this.chars;
      // An array of line objects, defining each line of the input SABNF grammar
      // - lineNo : the zero-based line number
      // - beginChar : offset (into `this.chars`) of the first character in the line
      // - length : the number of characters in the line
      // - textLength : the number of characters of text in the line, excluding the line ending characters
      // - endType : "CRLF", "LF", "CR" or "none" if the last line has no line ending characters
      // - invalidChars : `true` if the line contains invalid characters, `false` otherwise
      // this.lines;
      // An array of rule names and data.
      // - name : the rule name
      // - lower : the rule name in lower case
      // - index : the index of the rule (ordered by appearance in SABNF grammar)
      // - isBkr : `true` if this rule has been back referenced, `false` otherwise
      // - opcodes : array of opcodes for this rule
      // - attrs : the rule attributes
      // - ctrl : system data
      // this.rules;
      // An array of UDT names and data.
      // this.udts;
      // An array of errors, if any.
      // - line : the line number containing the error
      // - char : the character offset of the error
      // - msg : the error message
      this.errors = [];

      /* CONSTRUCTOR */
      if (Buffer.isBuffer(src)) {
        this.chars = converter$1.decode('BINARY', src);
      } else if (Array.isArray(src)) {
        this.chars = src.slice();
      } else if (typeof src === 'string') {
        this.chars = converter$1.decode('STRING', src);
      } else {
        throw new Error(`${thisFileName}input source is not a string, byte Buffer or character array`);
      }
      this.sabnf = converter$1.encode('STRING', this.chars);

      /* PUBLIC MEMBERS (FUNCTIONS) */
      // Scan the input SABNF grammar for invalid characters and catalog the lines via `this.lines`.
      // - strict : (optional) if `true`, all lines, including the last must end with CRLF (\r\n),
      // if `false` (in any JavaScript sense) then line endings may be any mix of CRLF, LF, CR, or end-of-file.
      // - trace (*) : (optional) a parser trace object, which will trace the parser that does the scan
      this.scan = function scan(strict, trace) {
        this.lines = scanner$1(this.chars, this.errors, strict, trace);
        isScanned = true;
      };
      // Parse the input SABNF grammar for correct syntax.
      // - strict : (optional) if `true`, the input grammar must be strict ABNF, conforming to [RFC 5234](https://tools.ietf.org/html/rfc5234)
      // and [RFC 7405](https://tools.ietf.org/html/rfc7405). No superset features allowed.
      // - trace (\*) : (optional) a parser trace object, which will trace the syntax parser
      //
      // <i>(*)NOTE: the trace option was used primarily during development.
      // Error detection and reporting is now fairly robust and tracing should be unnecessary. Use at your own peril.</i>
      this.parse = function parse(strict, trace) {
        if (!isScanned) {
          throw new Error(`${thisFileName}grammar not scanned`);
        }
        parser$1.syntax(this.chars, this.lines, this.errors, strict, trace);
        isParsed = true;
      };
      // Translate the SABNF grammar syntax into the opcodes that will guide the parser for this grammar.
      this.translate = function translate() {
        if (!isParsed) {
          throw new Error(`${thisFileName}grammar not scanned and parsed`);
        }
        const ret = parser$1.semantic(this.chars, this.lines, this.errors);
        if (this.errors.length === 0) {
          this.rules = ret.rules;
          this.udts = ret.udts;
          lineMap = ret.lineMap;
          isTranslated = true;
        }
      };
      // Compute the attributes of each rule.
      this.attributes = function attrs() {
        if (!isTranslated) {
          throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);
        }
        attributeErrors = attributes$1(this.rules, this.udts, lineMap, this.errors);
        haveAttributes = true;
        return attributeErrors;
      };
      // This function will perform the full suite of steps required to generate a parser grammar object
      // from the input SABNF grammar.
      this.generate = function generate(strict) {
        this.lines = scanner$1(this.chars, this.errors, strict);
        if (this.errors.length) {
          return;
        }
        parser$1.syntax(this.chars, this.lines, this.errors, strict);
        if (this.errors.length) {
          return;
        }
        const ret = parser$1.semantic(this.chars, this.lines, this.errors);
        if (this.errors.length) {
          return;
        }
        this.rules = ret.rules;
        this.udts = ret.udts;
        lineMap = ret.lineMap;

        attributeErrors = attributes$1(this.rules, this.udts, lineMap, this.errors);
        haveAttributes = true;
      };
      // Display the rules.
      // Must scan, parse and translate before calling this function, otherwise there are no rules to display.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - none of above, index order (default)
      this.displayRules = function displayRules(order = 'index') {
        if (!isTranslated) {
          throw new Error(`${thisFileName}grammar not scanned, parsed and translated`);
        }
        return showRules$1(this.rules, this.udts, order);
      };
      // Display the rule dependencies.
      // Must scan, parse, translate and compute attributes before calling this function.
      // Otherwise the rule dependencies are not known.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - "type" or "t", ordered by type (alphabetical within each type/group)
      //      - none of above, index order (default)
      this.displayRuleDependencies = function displayRuleDependencies(order = 'index') {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        return showRuleDependencies(order);
      };
      // Display the attributes.
      // Must scan, parse, translate and compute attributes before calling this function.
      // - order
      //      - "index" or "i", index order (default)
      //      - "alpha" or "a", alphabetical order
      //      - "type" or "t", ordered by type (alphabetical within each type/group)
      //      - none of above, type order (default)
      this.displayAttributes = function displayAttributes(order = 'index') {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          showAttributeErrors(order);
        }
        return showAttributes(order);
      };
      this.displayAttributeErrors = function displayAttributeErrors() {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}no attributes - must be preceeded by call to attributes()`);
        }
        return showAttributeErrors();
      };
      // Returns a parser grammar object constructor function as a JavaScript string.
      // This object can then be used to construct a parser.
      this.toSource = function toSource(name) {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);
        }
        return parser$1.generateSource(this.chars, this.lines, this.rules, this.udts, name);
      };
      // Returns a parser grammar object.
      // This grammar object may be used by the application to construct a parser.
      this.toObject = function toObject() {
        if (!haveAttributes) {
          throw new Error(`${thisFileName}can't generate parser source - must be preceeded by call to attributes()`);
        }
        if (attributeErrors) {
          throw new Error(`${thisFileName}can't generate parser source - attributes have ${attributeErrors} errors`);
        }
        return parser$1.generateObject(this.sabnf, this.rules, this.udts);
      };
      // Display errors in text format, suitable for `console.log()`.
      this.errorsToAscii = function errorsToAsciiFunc() {
        return errorsToAscii(this.errors, this.lines, this.chars);
      };
      // Display errors in HTML format, suitable for web page display.
      // (`apg-lib.css` required for proper styling)
      this.errorsToHtml = function errorsToHtmlFunc(title) {
        return errorsToHtml(this.errors, this.lines, this.chars, title);
      };
      // Generate an annotated the SABNF grammar display in text format.
      this.linesToAscii = function linesToAsciiFunc() {
        return linesToAscii(this.lines);
      };
      // Generate an annotated the SABNF grammar display in HTML format.
      // (`apg-lib.css` required for proper styling)
      this.linesToHtml = function linesToHtmlFunc() {
        return linesToHtml(this.lines);
      };
      // This function was only used by apg.html which has been abandoned.
      /*
        this.getAttributesObject = function () {
            return null;
        };
        */
    };

    var abnf = createCommonjsModule$1(function (module, exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsedMessage = void 0;
    const api_1 = __importDefault(api);
    const node_exports_1 = __importDefault(nodeExports);
    const GRAMMAR = `
sign-in-with-ethereum =
    domain %s" wants you to sign in with your Ethereum account:" LF
    address LF
    LF
    [ statement LF ]
    LF
    %s"URI: " URI LF
    %s"Version: " version LF
    %s"Chain ID: " chain-id LF
    %s"Nonce: " nonce LF
    %s"Issued At: " issued-at
    [ LF %s"Expiration Time: " expiration-time ]
    [ LF %s"Not Before: " not-before ]
    [ LF %s"Request ID: " request-id ]
    [ LF %s"Resources:"
    resources ]

domain = authority

address = "0x" 40*40HEXDIG
    ; Must also conform to captilization
    ; checksum encoding specified in EIP-55
    ; where applicable (EOAs).

statement = 1*( reserved / unreserved / " " )
    ; The purpose is to exclude LF (line breaks).

version = "1"

nonce = 8*( ALPHA / DIGIT )

issued-at = date-time
expiration-time = date-time
not-before = date-time

request-id = *pchar

chain-id = 1*DIGIT
    ; See EIP-155 for valid CHAIN_IDs.

resources = *( LF resource )

resource = "- " URI

; ------------------------------------------------------------------------------
; RFC 3986

URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

hier-part     = "//" authority path-abempty
              / path-absolute
              / path-rootless
              / path-empty

scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

authority     = [ userinfo "@" ] host [ ":" port ]
userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
host          = IP-literal / IPv4address / reg-name
port          = *DIGIT

IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"

IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )

IPv6address   =                            6( h16 ":" ) ls32
              /                       "::" 5( h16 ":" ) ls32
              / [               h16 ] "::" 4( h16 ":" ) ls32
              / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
              / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
              / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
              / [ *4( h16 ":" ) h16 ] "::"              ls32
              / [ *5( h16 ":" ) h16 ] "::"              h16
              / [ *6( h16 ":" ) h16 ] "::"

h16           = 1*4HEXDIG
ls32          = ( h16 ":" h16 ) / IPv4address
IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet     = DIGIT                 ; 0-9
                 / %x31-39 DIGIT         ; 10-99
                 / "1" 2DIGIT            ; 100-199
                 / "2" %x30-34 DIGIT     ; 200-249
                 / "25" %x30-35          ; 250-255

reg-name      = *( unreserved / pct-encoded / sub-delims )

path-abempty  = *( "/" segment )
path-absolute = "/" [ segment-nz *( "/" segment ) ]
path-rootless = segment-nz *( "/" segment )
path-empty    = 0pchar

segment       = *pchar
segment-nz    = 1*pchar

pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

query         = *( pchar / "/" / "?" )

fragment      = *( pchar / "/" / "?" )

pct-encoded   = "%" HEXDIG HEXDIG

unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
reserved      = gen-delims / sub-delims
gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
              / "*" / "+" / "," / ";" / "="

; ------------------------------------------------------------------------------
; RFC 3339

date-fullyear   = 4DIGIT
date-month      = 2DIGIT  ; 01-12
date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on
                          ; month/year
time-hour       = 2DIGIT  ; 00-23
time-minute     = 2DIGIT  ; 00-59
time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second
                          ; rules
time-secfrac    = "." 1*DIGIT
time-numoffset  = ("+" / "-") time-hour ":" time-minute
time-offset     = "Z" / time-numoffset

partial-time    = time-hour ":" time-minute ":" time-second
                  [time-secfrac]
full-date       = date-fullyear "-" date-month "-" date-mday
full-time       = partial-time time-offset

date-time       = full-date "T" full-time

; ------------------------------------------------------------------------------
; RFC 5234

ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z
LF             =  %x0A
                  ; linefeed
DIGIT          =  %x30-39
                  ; 0-9
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
`;
    class ParsedMessage {
        constructor(msg) {
            const api = new api_1.default(GRAMMAR);
            api.generate();
            if (api.errors.length) {
                console.error(api.errorsToAscii());
                console.error(api.linesToAscii());
                console.log(api.displayAttributeErrors());
                throw new Error(`ABNF grammar has errors`);
            }
            const grammarObj = api.toObject();
            const parser = new node_exports_1.default.parser();
            parser.ast = new node_exports_1.default.ast();
            const id = node_exports_1.default.ids;
            const domain = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.domain = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks.domain = domain;
            const address = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.address = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks.address = address;
            const statement = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.statement = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks.statement = statement;
            const uri = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    if (!data.uri) {
                        data.uri = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                    }
                }
                return ret;
            };
            parser.ast.callbacks.uri = uri;
            const version = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.version = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks.version = version;
            const chainId = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.chainId = parseInt(node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength));
                }
                return ret;
            };
            parser.ast.callbacks['chain-id'] = chainId;
            const nonce = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.nonce = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks.nonce = nonce;
            const issuedAt = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.issuedAt = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks['issued-at'] = issuedAt;
            const expirationTime = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.expirationTime = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks['expiration-time'] = expirationTime;
            const notBefore = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.notBefore = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks['not-before'] = notBefore;
            const requestId = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.requestId = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);
                }
                return ret;
            };
            parser.ast.callbacks['request-id'] = requestId;
            const resources = function (state, chars, phraseIndex, phraseLength, data) {
                const ret = id.SEM_OK;
                if (state === id.SEM_PRE) {
                    data.resources = node_exports_1.default.utils
                        .charsToString(chars, phraseIndex, phraseLength)
                        .slice(3)
                        .split('\n- ');
                }
                return ret;
            };
            parser.ast.callbacks.resources = resources;
            const result = parser.parse(grammarObj, 'sign-in-with-ethereum', msg);
            if (!result.success) {
                throw new Error(`Invalid message: ${JSON.stringify(result)}`);
            }
            const elements = {};
            parser.ast.translate(elements);
            for (const [key, value] of Object.entries(elements)) {
                this[key] = value;
            }
        }
    }
    exports.ParsedMessage = ParsedMessage;
    });

    var regex = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsedMessage = void 0;
    const DOMAIN = '(?<domain>([^?#]*)) wants you to sign in with your Ethereum account:';
    const ADDRESS = '\\n(?<address>0x[a-zA-Z0-9]{40})\\n\\n';
    const STATEMENT = '((?<statement>[^\\n]+)\\n)?';
    const URI = '(([^:?#]+):)?(([^?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))';
    const URI_LINE = `\\nURI: (?<uri>${URI}?)`;
    const VERSION = '\\nVersion: (?<version>1)';
    const CHAIN_ID = '\\nChain ID: (?<chainId>[0-9]+)';
    const NONCE = '\\nNonce: (?<nonce>[a-zA-Z0-9]{8,})';
    const DATETIME = `([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(([Zz])|([\+|\-]([01][0-9]|2[0-3]):[0-5][0-9]))`;
    const ISSUED_AT = `\\nIssued At: (?<issuedAt>${DATETIME})`;
    const EXPIRATION_TIME = `(\\nExpiration Time: (?<expirationTime>${DATETIME}))?`;
    const NOT_BEFORE = `(\\nNot Before: (?<notBefore>${DATETIME}))?`;
    const REQUEST_ID = "(\\nRequest ID: (?<requestId>[-._~!$&'()*+,;=:@%a-zA-Z0-9]*))?";
    const RESOURCES = `(\\nResources:(?<resources>(\\n- ${URI}?)+))?`;
    const MESSAGE = `^${DOMAIN}${ADDRESS}${STATEMENT}${URI_LINE}${VERSION}${CHAIN_ID}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${RESOURCES}$`;
    class ParsedMessage {
        constructor(msg) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            const REGEX = new RegExp(MESSAGE, 'g');
            let match = REGEX.exec(msg);
            if (!match) {
                throw new Error('Message did not match the regular expression.');
            }
            this.match = match;
            this.domain = (_a = match === null || match === void 0 ? void 0 : match.groups) === null || _a === void 0 ? void 0 : _a.domain;
            this.address = (_b = match === null || match === void 0 ? void 0 : match.groups) === null || _b === void 0 ? void 0 : _b.address;
            this.statement = (_c = match === null || match === void 0 ? void 0 : match.groups) === null || _c === void 0 ? void 0 : _c.statement;
            this.uri = (_d = match === null || match === void 0 ? void 0 : match.groups) === null || _d === void 0 ? void 0 : _d.uri;
            this.version = (_e = match === null || match === void 0 ? void 0 : match.groups) === null || _e === void 0 ? void 0 : _e.version;
            this.nonce = (_f = match === null || match === void 0 ? void 0 : match.groups) === null || _f === void 0 ? void 0 : _f.nonce;
            this.chainId = parseInt((_g = match === null || match === void 0 ? void 0 : match.groups) === null || _g === void 0 ? void 0 : _g.chainId);
            this.issuedAt = (_h = match === null || match === void 0 ? void 0 : match.groups) === null || _h === void 0 ? void 0 : _h.issuedAt;
            this.expirationTime = (_j = match === null || match === void 0 ? void 0 : match.groups) === null || _j === void 0 ? void 0 : _j.expirationTime;
            this.notBefore = (_k = match === null || match === void 0 ? void 0 : match.groups) === null || _k === void 0 ? void 0 : _k.notBefore;
            this.requestId = (_l = match === null || match === void 0 ? void 0 : match.groups) === null || _l === void 0 ? void 0 : _l.requestId;
            this.resources = (_o = (_m = match === null || match === void 0 ? void 0 : match.groups) === null || _m === void 0 ? void 0 : _m.resources) === null || _o === void 0 ? void 0 : _o.split('\n- ').slice(1);
        }
    }
    exports.ParsedMessage = ParsedMessage;
    });

    var parsers = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ParsedMessageRegExp = exports.ParsedMessage = void 0;

    Object.defineProperty(exports, "ParsedMessage", { enumerable: true, get: function () { return abnf.ParsedMessage; } });

    Object.defineProperty(exports, "ParsedMessageRegExp", { enumerable: true, get: function () { return regex.ParsedMessage; } });
    });

    var client = createCommonjsModule$1(function (module, exports) {
    var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateNonce = exports.checkContractWalletSignature = exports.SiweMessage = exports.SignatureType = exports.ErrorTypes = void 0;

    // TODO: Figure out how to get types from this lib:


    /**
     * Possible message error types.
     */
    var ErrorTypes;
    (function (ErrorTypes) {
        /**Thrown when the `validate()` function can verify the message. */
        ErrorTypes["INVALID_SIGNATURE"] = "Invalid signature.";
        /**Thrown when the `expirationTime` is present and in the past. */
        ErrorTypes["EXPIRED_MESSAGE"] = "Expired message.";
        /**Thrown when some required field is missing. */
        ErrorTypes["MALFORMED_SESSION"] = "Malformed session.";
    })(ErrorTypes = exports.ErrorTypes || (exports.ErrorTypes = {}));
    (function (SignatureType) {
        /**EIP-191 signature scheme */
        SignatureType["PERSONAL_SIGNATURE"] = "Personal signature";
    })(exports.SignatureType || (exports.SignatureType = {}));
    class SiweMessage {
        /**
         * Creates a parsed Sign-In with Ethereum Message (EIP-4361) object from a
         * string or an object. If a string is used an ABNF parser is called to
         * validate the parameter, otherwise the fields are attributed.
         * @param param {string | SiweMessage} Sign message as a string or an object.
         */
        constructor(param) {
            if (typeof param === 'string') {
                const parsedMessage = new parsers.ParsedMessage(param);
                this.domain = parsedMessage.domain;
                this.address = parsedMessage.address;
                this.statement = parsedMessage.statement;
                this.uri = parsedMessage.uri;
                this.version = parsedMessage.version;
                this.nonce = parsedMessage.nonce;
                this.issuedAt = parsedMessage.issuedAt;
                this.expirationTime = parsedMessage.expirationTime;
                this.notBefore = parsedMessage.notBefore;
                this.requestId = parsedMessage.requestId;
                this.chainId = parsedMessage.chainId;
                this.resources = parsedMessage.resources;
            }
            else {
                Object.assign(this, param);
                if (typeof this.chainId === 'string') {
                    this.chainId = parseInt(this.chainId);
                }
            }
        }
        /**
         * Given a sign message (EIP-4361) returns the correct matching groups.
         * @param message {string}
         * @returns {RegExpExecArray} The matching groups for the message
         */
        regexFromMessage(message) {
            const parsedMessage = new parsers.ParsedMessageRegExp(message);
            return parsedMessage.match;
        }
        /**
         * This function can be used to retrieve an EIP-4361 formated message for
         * signature, although you can call it directly it's advised to use
         * [signMessage()] instead which will resolve to the correct method based
         * on the [type] attribute of this object, in case of other formats being
         * implemented.
         * @returns {string} EIP-4361 formated message, ready for EIP-191 signing.
         */
        toMessage() {
            const header = `${this.domain} wants you to sign in with your Ethereum account:`;
            const uriField = `URI: ${this.uri}`;
            let prefix = [header, this.address].join('\n');
            const versionField = `Version: ${this.version}`;
            if (!this.nonce) {
                this.nonce = (0, exports.generateNonce)();
            }
            const chainField = `Chain ID: ` + this.chainId || '1';
            const nonceField = `Nonce: ${this.nonce}`;
            const suffixArray = [uriField, versionField, chainField, nonceField];
            if (this.issuedAt) {
                Date.parse(this.issuedAt);
            }
            this.issuedAt = this.issuedAt
                ? this.issuedAt
                : new Date().toISOString();
            suffixArray.push(`Issued At: ${this.issuedAt}`);
            if (this.expirationTime) {
                const expiryField = `Expiration Time: ${this.expirationTime}`;
                suffixArray.push(expiryField);
            }
            if (this.notBefore) {
                suffixArray.push(`Not Before: ${this.notBefore}`);
            }
            if (this.requestId) {
                suffixArray.push(`Request ID: ${this.requestId}`);
            }
            if (this.resources) {
                suffixArray.push([`Resources:`, ...this.resources.map((x) => `- ${x}`)].join('\n'));
            }
            let suffix = suffixArray.join('\n');
            prefix = [prefix, this.statement].join('\n\n');
            if (this.statement) {
                prefix += '\n';
            }
            return [prefix, suffix].join('\n');
        }
        /** @deprecated
         * signMessage method is deprecated, use prepareMessage instead.
         *
         * This method parses all the fields in the object and creates a sign
         * message according with the type defined.
         * @returns {string} Returns a message ready to be signed according with the
         * type defined in the object.
         */
        signMessage() {
            console &&
                console.warn &&
                console.warn('signMessage method is deprecated, use prepareMessage instead.');
            return this.prepareMessage();
        }
        /**
         * This method parses all the fields in the object and creates a sign
         * message according with the type defined.
         * @returns {string} Returns a message ready to be signed according with the
         * type defined in the object.
         */
        prepareMessage() {
            let message;
            switch (this.version) {
                case '1': {
                    message = this.toMessage();
                    break;
                }
                default: {
                    message = this.toMessage();
                    break;
                }
            }
            return message;
        }
        /**
         * Validates the integrity of the fields of this objects by matching it's
         * signature.
         * @param provider A Web3 provider able to perform a contract check, this is
         * required if support for Smart Contract Wallets that implement EIP-1271 is
         * needed.
         * @returns {Promise<SiweMessage>} This object if valid.
         */
        validate(signature = this.signature, provider) {
            return __awaiter(this, void 0, void 0, function* () {
                return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                    const message = this.prepareMessage();
                    try {
                        let missing = [];
                        if (!message) {
                            missing.push('`message`');
                        }
                        if (!signature) {
                            missing.push('`signature`');
                        }
                        if (!this.address) {
                            missing.push('`address`');
                        }
                        if (missing.length > 0) {
                            throw new Error(`${ErrorTypes.MALFORMED_SESSION} missing: ${missing.join(', ')}.`);
                        }
                        let addr;
                        try {
                            addr = ethers_1.ethers.utils.verifyMessage(message, signature);
                        }
                        catch (_) { }
                        finally {
                            if (addr !== this.address) {
                                try {
                                    //EIP-1271
                                    const isValidSignature = yield (0, exports.checkContractWalletSignature)(this, signature, provider);
                                    if (!isValidSignature) {
                                        throw new Error(`${ErrorTypes.INVALID_SIGNATURE}: ${addr} !== ${this.address}`);
                                    }
                                }
                                catch (e) {
                                    throw e;
                                }
                            }
                        }
                        const parsedMessage = new SiweMessage(message);
                        if (parsedMessage.expirationTime) {
                            const exp = new Date(parsedMessage.expirationTime).getTime();
                            if (isNaN(exp)) {
                                throw new Error(`${ErrorTypes.MALFORMED_SESSION} invalid expiration date.`);
                            }
                            if (new Date().getTime() >= exp) {
                                throw new Error(ErrorTypes.EXPIRED_MESSAGE);
                            }
                        }
                        resolve(parsedMessage);
                    }
                    catch (e) {
                        reject(e);
                    }
                }));
            });
        }
    }
    exports.SiweMessage = SiweMessage;
    /**
     * This method calls the EIP-1271 method for Smart Contract wallets
     * @param message The EIP-4361 parsed message
     * @param provider Web3 provider able to perform a contract check (Web3/EthersJS).
     * @returns {Promise<boolean>} Checks for the smart contract (if it exists) if
     * the signature is valid for given address.
     */
    const checkContractWalletSignature = (message, signature, provider) => __awaiter(void 0, void 0, void 0, function* () {
        if (!provider) {
            return false;
        }
        const abi = [
            'function isValidSignature(bytes32 _message, bytes _signature) public view returns (bool)',
        ];
        try {
            const walletContract = new ethers_1.Contract(message.address, abi, provider);
            const hashMessage = ethers_1.utils.hashMessage(message.signMessage());
            return yield walletContract.isValidSignature(hashMessage, signature);
        }
        catch (e) {
            throw e;
        }
    });
    exports.checkContractWalletSignature = checkContractWalletSignature;
    /**
     * This method leverages a native CSPRNG with support for both browser and Node.js
     * environments in order generate a cryptographically secure nonce for use in the
     * SiweMessage in order to prevent replay attacks.
     *
     * 96 bits has been chosen as a number to sufficiently balance size and security considerations
     * relative to the lifespan of it's usage.
     *
     * @returns cryptographically generated random nonce with 96 bits of entropy encoded with
     * an alphanumeric character set.
     */
    const generateNonce = () => {
        return (0, random.randomStringForEntropy)(96);
    };
    exports.generateNonce = generateNonce;
    });

    var siwe$1 = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(client, exports);
    });

    var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    // Utilities and constants
    const { stringify } = JSON;
    /**
     * Create a JWS.
     * @param signer The signer. Any object that satisfies the Signer interface. Used to sign the message for the token
     * @param params Options that are passed directly to SiweMessage.
     * @returns A Promise that resolves to the full JWS string.
     */
    function createToken(signer, params) {
        return __awaiter$6(this, void 0, void 0, function* () {
            // Creates the message object
            const message = new siwe$1.SiweMessage(Object.assign(Object.assign({ 
                // TODO: Validator doesn't make use of the nonce ATM
                nonce: siwe$1.generateNonce(), domain: "Tableland" }, params), { address: yield signer.getAddress() }));
            const messageText = message.toMessage();
            /**
             * Generates the message to be signed and uses the provider to ask for a signature
             */
            const signature = yield signer.signMessage(message.prepareMessage());
            const token = btoa$1(stringify({
                message: messageText,
                signature: signature,
            }));
            return { token: token };
        });
    }
    function userCreatesToken(signer, chainId) {
        var _a;
        return __awaiter$6(this, void 0, void 0, function* () {
            const now = Date.now();
            const exp = new Date(now + 10 * 60 * 60 * 1000).toISOString(); // Default to ~10 hours
            return yield createToken(signer, {
                chainId: chainId,
                expirationTime: exp,
                uri: (_a = globalThis.document) === null || _a === void 0 ? void 0 : _a.location.origin,
                version: "1",
                statement: "Official Tableland SDK",
            });
        });
    }

    var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function siwe() {
        return __awaiter$5(this, void 0, void 0, function* () {
            // calling this ensures that we have a signer
            yield checkNetwork.call(this);
            this.token = yield userCreatesToken(this.signer, this.options.chainId);
            return this.token;
        });
    }

    var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Set the Controller contract on a table
     * @returns {string} A Promise that resolves to ???.
     */
    function setController(controller, name) {
        return __awaiter$4(this, void 0, void 0, function* () {
            const tableId = name.trim().split("_").pop();
            if (typeof tableId !== "string")
                throw new Error("malformed tablename");
            if (this.options.rpcRelay) {
                // Note that since tablelandCalls all use the token, the networks are matched during token creation
                return yield setController$2.call(this, tableId, controller);
            }
            // We check the wallet and tableland chains match here again in
            // case the user switched networks after creating a siwe token
            yield checkNetwork.call(this);
            const tableIdInt = parseInt(tableId, 10);
            if (isNaN(tableIdInt))
                throw new Error("invalid tableId was provided");
            const txn = yield setController$1.call(this, tableIdInt, controller);
            // match the response schema from the relay
            return { hash: txn.transactionHash };
        });
    }

    var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Set the Controller contract on a table
     * @returns {string} A Promise that resolves to ???.
     */
    function getController(tableName) {
        return __awaiter$3(this, void 0, void 0, function* () {
            const tableId = tableName.trim().split("_").pop();
            if (typeof tableId !== "string")
                throw new Error("malformed tablename");
            const tableIdInt = parseInt(tableId, 10);
            if (isNaN(tableIdInt))
                throw new Error("invalid tableId was provided");
            return yield getController$1.call(this, tableIdInt);
        });
    }

    var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    /**
     * Set the Controller contract on a table
     * @returns {string} A Promise that resolves to ???.
     */
    function lockController(tableName) {
        return __awaiter$2(this, void 0, void 0, function* () {
            const tableId = tableName.trim().split("_").pop();
            if (typeof tableId !== "string")
                throw new Error("invalid tablename");
            const tableIdInt = parseInt(tableId, 10);
            if (isNaN(tableIdInt))
                throw new Error("invalid tablename");
            // We check the wallet and tableland chains match here again in
            // case the user switched networks after creating a siwe token
            yield checkNetwork.call(this);
            const txn = yield lockController$1.call(this, tableIdInt);
            // match the response schema from the relay
            return { hash: txn.transactionHash };
        });
    }

    var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function schema(tableName) {
        return __awaiter$1(this, void 0, void 0, function* () {
            const res = yield fetch(`${this.options.host}/schema/${tableName}`).then((r) => r.json());
            return res;
        });
    }

    var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function structure(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield fetch(`${this.options.host}/chain/${this.options.chainId}/tables/structure/${hash}`).then((r) => r.json());
            return res;
        });
    }

    /**
     * Create client connection with Tableland, EVM, and Gateway.
     * @param options Options to control client connection.
     * @returns Promise that resolves to a Connection object.
     */
    function connect(options) {
        var _a, _b, _c, _d, _e;
        const network = (_a = options.network) !== null && _a !== void 0 ? _a : "testnet";
        const chain = (_b = options.chain) !== null && _b !== void 0 ? _b : "ethereum-goerli";
        if (network === "custom" && !options.host) {
            throw new Error('`host` must be provided if using "custom" network');
        }
        if (!["testnet", "staging", "custom"].includes(network)) {
            throw new Error("unsupported network specified");
        }
        const signer = options.signer;
        const info = SUPPORTED_CHAINS[chain];
        if (!info && !options.chainId) {
            throw new Error("unsupported chain information. See `SUPPORTED_CHAINS` for options");
        }
        const host = (_c = options.host) !== null && _c !== void 0 ? _c : info.host;
        const chainId = (_d = options.chainId) !== null && _d !== void 0 ? _d : info.chainId;
        // We can override the contract address here for any supported network
        const contract = (_e = options.contract) !== null && _e !== void 0 ? _e : info.contract;
        // Enable specifying rpcRelay, otherwise use the SUPPORTED_CHAINS value
        const rpcRelay = typeof options.rpcRelay === "boolean" ? options.rpcRelay : info.rpcRelay;
        // If a token was provided, we cache it
        const token = options.token;
        const connectionObject = {
            token,
            signer,
            options: {
                rpcRelay,
                network,
                host,
                chain,
                chainId,
                contract,
            },
            get list() {
                return list;
            },
            get read() {
                return read;
            },
            get write() {
                return write;
            },
            get create() {
                return create;
            },
            get hash() {
                return hash;
            },
            get receipt() {
                return receipt;
            },
            get siwe() {
                return siwe;
            },
            get setController() {
                return setController;
            },
            get getController() {
                return getController;
            },
            get lockController() {
                return lockController;
            },
            get validate() {
                return validateWriteQuery;
            },
            get waitConfirm() {
                return waitConfirm;
            },
            get schema() {
                return schema;
            },
            get structure() {
                return structure;
            },
        };
        return connectionObject;
    }

    var _format = "hh-sol-artifact-1";
    var contractName = "ChessToken";
    var sourceName = "contracts/ChessToken.sol";
    var abi = [
    	{
    		inputs: [
    			{
    				internalType: "string",
    				name: "baseURI",
    				type: "string"
    			},
    			{
    				internalType: "address",
    				name: "registry",
    				type: "address"
    			}
    		],
    		stateMutability: "nonpayable",
    		type: "constructor"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "approved",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Approval",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				indexed: false,
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "ApprovalForAll",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "previousOwner",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "OwnershipTransferred",
    		type: "event"
    	},
    	{
    		anonymous: false,
    		inputs: [
    			{
    				indexed: true,
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				indexed: true,
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "Transfer",
    		type: "event"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "approve",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			}
    		],
    		name: "balanceOf",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "concede",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "getApproved",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "getGame",
    		outputs: [
    			{
    				components: [
    					{
    						internalType: "address",
    						name: "player1",
    						type: "address"
    					},
    					{
    						internalType: "address",
    						name: "player2",
    						type: "address"
    					},
    					{
    						internalType: "address payable",
    						name: "winner",
    						type: "address"
    					},
    					{
    						internalType: "uint256",
    						name: "bounty",
    						type: "uint256"
    					}
    				],
    				internalType: "struct ChessToken.Game",
    				name: "",
    				type: "tuple"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "getMetadataTableId",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "getMovesTableId",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "player",
    				type: "address"
    			}
    		],
    		name: "getPlayerGames",
    		outputs: [
    			{
    				internalType: "uint256[]",
    				name: "",
    				type: "uint256[]"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "initCreate",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "policyAddress",
    				type: "address"
    			}
    		],
    		name: "initSetController",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			}
    		],
    		name: "isApprovedForAll",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "player1",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "player2",
    				type: "address"
    			}
    		],
    		name: "mintGame",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "name",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			},
    			{
    				internalType: "bytes",
    				name: "",
    				type: "bytes"
    			}
    		],
    		name: "onERC721Received",
    		outputs: [
    			{
    				internalType: "bytes4",
    				name: "",
    				type: "bytes4"
    			}
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "owner",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "ownerOf",
    		outputs: [
    			{
    				internalType: "address",
    				name: "",
    				type: "address"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "renounceOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			},
    			{
    				internalType: "bytes",
    				name: "data",
    				type: "bytes"
    			}
    		],
    		name: "safeTransferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "operator",
    				type: "address"
    			},
    			{
    				internalType: "bool",
    				name: "approved",
    				type: "bool"
    			}
    		],
    		name: "setApprovalForAll",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "setBounty",
    		outputs: [
    		],
    		stateMutability: "payable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			},
    			{
    				internalType: "address payable",
    				name: "winner",
    				type: "address"
    			}
    		],
    		name: "setWinner",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "bytes4",
    				name: "interfaceId",
    				type: "bytes4"
    			}
    		],
    		name: "supportsInterface",
    		outputs: [
    			{
    				internalType: "bool",
    				name: "",
    				type: "bool"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "symbol",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "index",
    				type: "uint256"
    			}
    		],
    		name: "tokenByIndex",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "owner",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "index",
    				type: "uint256"
    			}
    		],
    		name: "tokenOfOwnerByIndex",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "tokenURI",
    		outputs: [
    			{
    				internalType: "string",
    				name: "",
    				type: "string"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    		],
    		name: "totalSupply",
    		outputs: [
    			{
    				internalType: "uint256",
    				name: "",
    				type: "uint256"
    			}
    		],
    		stateMutability: "view",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "from",
    				type: "address"
    			},
    			{
    				internalType: "address",
    				name: "to",
    				type: "address"
    			},
    			{
    				internalType: "uint256",
    				name: "tokenId",
    				type: "uint256"
    			}
    		],
    		name: "transferFrom",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	},
    	{
    		inputs: [
    			{
    				internalType: "address",
    				name: "newOwner",
    				type: "address"
    			}
    		],
    		name: "transferOwnership",
    		outputs: [
    		],
    		stateMutability: "nonpayable",
    		type: "function"
    	}
    ];
    var bytecode = "0x60806040523480156200001157600080fd5b5060405162005cdb38038062005cdb833981810160405281019062000037919062000506565b6040518060400160405280600a81526020017f4368657373546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b00000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000254565b508060019080519060200190620000d492919062000254565b505050620000f7620000eb6200018660201b60201c565b6200018e60201b60201c565b81600c90805190602001906200010f92919062000254565b5073__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__63483b0271600d836040518363ffffffff1660e01b81526004016200014c92919062000584565b60006040518083038186803b1580156200016557600080fd5b505af41580156200017a573d6000803e3d6000fd5b50505050505062000615565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200026290620005e0565b90600052602060002090601f016020900481019282620002865760008555620002d2565b82601f10620002a157805160ff1916838001178555620002d2565b82800160010185558215620002d2579182015b82811115620002d1578251825591602001919060010190620002b4565b5b509050620002e19190620002e5565b5090565b5b8082111562000300576000816000905550600101620002e6565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200036d8262000322565b810181811067ffffffffffffffff821117156200038f576200038e62000333565b5b80604052505050565b6000620003a462000304565b9050620003b2828262000362565b919050565b600067ffffffffffffffff821115620003d557620003d462000333565b5b620003e08262000322565b9050602081019050919050565b60005b838110156200040d578082015181840152602081019050620003f0565b838111156200041d576000848401525b50505050565b60006200043a6200043484620003b7565b62000398565b9050828152602081018484840111156200045957620004586200031d565b5b62000466848285620003ed565b509392505050565b600082601f83011262000486576200048562000318565b5b81516200049884826020860162000423565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004ce82620004a1565b9050919050565b620004e081620004c1565b8114620004ec57600080fd5b50565b6000815190506200050081620004d5565b92915050565b6000806040838503121562000520576200051f6200030e565b5b600083015167ffffffffffffffff81111562000541576200054062000313565b5b6200054f858286016200046e565b92505060206200056285828601620004ef565b9150509250929050565b8082525050565b6200057e81620004c1565b82525050565b60006040820190506200059b60008301856200056c565b620005aa602083018462000573565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620005f957607f821691505b6020821081036200060f576200060e620005b1565b5b50919050565b6156b680620006256000396000f3fe6080604052600436106101cd5760003560e01c8063715018a6116100f7578063b88d4fde11610095578063e7f2ca8811610064578063e7f2ca88146106b1578063e985e9c5146106da578063f2fde38b14610717578063f68d3ef014610740576101cd565b8063b88d4fde146105f7578063c17d7c4914610620578063c87b56dd1461065d578063d65404f81461069a576101cd565b80639c623683116100d15780639c6236831461053d5780639c6c958114610566578063a22cb46514610591578063a2f77bcc146105ba576101cd565b8063715018a6146104d05780638da5cb5b146104e757806395d89b4114610512576101cd565b806318160ddd1161016f5780634f6ccce71161013e5780634f6ccce7146103fd5780635d87d3631461043a5780636352211e1461045657806370a0823114610493576101cd565b806318160ddd1461034357806323b872dd1461036e5780632f745c591461039757806342842e0e146103d4576101cd565b8063095ea7b3116101ab578063095ea7b3146102775780630b21fe68146102a0578063129daf84146102c9578063150b7a0214610306576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613c97565b61076b565b6040516102069190613cdf565b60405180910390f35b34801561021b57600080fd5b506102246107e5565b6040516102319190613d93565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613deb565b610877565b60405161026e9190613e59565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190613ea0565b6108bd565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190613deb565b6109d4565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190613ee0565b610ecf565b6040516102fd9190613fcb565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190614122565b610f66565b60405161033a91906141b4565b60405180910390f35b34801561034f57600080fd5b50610358610f7a565b60405161036591906141de565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906141f9565b610f87565b005b3480156103a357600080fd5b506103be60048036038101906103b99190613ea0565b610fe7565b6040516103cb91906141de565b60405180910390f35b3480156103e057600080fd5b506103fb60048036038101906103f691906141f9565b61108c565b005b34801561040957600080fd5b50610424600480360381019061041f9190613deb565b6110ac565b60405161043191906141de565b60405180910390f35b610454600480360381019061044f9190613deb565b61111d565b005b34801561046257600080fd5b5061047d60048036038101906104789190613deb565b611568565b60405161048a9190613e59565b60405180910390f35b34801561049f57600080fd5b506104ba60048036038101906104b59190613ee0565b611619565b6040516104c791906141de565b60405180910390f35b3480156104dc57600080fd5b506104e56116d0565b005b3480156104f357600080fd5b506104fc6116e4565b6040516105099190613e59565b60405180910390f35b34801561051e57600080fd5b5061052761170e565b6040516105349190613d93565b60405180910390f35b34801561054957600080fd5b50610564600480360381019061055f919061428a565b6117a0565b005b34801561057257600080fd5b5061057b611bf4565b60405161058891906141de565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b391906142f6565b611c01565b005b3480156105c657600080fd5b506105e160048036038101906105dc9190613deb565b611c17565b6040516105ee91906143a9565b60405180910390f35b34801561060357600080fd5b5061061e60048036038101906106199190614122565b611e3c565b005b34801561062c57600080fd5b50610647600480360381019061064291906143c4565b611e9e565b60405161065491906141de565b60405180910390f35b34801561066957600080fd5b50610684600480360381019061067f9190613deb565b61211d565b6040516106919190613d93565b60405180910390f35b3480156106a657600080fd5b506106af6121f7565b005b3480156106bd57600080fd5b506106d860048036038101906106d39190613ee0565b6122d1565b005b3480156106e657600080fd5b5061070160048036038101906106fc9190614417565b612346565b60405161070e9190613cdf565b60405180910390f35b34801561072357600080fd5b5061073e60048036038101906107399190613ee0565b6123da565b005b34801561074c57600080fd5b5061075561245d565b60405161076291906141de565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107de57506107dd8261246a565b5b9050919050565b6060600080546107f490614486565b80601f016020809104026020016040519081016040528092919081815260200182805461082090614486565b801561086d5780601f106108425761010080835404028352916020019161086d565b820191906000526020600020905b81548152906001019060200180831161085057829003601f168201915b5050505050905090565b60006108828261254c565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108c882611568565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90614529565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610957612597565b73ffffffffffffffffffffffffffffffffffffffff161480610986575061098581610980612597565b612346565b5b6109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc906145bb565b60405180910390fd5b6109cf838361259f565b505050565b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590614627565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bef57503373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590614693565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d2c576012600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d2b81612658565b5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2a576012600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e2981612658565b5b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__634a66ccc1600d836012600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401610e9c93929190614728565b60006040518083038186803b158015610eb457600080fd5b505af4158015610ec8573d6000803e3d6000fd5b5050505050565b6060601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f5a57602002820191906000526020600020905b815481526020019060010190808311610f46575b50505050509050919050565b600063150b7a0260e01b9050949350505050565b6000600880549050905090565b610f98610f92612597565b82612806565b610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce906147d1565b60405180910390fd5b610fe283838361289b565b505050565b6000610ff283611619565b8210611033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102a90614863565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6110a783838360405180602001604052806000815250611e3c565b505050565b60006110b6610f7a565b82106110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee906148f5565b60405180910390fd5b6008828154811061110b5761110a614915565b5b90600052602060002001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16116111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b990614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130390614990565b60405180910390fd5b6000341161134f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611346906149fc565b60405180910390fd5b6012600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a582611568565b73ffffffffffffffffffffffffffffffffffffffff16036113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f290614a68565b60405180910390fd5b6012600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661145182611568565b73ffffffffffffffffffffffffffffffffffffffff16036114a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149e90614a68565b60405180910390fd5b3460126000838152602001908152602001600020600301546114c99190614ab7565b601260008381526020019081526020016000206003018190555073__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__636ea222d3600d8360126000868152602001908152602001600020600301546040518463ffffffff1660e01b815260040161153593929190614b0d565b60006040518083038186803b15801561154d57600080fd5b505af4158015611561573d6000803e3d6000fd5b5050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160790614b90565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168090614c22565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6116d8612b01565b6116e26000612b7f565b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461171d90614486565b80601f016020809104026020016040519081016040528092919081815260200182805461174990614486565b80156117965780601f1061176b57610100808354040283529160200191611796565b820191906000526020600020905b81548152906001019060200180831161177957829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16116118ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e190614627565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661190a83611568565b73ffffffffffffffffffffffffffffffffffffffff1614611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790614c8e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611a3157508073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6790614cfa565b60405180910390fd5b806012600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b05826012600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c45565b611b45826012600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c45565b611b4e82612658565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__63e5f83c34600d846012600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401611bc093929190614728565b60006040518083038186803b158015611bd857600080fd5b505af4158015611bec573d6000803e3d6000fd5b505050505050565b6000600d60020154905090565b611c13611c0c612597565b8383612ece565b5050565b611c1f613b57565b6000601260008481526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1611611dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db790614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1611611e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2a90614627565b60405180910390fd5b80915050919050565b611e4d611e47612597565b83612806565b611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e83906147d1565b60405180910390fd5b611e988484848461303a565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0590614d66565b60405180910390fd5b6000611f1a600b613096565b9050611f26600b6130a4565b611f3085826130ba565b6000601260008381526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160030181905550601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505573__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__635918057f600d8488886040518563ffffffff1660e01b81526004016120e19493929190614d95565b60006040518083038186803b1580156120f957600080fd5b505af415801561210d573d6000803e3d6000fd5b5050505081925050509392505050565b6060612128826130d8565b612167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215e90614e4c565b60405180910390fd5b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__63e652709d600d8461218c613144565b6040518463ffffffff1660e01b81526004016121aa93929190614eb6565b600060405180830381865af41580156121c7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121f09190614f95565b9050919050565b6121ff612b01565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__637e0a8846600d6040518263ffffffff1660e01b81526004016122379190614fde565b60006040518083038186803b15801561224f57600080fd5b505af4158015612263573d6000803e3d6000fd5b5050505073__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__631702efd8600d6040518263ffffffff1660e01b815260040161229f9190614fde565b60006040518083038186803b1580156122b757600080fd5b505af41580156122cb573d6000803e3d6000fd5b50505050565b6122d9612b01565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$";
    var deployedBytecode = "0x6080604052600436106101cd5760003560e01c8063715018a6116100f7578063b88d4fde11610095578063e7f2ca8811610064578063e7f2ca88146106b1578063e985e9c5146106da578063f2fde38b14610717578063f68d3ef014610740576101cd565b8063b88d4fde146105f7578063c17d7c4914610620578063c87b56dd1461065d578063d65404f81461069a576101cd565b80639c623683116100d15780639c6236831461053d5780639c6c958114610566578063a22cb46514610591578063a2f77bcc146105ba576101cd565b8063715018a6146104d05780638da5cb5b146104e757806395d89b4114610512576101cd565b806318160ddd1161016f5780634f6ccce71161013e5780634f6ccce7146103fd5780635d87d3631461043a5780636352211e1461045657806370a0823114610493576101cd565b806318160ddd1461034357806323b872dd1461036e5780632f745c591461039757806342842e0e146103d4576101cd565b8063095ea7b3116101ab578063095ea7b3146102775780630b21fe68146102a0578063129daf84146102c9578063150b7a0214610306576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190613c97565b61076b565b6040516102069190613cdf565b60405180910390f35b34801561021b57600080fd5b506102246107e5565b6040516102319190613d93565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190613deb565b610877565b60405161026e9190613e59565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190613ea0565b6108bd565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190613deb565b6109d4565b005b3480156102d557600080fd5b506102f060048036038101906102eb9190613ee0565b610ecf565b6040516102fd9190613fcb565b60405180910390f35b34801561031257600080fd5b5061032d60048036038101906103289190614122565b610f66565b60405161033a91906141b4565b60405180910390f35b34801561034f57600080fd5b50610358610f7a565b60405161036591906141de565b60405180910390f35b34801561037a57600080fd5b50610395600480360381019061039091906141f9565b610f87565b005b3480156103a357600080fd5b506103be60048036038101906103b99190613ea0565b610fe7565b6040516103cb91906141de565b60405180910390f35b3480156103e057600080fd5b506103fb60048036038101906103f691906141f9565b61108c565b005b34801561040957600080fd5b50610424600480360381019061041f9190613deb565b6110ac565b60405161043191906141de565b60405180910390f35b610454600480360381019061044f9190613deb565b61111d565b005b34801561046257600080fd5b5061047d60048036038101906104789190613deb565b611568565b60405161048a9190613e59565b60405180910390f35b34801561049f57600080fd5b506104ba60048036038101906104b59190613ee0565b611619565b6040516104c791906141de565b60405180910390f35b3480156104dc57600080fd5b506104e56116d0565b005b3480156104f357600080fd5b506104fc6116e4565b6040516105099190613e59565b60405180910390f35b34801561051e57600080fd5b5061052761170e565b6040516105349190613d93565b60405180910390f35b34801561054957600080fd5b50610564600480360381019061055f919061428a565b6117a0565b005b34801561057257600080fd5b5061057b611bf4565b60405161058891906141de565b60405180910390f35b34801561059d57600080fd5b506105b860048036038101906105b391906142f6565b611c01565b005b3480156105c657600080fd5b506105e160048036038101906105dc9190613deb565b611c17565b6040516105ee91906143a9565b60405180910390f35b34801561060357600080fd5b5061061e60048036038101906106199190614122565b611e3c565b005b34801561062c57600080fd5b50610647600480360381019061064291906143c4565b611e9e565b60405161065491906141de565b60405180910390f35b34801561066957600080fd5b50610684600480360381019061067f9190613deb565b61211d565b6040516106919190613d93565b60405180910390f35b3480156106a657600080fd5b506106af6121f7565b005b3480156106bd57600080fd5b506106d860048036038101906106d39190613ee0565b6122d1565b005b3480156106e657600080fd5b5061070160048036038101906106fc9190614417565b612346565b60405161070e9190613cdf565b60405180910390f35b34801561072357600080fd5b5061073e60048036038101906107399190613ee0565b6123da565b005b34801561074c57600080fd5b5061075561245d565b60405161076291906141de565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107de57506107dd8261246a565b5b9050919050565b6060600080546107f490614486565b80601f016020809104026020016040519081016040528092919081815260200182805461082090614486565b801561086d5780601f106108425761010080835404028352916020019161086d565b820191906000526020600020905b81548152906001019060200180831161085057829003601f168201915b5050505050905090565b60006108828261254c565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108c882611568565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90614529565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610957612597565b73ffffffffffffffffffffffffffffffffffffffff161480610986575061098581610980612597565b612346565b5b6109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc906145bb565b60405180910390fd5b6109cf838361259f565b505050565b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611610b1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1590614627565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610bef57503373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b610c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2590614693565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610d2c576012600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d2b81612658565b5b3373ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2a576012600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610e2981612658565b5b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__634a66ccc1600d836012600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401610e9c93929190614728565b60006040518083038186803b158015610eb457600080fd5b505af4158015610ec8573d6000803e3d6000fd5b5050505050565b6060601360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f5a57602002820191906000526020600020905b815481526020019060010190808311610f46575b50505050509050919050565b600063150b7a0260e01b9050949350505050565b6000600880549050905090565b610f98610f92612597565b82612806565b610fd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fce906147d1565b60405180910390fd5b610fe283838361289b565b505050565b6000610ff283611619565b8210611033576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102a90614863565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6110a783838360405180602001604052806000815250611e3c565b505050565b60006110b6610f7a565b82106110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee906148f5565b60405180910390fd5b6008828154811061110b5761110a614915565b5b90600052602060002001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16116111c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b990614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461130c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130390614990565b60405180910390fd5b6000341161134f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611346906149fc565b60405180910390fd5b6012600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166113a582611568565b73ffffffffffffffffffffffffffffffffffffffff16036113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f290614a68565b60405180910390fd5b6012600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661145182611568565b73ffffffffffffffffffffffffffffffffffffffff16036114a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149e90614a68565b60405180910390fd5b3460126000838152602001908152602001600020600301546114c99190614ab7565b601260008381526020019081526020016000206003018190555073__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__636ea222d3600d8360126000868152602001908152602001600020600301546040518463ffffffff1660e01b815260040161153593929190614b0d565b60006040518083038186803b15801561154d57600080fd5b505af4158015611561573d6000803e3d6000fd5b5050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160790614b90565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611689576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168090614c22565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6116d8612b01565b6116e26000612b7f565b565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461171d90614486565b80601f016020809104026020016040519081016040528092919081815260200182805461174990614486565b80156117965780601f1061176b57610100808354040283529160200191611796565b820191906000526020600020905b81548152906001019060200180831161177957829003601f168201915b5050505050905090565b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1611611845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183c90614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16116118ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e190614627565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1661190a83611568565b73ffffffffffffffffffffffffffffffffffffffff1614611960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195790614c8e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611a3157508073ffffffffffffffffffffffffffffffffffffffff166012600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6790614cfa565b60405180910390fd5b806012600084815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611b05826012600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c45565b611b45826012600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612c45565b611b4e82612658565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__63e5f83c34600d846012600087815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b8152600401611bc093929190614728565b60006040518083038186803b158015611bd857600080fd5b505af4158015611bec573d6000803e3d6000fd5b505050505050565b6000600d60020154905090565b611c13611c0c612597565b8383612ece565b5050565b611c1f613b57565b6000601260008481526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1611611dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db790614627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1611611e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2a90614627565b60405180910390fd5b80915050919050565b611e4d611e47612597565b83612806565b611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e83906147d1565b60405180910390fd5b611e988484848461303a565b50505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611f0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0590614d66565b60405180910390fd5b6000611f1a600b613096565b9050611f26600b6130a4565b611f3085826130ba565b6000601260008381526020019081526020016000209050848160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160030181905550601360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055601360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505060019003906000526020600020016000909190919091505573__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__635918057f600d8488886040518563ffffffff1660e01b81526004016120e19493929190614d95565b60006040518083038186803b1580156120f957600080fd5b505af415801561210d573d6000803e3d6000fd5b5050505081925050509392505050565b6060612128826130d8565b612167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215e90614e4c565b60405180910390fd5b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__63e652709d600d8461218c613144565b6040518463ffffffff1660e01b81526004016121aa93929190614eb6565b600060405180830381865af41580156121c7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121f09190614f95565b9050919050565b6121ff612b01565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__637e0a8846600d6040518263ffffffff1660e01b81526004016122379190614fde565b60006040518083038186803b15801561224f57600080fd5b505af4158015612263573d6000803e3d6000fd5b5050505073__$fc91d5ec81f63e7118f8964e12e2dbf5b9$__631702efd8600d6040518263ffffffff1660e01b815260040161229f9190614fde565b60006040518083038186803b1580156122b757600080fd5b505af41580156122cb573d6000803e3d6000fd5b50505050565b6122d9612b01565b73__$fc91d5ec81f63e7118f8964e12e2dbf5b9$";
    var linkReferences = {
    	"contracts/ChessTableland.sol": {
    		ChessTableland: [
    			{
    				length: 20,
    				start: 274
    			},
    			{
    				length: 20,
    				start: 5201
    			},
    			{
    				length: 20,
    				start: 6922
    			},
    			{
    				length: 20,
    				start: 8565
    			},
    			{
    				length: 20,
    				start: 9930
    			},
    			{
    				length: 20,
    				start: 10126
    			},
    			{
    				length: 20,
    				start: 10278
    			},
    			{
    				length: 20,
    				start: 10382
    			},
    			{
    				length: 20,
    				start: 10496
    			}
    		]
    	}
    };
    var deployedLinkReferences = {
    	"contracts/ChessTableland.sol": {
    		ChessTableland: [
    			{
    				length: 20,
    				start: 3628
    			},
    			{
    				length: 20,
    				start: 5349
    			},
    			{
    				length: 20,
    				start: 6992
    			},
    			{
    				length: 20,
    				start: 8357
    			},
    			{
    				length: 20,
    				start: 8553
    			},
    			{
    				length: 20,
    				start: 8705
    			},
    			{
    				length: 20,
    				start: 8809
    			},
    			{
    				length: 20,
    				start: 8923
    			}
    		]
    	}
    };
    var chessToken = {
    	_format: _format,
    	contractName: contractName,
    	sourceName: sourceName,
    	abi: abi,
    	bytecode: bytecode,
    	deployedBytecode: deployedBytecode,
    	linkReferences: linkReferences,
    	deployedLinkReferences: deployedLinkReferences
    };

    // globally unique tablename that all players use
    const MOVES_TABLENAME = 'chess_moves_31337_3';
    const TOKEN_CONTRACT_ADDRESS = '0x71C95911E9a5D330f4D621842EC243EE1343292e';
    const tokenAbi = chessToken.abi;
    const moveWaitDiration = 5000;
    // TODO: use alchemy to get the games the user owns, and the games the user is actively playing
    // TODO: enable minting a game with two players
    // TODO: enable adding a bounty to a game
    // internals
    let _address;
    let _audience;
    let _black;
    let _gameId;
    let _intervalId;
    let _moves;
    let _opponentAddress;
    let _tableland;
    let _white;
    // RPC responds with rows and columns in separate arrays, this will combine to an array of objects
    const parseResponse = function (data) {
        return data.rows.map((rowArr) => {
            const row = {};
            for (let i = 0; i < data.columns.length; i++) {
                const key = data.columns[i].name;
                row[key] = rowArr[i];
            }
            return row;
        });
    };
    const gameId = writable('');
    const whiteAddress = writable('');
    const blackAddress = writable('');
    // We want to make the game id available to the methods in the store.
    // afaict Svelte best practices is to have a mutable var in the file's scope that is updated via subscribe.
    // This pattern seems a bit smelly to me, something like <writeable>.get() would make more sense but I'm
    // new to Svelte. TODO: Maybe there is a better way to do this?
    gameId.subscribe(gid => _gameId = gid);
    whiteAddress.subscribe(white => _white = white);
    blackAddress.subscribe(black => _black = black);
    const myColor = writable('');
    myColor.subscribe(color => color);
    const myAddress = writable('');
    myAddress.subscribe(address => _address = address);
    // Flag that tracks if the user just watching the game
    const audience = writable(false);
    audience.subscribe(isAudience => _audience = isAudience);
    // Flag that tracks if the user is the owner of the game
    const owner = writable(false);
    owner.subscribe(isOwner => isOwner);
    const bounty = writable('');
    owner.subscribe(newBounty => newBounty);
    const { subscribe: movesSubscribe, set: setMoves, update: updateMoves } = writable([]);
    movesSubscribe(mvs => _moves = mvs);
    const moves = {
        subscribe: movesSubscribe,
        doMove: async function (move) {
            try {
                if (!_tableland)
                    throw new Error('you must connect to Tableland before playing');
                if (_audience)
                    return;
                await _tableland.write(sqlStatements.doMove(_gameId, move));
                updateMoves((allMoves) => {
                    return allMoves.concat([move]);
                });
                moves.listenForMoves();
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        listenForMoves: function (black = _black, white = _white, forever = false) {
            if (!black || !white)
                return;
            _intervalId = setInterval(async function () {
                const res = await _tableland.read(sqlStatements.loadGame(_gameId, black, white));
                const game = parseResponse(res);
                if (game.length > _moves.length) {
                    // there is a new move, either from the other player or this player on another screen
                    if (!forever)
                        clearInterval(_intervalId);
                    setMoves(game.map(move => move.move));
                }
            }, moveWaitDiration);
            return _intervalId;
        },
        unlistenForMoves: function () {
            clearInterval(_intervalId);
        }
    };
    const ownedGames = writable([]);
    const { subscribe: gamesSubscribe, set: setGames, update: updateGames } = writable([]);
    // TODO: games needs to be split into games I own and games I am a player in
    const games = {
        subscribe: gamesSubscribe,
        mintGame: async function (params) {
            try {
                if (!_tableland)
                    throw new Error('you must connect to Tableland before minting');
                const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, tokenAbi, _tableland.signer);
                const ownerAddress = await _tableland.signer.getAddress();
                const tx = await tokenContract.mintGame(ownerAddress, params.player1, params.player2);
                const receipt = await tx.wait();
                const gameId = receipt.events[0].args.tokenId;
                // refresh games now that a new one exists
                await games.findGames();
                return gameId;
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        addBounty: async function (game, amount) {
            try {
                if (!_tableland)
                    throw new Error('you must connect to Tableland before minting');
                const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, tokenAbi, _tableland.signer);
                const tx = await tokenContract.setBounty(BigNumber.from(game.id), {
                    value: parseEther(amount)
                });
                const receipt = await tx.wait();
                // TODO: This is a naive way of resync the UI's state with the table and chain state
                await games.findGames();
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        certifyWinner: async function (tokenId, color) {
            try {
                let winnerAddress;
                if (color === 'white')
                    winnerAddress = _white;
                if (color === 'black')
                    winnerAddress = _black;
                // should never end up throwing this, but checking just in case
                if (!winnerAddress)
                    throw new Error('cannot get winner address');
                const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, tokenAbi, _tableland.signer);
                const tx = await tokenContract.setWinner(BigNumber.from(tokenId), winnerAddress);
                await tx.wait();
                // reload to update UI
                await games.loadGame(tokenId, _black, _white);
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        // TODO: active games should come from alchemy via `getPlayerGames(address)`, then games stored
        //       in tableland that don't show up in those results are finished and we will want to get
        //       them from the contract via `getGame(game_id)`
        findGames: async function (search) {
            try {
                if (!_tableland)
                    throw new Error('you must connect to Tableland before playing');
                // TODO: ? should we use SC call to get active games, which will include games
                //       that they haven't made a move on yet?  This would allow people to add players
                //       to games without the player's consent, but it would also help them find games
                //       they have been invited to.  Not sure which is appropriate.
                // get games I own and games I'm playing
                const ownerAddress = await _tableland.signer.getAddress();
                const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, tokenAbi, _tableland.signer);
                const gamesCount = await tokenContract.balanceOf(ownerAddress);
                const ownedAndPlaying = [];
                const myOwnedGames = [];
                for (let i = 0; i < gamesCount; i++) {
                    const gameId = await tokenContract.tokenOfOwnerByIndex(ownerAddress, i);
                    const contractGame = await tokenContract.getGame(gameId);
                    const params = new URLSearchParams();
                    params.set('white', contractGame.player1);
                    params.set('black', contractGame.player2);
                    params.set('game', gameId);
                    const game = {
                        player1: contractGame.player1,
                        player2: contractGame.player2,
                        winner: contractGame.winner,
                        bounty: contractGame.bounty,
                        id: parseInt(gameId.toString(), 10),
                        link: `${location.pathname}?${params.toString()}`
                    };
                    myOwnedGames.push(game);
                    if (game.player1 === ownerAddress || game.player2 === ownerAddress) {
                        ownedAndPlaying.push(game);
                    }
                }
                ownedGames.set(myOwnedGames);
                // TODO: paginate based on search arg
                const res = await _tableland.read(sqlStatements.myMoves());
                const myMoves = parseResponse(res);
                const uniqueGames = myMoves.reduce(function (allGames, game) {
                    const exists = allGames.find(gameId => game.game_id === gameId);
                    if (typeof exists !== undefined) {
                        return allGames;
                    }
                    return allGames.concat([game.game_id]);
                }, []);
                const gamesRes = await _tableland.read(sqlStatements.getGames(uniqueGames));
                const allMoves = parseResponse(gamesRes);
                const games = uniqueGames.map(function (gameId) {
                    const whiteMove = allMoves.find(g => ~g.move.indexOf('white'));
                    const whiteAddress = whiteMove === null || whiteMove === void 0 ? void 0 : whiteMove.player_address;
                    const blackMove = allMoves.find(g => ~g.move.indexOf('black'));
                    const blackAddress = blackMove === null || blackMove === void 0 ? void 0 : blackMove.player_address;
                    if (!(whiteAddress && blackAddress)) {
                        return;
                    }
                    return {
                        id: gameId,
                        link: `?game=${gameId}&white=${whiteAddress}&black=${blackAddress}`,
                        player1: whiteAddress,
                        player2: blackAddress
                    };
                }).filter(g => g);
                for (let i = 0; i < ownedAndPlaying.length; i++) {
                    const game = ownedAndPlaying[i];
                    if (!games.find(g => g.id === game.id)) {
                        games.push({
                            id: game.id,
                            link: `?game=${game.id}&white=${game.player1}&black=${game.player2}`,
                            player1: game.player1,
                            player2: game.player2
                        });
                    }
                }
                setGames(games);
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        loadGame: async function (loadGameId, black, white) {
            try {
                if (!_tableland)
                    throw new Error('you must connect to Tableland before playing');
                if (typeof loadGameId === 'string')
                    loadGameId = parseInt(loadGameId, 10);
                // reset the moves so UI can update
                setMoves([]);
                moves.unlistenForMoves();
                bounty.set('');
                const tokenContract = new Contract(TOKEN_CONTRACT_ADDRESS, tokenAbi, _tableland.signer);
                const tokenOwner = await tokenContract.ownerOf(BigNumber.from(loadGameId));
                owner.set(_address === tokenOwner);
                const game = await tokenContract.getGame(BigNumber.from(loadGameId));
                if (_address === white || _address === black) {
                    _opponentAddress = white === _address ? black : white;
                    audience.set(false);
                    const color = white === _address ? 'white' : 'black';
                    myColor.update(c => color);
                }
                else if (_address === tokenOwner) {
                    audience.set(false);
                }
                else {
                    audience.set(true);
                }
                gameId.set(loadGameId);
                await tick();
                const res = await _tableland.read(sqlStatements.loadGame(loadGameId, black, white));
                const gameMoves = parseResponse(res);
                setMoves(gameMoves.map(move => move.move));
                const currentBounty = parseEther(game.bounty.toString()).toString();
                bounty.set(currentBounty === '0' ? '' : currentBounty);
                if (_audience) {
                    // If the user is in the audience listen forever
                    moves.listenForMoves(black, white, true);
                }
                else if (gameMoves.length && gameMoves[gameMoves.length - 1].player_address === _address) {
                    // If this player made the last move, start waiting for the other player to make their move
                    moves.listenForMoves(black, white);
                }
                const gameUrl = new URL(window.location);
                gameUrl.searchParams.set('white', white);
                gameUrl.searchParams.set('black', black);
                gameUrl.searchParams.set('game', loadGameId);
                window.history.pushState({}, '', gameUrl);
                whiteAddress.set(white);
                blackAddress.set(black);
            }
            catch (err) {
                console.log(err);
                alerts.addAlert(err.message, 'error');
            }
        },
        unloadGame: function () {
            moves.unlistenForMoves();
            gameId.set('');
            setMoves([]);
            window.history.pushState({}, '', `${window.location.protocol}//${window.location.host}${window.location.pathname}`);
        }
    };
    const { subscribe: alertsSubscribe, set: setAlerts, update: updateAlerts } = writable([]);
    const alerts = {
        subscribe: alertsSubscribe,
        addAlert: function (message, type) {
            updateAlerts(alerts => alerts.concat([{ message, type, id: alerts.length }]));
        },
        clearAlert: function (alert) {
            updateAlerts(alerts => {
                return alerts.filter(lert => {
                    if (lert.id !== alert.id)
                        return true;
                    return false;
                });
            });
        }
    };
    const { subscribe: connectedSubscribe, set: setConnected } = writable(false);
    const connected = {
        subscribe: connectedSubscribe
    };
    const init = async function () {
        try {
            //const connectParams: ConnectOptions = {
            //chain: 'ethereum-goerli'
            //};
            const connectParams = {
                chain: 'local-tableland'
            };
            _tableland = await connect(connectParams);
            await _tableland.siwe();
            const decodedToken = atob(_tableland.token.token);
            const message = JSON.parse(decodedToken);
            const addr = verifyMessage(message.message, message.signature);
            myAddress.update(address => addr);
            setConnected(true);
            const params = new URLSearchParams(location.search);
            _white = params.get('white');
            _black = params.get('black');
            const gameId = params.get('game');
            if (_white && _black && gameId) {
                await games.loadGame(gameId, _black, _white);
            }
        }
        catch (err) {
            console.log(err);
            alerts.addAlert(err.message, 'error');
        }
    };
    const sqlStatements = {
        doMove: (gameId, move) => `INSERT INTO ${MOVES_TABLENAME} (player_address, game_id, move) VALUES ('${_address}', '${gameId}', '${move}');`,
        myMoves: () => `SELECT * FROM ${MOVES_TABLENAME} WHERE player_address = '${_address}';`,
        loadGame: (game, black, white) => `
    SELECT * FROM ${MOVES_TABLENAME}
    WHERE game_id = '${game}'
    ORDER BY rowid ASC;
  `,
        getGames: (uniqueGames) => `
    SELECT * FROM ${MOVES_TABLENAME}
    WHERE game_id IN ('${uniqueGames.join('\',\'')}');
  `
    };

    /* src/App.svelte generated by Svelte v3.49.0 */

    const { Boolean: Boolean_1, Error: Error_1, Object: Object_1, console: console_1 } = globals;

    const file = "src/App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[64] = list[i];
    	child_ctx[66] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[64] = list[i];
    	child_ctx[66] = i;
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[68] = list[i];
    	child_ctx[70] = i;
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[71] = list[i];
    	child_ctx[73] = i;
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[74] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[77] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[80] = list[i];
    	return child_ctx;
    }

    // (960:2) {#if newGame}
    function create_if_block_26(ctx) {
    	let modal;
    	let updating_visible;
    	let current;

    	function modal_visible_binding(value) {
    		/*modal_visible_binding*/ ctx[38](value);
    	}

    	let modal_props = {
    		title: "Your Game has been minted!",
    		$$slots: { default: [create_default_slot_7] },
    		$$scope: { ctx }
    	};

    	if (/*newGame*/ ctx[4] !== void 0) {
    		modal_props.visible = /*newGame*/ ctx[4];
    	}

    	modal = new Modal({ props: modal_props, $$inline: true });
    	binding_callbacks.push(() => bind(modal, 'visible', modal_visible_binding));

    	const block = {
    		c: function create() {
    			create_component(modal.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modal_changes = {};

    			if (dirty[0] & /*newGame*/ 16 | dirty[2] & /*$$scope*/ 2097152) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_visible && dirty[0] & /*newGame*/ 16) {
    				updating_visible = true;
    				modal_changes.visible = /*newGame*/ ctx[4];
    				add_flush_callback(() => updating_visible = false);
    			}

    			modal.$set(modal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_26.name,
    		type: "if",
    		source: "(960:2) {#if newGame}",
    		ctx
    	});

    	return block;
    }

    // (963:4) <ModalBody>
    function create_default_slot_8(ctx) {
    	let t0;
    	let span;
    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			t0 = text$1("Here's the link to\n      ");
    			span = element("span");
    			span.textContent = "your game\n      ";
    			t2 = text$1(".\n      Share this with the the Wallets of the players you specified.\n      You can now set a bounty on the game, which will be paid in full to the winner when you certify the game outcome.");
    			attr_dev(span, "class", "cursor-pointer hover:underline text-blue-300 text-ellipsis overflow-hidden");
    			add_location(span, file, 964, 6, 33482);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			insert_dev(target, t2, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler*/ ctx[37], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(963:4) <ModalBody>",
    		ctx
    	});

    	return block;
    }

    // (961:2) <Modal bind:visible={newGame} title="Your Game has been minted!">
    function create_default_slot_7(ctx) {
    	let modalbody;
    	let current;

    	modalbody = new ModalBody({
    			props: {
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalbody_changes = {};

    			if (dirty[0] & /*newGame*/ 16 | dirty[2] & /*$$scope*/ 2097152) {
    				modalbody_changes.$$scope = { dirty, ctx };
    			}

    			modalbody.$set(modalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(961:2) <Modal bind:visible={newGame} title=\\\"Your Game has been minted!\\\">",
    		ctx
    	});

    	return block;
    }

    // (975:2) {#if bountyGame}
    function create_if_block_23(ctx) {
    	let modal;
    	let updating_visible;
    	let current;

    	function modal_visible_binding_1(value) {
    		/*modal_visible_binding_1*/ ctx[40](value);
    	}

    	let modal_props = {
    		title: "Add to the bounty",
    		$$slots: { default: [create_default_slot_4] },
    		$$scope: { ctx }
    	};

    	if (/*bountyGame*/ ctx[5] !== void 0) {
    		modal_props.visible = /*bountyGame*/ ctx[5];
    	}

    	modal = new Modal({ props: modal_props, $$inline: true });
    	binding_callbacks.push(() => bind(modal, 'visible', modal_visible_binding_1));

    	const block = {
    		c: function create() {
    			create_component(modal.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modal, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modal_changes = {};

    			if (dirty[0] & /*validBounty, settingBounty, newBounty*/ 32836 | dirty[2] & /*$$scope*/ 2097152) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_visible && dirty[0] & /*bountyGame*/ 32) {
    				updating_visible = true;
    				modal_changes.visible = /*bountyGame*/ ctx[5];
    				add_flush_callback(() => updating_visible = false);
    			}

    			modal.$set(modal_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modal, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_23.name,
    		type: "if",
    		source: "(975:2) {#if bountyGame}",
    		ctx
    	});

    	return block;
    }

    // (985:10) {#if settingBounty}
    function create_if_block_25(ctx) {
    	let spinner;
    	let current;

    	spinner = new Spinner({
    			props: { label: "Adding..." },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_25.name,
    		type: "if",
    		source: "(985:10) {#if settingBounty}",
    		ctx
    	});

    	return block;
    }

    // (989:10) {#if !settingBounty}
    function create_if_block_24(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				type: "primary",
    				small: true,
    				disabled: !/*validBounty*/ ctx[15](),
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*addBounty*/ ctx[33]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty[0] & /*validBounty*/ 32768) button_changes.disabled = !/*validBounty*/ ctx[15]();

    			if (dirty[2] & /*$$scope*/ 2097152) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_24.name,
    		type: "if",
    		source: "(989:10) {#if !settingBounty}",
    		ctx
    	});

    	return block;
    }

    // (990:10) <Button type="primary" small on:click="{addBounty}" disabled="{!validBounty()}">
    function create_default_slot_6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1("Submit");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(990:10) <Button type=\\\"primary\\\" small on:click=\\\"{addBounty}\\\" disabled=\\\"{!validBounty()}\\\">",
    		ctx
    	});

    	return block;
    }

    // (978:4) <ModalBody>
    function create_default_slot_5(ctx) {
    	let t0;
    	let div2;
    	let div0;
    	let input;
    	let updating_value;
    	let t1;
    	let div1;
    	let t2;
    	let t3;
    	let current;

    	function input_value_binding(value) {
    		/*input_value_binding*/ ctx[39](value);
    	}

    	let input_props = {
    		placeholder: "value in ETH",
    		type: "number",
    		className: "false"
    	};

    	if (/*newBounty*/ ctx[2] !== void 0) {
    		input_props.value = /*newBounty*/ ctx[2];
    	}

    	input = new Input({ props: input_props, $$inline: true });
    	binding_callbacks.push(() => bind(input, 'value', input_value_binding));
    	let if_block0 = /*settingBounty*/ ctx[6] && create_if_block_25(ctx);
    	let if_block1 = !/*settingBounty*/ ctx[6] && create_if_block_24(ctx);

    	const block = {
    		c: function create() {
    			t0 = text$1("Add to the bounty for this game\n      ");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(input.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			t3 = text$1("\n\n      The bounty is paid in full, minus gas, to the winner of the game.\n      Note the winner must be certified on chain by the token owner, it is not automatically assigned by this client app.");
    			attr_dev(div0, "class", "col-span-2");
    			add_location(div0, file, 980, 8, 34049);
    			attr_dev(div1, "class", "align-middle");
    			add_location(div1, file, 983, 8, 34201);
    			attr_dev(div2, "class", "grid grid-cols-3");
    			add_location(div2, file, 979, 6, 34010);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			mount_component(input, div0, null);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(div1, t2);
    			if (if_block1) if_block1.m(div1, null);
    			insert_dev(target, t3, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const input_changes = {};

    			if (!updating_value && dirty[0] & /*newBounty*/ 4) {
    				updating_value = true;
    				input_changes.value = /*newBounty*/ ctx[2];
    				add_flush_callback(() => updating_value = false);
    			}

    			input.$set(input_changes);

    			if (/*settingBounty*/ ctx[6]) {
    				if (if_block0) {
    					if (dirty[0] & /*settingBounty*/ 64) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_25(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div1, t2);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (!/*settingBounty*/ ctx[6]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*settingBounty*/ 64) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_24(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			destroy_component(input);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(978:4) <ModalBody>",
    		ctx
    	});

    	return block;
    }

    // (976:2) <Modal bind:visible={bountyGame} title="Add to the bounty">
    function create_default_slot_4(ctx) {
    	let modalbody;
    	let current;

    	modalbody = new ModalBody({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalbody_changes = {};

    			if (dirty[0] & /*validBounty, settingBounty, newBounty*/ 32836 | dirty[2] & /*$$scope*/ 2097152) {
    				modalbody_changes.$$scope = { dirty, ctx };
    			}

    			modalbody.$set(modalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(976:2) <Modal bind:visible={bountyGame} title=\\\"Add to the bounty\\\">",
    		ctx
    	});

    	return block;
    }

    // (1008:8) {#if promoteColor === 'black'}
    function create_if_block_22(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "rook ♜";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "knight ♞";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "bishop ♝";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "queen ♛";
    			attr_dev(div0, "class", "cursor-pointer px-4");
    			add_location(div0, file, 1008, 8, 34909);
    			attr_dev(div1, "class", "cursor-pointer px-4");
    			add_location(div1, file, 1012, 8, 35042);
    			attr_dev(div2, "class", "cursor-pointer px-4");
    			add_location(div2, file, 1016, 8, 35179);
    			attr_dev(div3, "class", "cursor-pointer px-4");
    			add_location(div3, file, 1020, 8, 35316);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler_1*/ ctx[41], false, false, false),
    					listen_dev(div1, "click", /*click_handler_2*/ ctx[42], false, false, false),
    					listen_dev(div2, "click", /*click_handler_3*/ ctx[43], false, false, false),
    					listen_dev(div3, "click", /*click_handler_4*/ ctx[44], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(1008:8) {#if promoteColor === 'black'}",
    		ctx
    	});

    	return block;
    }

    // (1026:8) {#if promoteColor === 'white'}
    function create_if_block_21(ctx) {
    	let div0;
    	let t1;
    	let div1;
    	let t3;
    	let div2;
    	let t5;
    	let div3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			div0.textContent = "rook ♖";
    			t1 = space();
    			div1 = element("div");
    			div1.textContent = "knight ♘";
    			t3 = space();
    			div2 = element("div");
    			div2.textContent = "bishop ♗";
    			t5 = space();
    			div3 = element("div");
    			div3.textContent = "queen ♕";
    			attr_dev(div0, "class", "cursor-pointer px-4");
    			add_location(div0, file, 1026, 8, 35504);
    			attr_dev(div1, "class", "cursor-pointer px-4");
    			add_location(div1, file, 1030, 8, 35637);
    			attr_dev(div2, "class", "cursor-pointer px-4");
    			add_location(div2, file, 1034, 8, 35774);
    			attr_dev(div3, "class", "cursor-pointer px-4");
    			add_location(div3, file, 1038, 8, 35911);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div2, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div3, anchor);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler_5*/ ctx[45], false, false, false),
    					listen_dev(div1, "click", /*click_handler_6*/ ctx[46], false, false, false),
    					listen_dev(div2, "click", /*click_handler_7*/ ctx[47], false, false, false),
    					listen_dev(div3, "click", /*click_handler_8*/ ctx[48], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div2);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(1026:8) {#if promoteColor === 'white'}",
    		ctx
    	});

    	return block;
    }

    // (1006:4) <ModalBody>
    function create_default_slot_3(ctx) {
    	let div;
    	let t;
    	let if_block0 = /*promoteColor*/ ctx[8] === 'black' && create_if_block_22(ctx);
    	let if_block1 = /*promoteColor*/ ctx[8] === 'white' && create_if_block_21(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "flex");
    			add_location(div, file, 1006, 6, 34843);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*promoteColor*/ ctx[8] === 'black') {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_22(ctx);
    					if_block0.c();
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*promoteColor*/ ctx[8] === 'white') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_21(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(1006:4) <ModalBody>",
    		ctx
    	});

    	return block;
    }

    // (1004:2) <Modal bind:visible={showPromoteModal} title="Choose Promotion">
    function create_default_slot_2(ctx) {
    	let modalbody;
    	let current;

    	modalbody = new ModalBody({
    			props: {
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalbody_changes = {};

    			if (dirty[0] & /*promoteColor*/ 256 | dirty[2] & /*$$scope*/ 2097152) {
    				modalbody_changes.$$scope = { dirty, ctx };
    			}

    			modalbody.$set(modalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(1004:2) <Modal bind:visible={showPromoteModal} title=\\\"Choose Promotion\\\">",
    		ctx
    	});

    	return block;
    }

    // (1052:6) <Alert type="{alert.type}">
    function create_default_slot_1(ctx) {
    	let t_value = /*alert*/ ctx[80].message + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$alerts*/ 131072 && t_value !== (t_value = /*alert*/ ctx[80].message + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(1052:6) <Alert type=\\\"{alert.type}\\\">",
    		ctx
    	});

    	return block;
    }

    // (1050:4) {#each $alerts as alert}
    function create_each_block_6(ctx) {
    	let div;
    	let alert;
    	let t;
    	let current;
    	let mounted;
    	let dispose;

    	alert = new Alert({
    			props: {
    				type: /*alert*/ ctx[80].type,
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(alert.$$.fragment);
    			t = space();
    			attr_dev(div, "class", "cursor-pointer");
    			add_location(div, file, 1050, 4, 36165);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(alert, div, null);
    			append_dev(div, t);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					div,
    					"click",
    					function () {
    						if (is_function(alerts.clearAlert(/*alert*/ ctx[80]))) alerts.clearAlert(/*alert*/ ctx[80]).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const alert_changes = {};
    			if (dirty[0] & /*$alerts*/ 131072) alert_changes.type = /*alert*/ ctx[80].type;

    			if (dirty[0] & /*$alerts*/ 131072 | dirty[2] & /*$$scope*/ 2097152) {
    				alert_changes.$$scope = { dirty, ctx };
    			}

    			alert.$set(alert_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(alert.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(alert.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(alert);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(1050:4) {#each $alerts as alert}",
    		ctx
    	});

    	return block;
    }

    // (1062:8) {#if typeof $gameId === 'number'}
    function create_if_block_12(ctx) {
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let t6;
    	let p0;
    	let t7;
    	let t8;
    	let t9;
    	let p1;
    	let t10;
    	let t11;
    	let if_block0 = /*$audience*/ ctx[19] && !/*winner*/ ctx[9] && create_if_block_20(ctx);
    	let if_block1 = /*$owner*/ ctx[20] && create_if_block_18(ctx);
    	let if_block2 = /*$myColor*/ ctx[16] && !/*winner*/ ctx[9] && create_if_block_14(ctx);
    	let if_block3 = /*winner*/ ctx[9] && create_if_block_13(ctx);

    	const block = {
    		c: function create() {
    			t0 = text$1("Game ID: ");
    			t1 = text$1(/*$gameId*/ ctx[18]);
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			t4 = space();
    			if (if_block2) if_block2.c();
    			t5 = space();
    			if (if_block3) if_block3.c();
    			t6 = space();
    			p0 = element("p");
    			t7 = text$1("White: ");
    			t8 = text$1(/*$whiteAddress*/ ctx[22]);
    			t9 = space();
    			p1 = element("p");
    			t10 = text$1("Black: ");
    			t11 = text$1(/*$blackAddress*/ ctx[23]);
    			attr_dev(p0, "class", "text-sm");
    			add_location(p0, file, 1098, 10, 37676);
    			attr_dev(p1, "class", "text-sm");
    			add_location(p1, file, 1099, 10, 37732);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t3, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t4, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			if (if_block3) if_block3.m(target, anchor);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, p0, anchor);
    			append_dev(p0, t7);
    			append_dev(p0, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t10);
    			append_dev(p1, t11);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$gameId*/ 262144) set_data_dev(t1, /*$gameId*/ ctx[18]);

    			if (/*$audience*/ ctx[19] && !/*winner*/ ctx[9]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_20(ctx);
    					if_block0.c();
    					if_block0.m(t3.parentNode, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$owner*/ ctx[20]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_18(ctx);
    					if_block1.c();
    					if_block1.m(t4.parentNode, t4);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*$myColor*/ ctx[16] && !/*winner*/ ctx[9]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_14(ctx);
    					if_block2.c();
    					if_block2.m(t5.parentNode, t5);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*winner*/ ctx[9]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_13(ctx);
    					if_block3.c();
    					if_block3.m(t6.parentNode, t6);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (dirty[0] & /*$whiteAddress*/ 4194304) set_data_dev(t8, /*$whiteAddress*/ ctx[22]);
    			if (dirty[0] & /*$blackAddress*/ 8388608) set_data_dev(t11, /*$blackAddress*/ ctx[23]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t3);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t4);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (if_block3) if_block3.d(detaching);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(1062:8) {#if typeof $gameId === 'number'}",
    		ctx
    	});

    	return block;
    }

    // (1066:10) {#if $audience && !winner}
    function create_if_block_20(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "You are in the audience, if this is by mistake try loging out and reconnecting";
    			attr_dev(p, "class", "text-sm");
    			add_location(p, file, 1066, 10, 36707);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(1066:10) {#if $audience && !winner}",
    		ctx
    	});

    	return block;
    }

    // (1070:10) {#if $owner}
    function create_if_block_18(ctx) {
    	let p;
    	let t;
    	let if_block = /*winner*/ ctx[9] && /*$bounty*/ ctx[21] && create_if_block_19(ctx);

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text$1("You are the owner of this game.\n            ");
    			if (if_block) if_block.c();
    			attr_dev(p, "class", "text-sm");
    			add_location(p, file, 1070, 10, 36859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    			if (if_block) if_block.m(p, null);
    		},
    		p: function update(ctx, dirty) {
    			if (/*winner*/ ctx[9] && /*$bounty*/ ctx[21]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_19(ctx);
    					if_block.c();
    					if_block.m(p, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(1070:10) {#if $owner}",
    		ctx
    	});

    	return block;
    }

    // (1073:12) {#if winner && $bounty}
    function create_if_block_19(ctx) {
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Certify Winner";
    			attr_dev(span, "class", "cursor-pointer hover:underline text-blue-300");
    			add_location(span, file, 1073, 12, 36971);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler_9*/ ctx[50], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(1073:12) {#if winner && $bounty}",
    		ctx
    	});

    	return block;
    }

    // (1081:10) {#if $myColor && !winner}
    function create_if_block_14(ctx) {
    	let t0;
    	let t1;
    	let if_block2_anchor;
    	let if_block0 = /*turn*/ ctx[12] === /*$myColor*/ ctx[16] && create_if_block_17(ctx);
    	let if_block1 = /*turn*/ ctx[12] !== /*$myColor*/ ctx[16] && create_if_block_16(ctx);
    	let if_block2 = /*palyerInCheck*/ ctx[13] && create_if_block_15(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block1) if_block1.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*turn*/ ctx[12] === /*$myColor*/ ctx[16]) {
    				if (if_block0) ; else {
    					if_block0 = create_if_block_17(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*turn*/ ctx[12] !== /*$myColor*/ ctx[16]) {
    				if (if_block1) ; else {
    					if_block1 = create_if_block_16(ctx);
    					if_block1.c();
    					if_block1.m(t1.parentNode, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*palyerInCheck*/ ctx[13]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_15(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block1) if_block1.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(1081:10) {#if $myColor && !winner}",
    		ctx
    	});

    	return block;
    }

    // (1082:12) {#if  turn === $myColor}
    function create_if_block_17(ctx) {
    	let b;

    	const block = {
    		c: function create() {
    			b = element("b");
    			b.textContent = "Your Turn";
    			add_location(b, file, 1082, 12, 37257);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, b, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(b);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(1082:12) {#if  turn === $myColor}",
    		ctx
    	});

    	return block;
    }

    // (1085:12) {#if  turn !== $myColor}
    function create_if_block_16(ctx) {
    	let b;

    	const block = {
    		c: function create() {
    			b = element("b");
    			b.textContent = "Opponent's Turn";
    			add_location(b, file, 1085, 12, 37341);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, b, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(b);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(1085:12) {#if  turn !== $myColor}",
    		ctx
    	});

    	return block;
    }

    // (1088:12) {#if palyerInCheck}
    function create_if_block_15(ctx) {
    	let span;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text$1(/*turn*/ ctx[12]);
    			t1 = text$1(" in check!");
    			attr_dev(span, "class", "text-red svelte-1gmu9nd");
    			add_location(span, file, 1088, 12, 37426);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t0);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*turn*/ 4096) set_data_dev(t0, /*turn*/ ctx[12]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(1088:12) {#if palyerInCheck}",
    		ctx
    	});

    	return block;
    }

    // (1093:10) {#if winner}
    function create_if_block_13(ctx) {
    	let h3;
    	let t0;
    	let span;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text$1("Game Over\n            ");
    			span = element("span");
    			t1 = text$1(/*winner*/ ctx[9]);
    			t2 = text$1(" is the Winner!");
    			attr_dev(span, "class", "text-red svelte-1gmu9nd");
    			add_location(span, file, 1095, 12, 37580);
    			add_location(h3, file, 1093, 10, 37541);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, span);
    			append_dev(span, t1);
    			append_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*winner*/ 512) set_data_dev(t1, /*winner*/ ctx[9]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(1093:10) {#if winner}",
    		ctx
    	});

    	return block;
    }

    // (1104:6) {#if $myAddress}
    function create_if_block_11(ctx) {
    	let div;
    	let t0;
    	let b;
    	let t1_value = /*$myAddress*/ ctx[24].slice(0, 5) + "";
    	let t1;
    	let t2;
    	let t3_value = /*$myAddress*/ ctx[24].slice(-5) + "";
    	let t3;
    	let t4;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t0 = text$1("Connected with ");
    			b = element("b");
    			t1 = text$1(t1_value);
    			t2 = text$1("...");
    			t3 = text$1(t3_value);
    			t4 = space();
    			span = element("span");
    			span.textContent = "logout";
    			add_location(b, file, 1105, 23, 37892);
    			attr_dev(span, "class", "hover:underline cursor-pointer text-blue-300");
    			add_location(span, file, 1106, 8, 37957);
    			attr_dev(div, "class", "text-sm text-center");
    			add_location(div, file, 1104, 6, 37835);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, b);
    			append_dev(b, t1);
    			append_dev(b, t2);
    			append_dev(b, t3);
    			append_dev(div, t4);
    			append_dev(div, span);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*logout*/ ctx[31], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$myAddress*/ 16777216 && t1_value !== (t1_value = /*$myAddress*/ ctx[24].slice(0, 5) + "")) set_data_dev(t1, t1_value);
    			if (dirty[0] & /*$myAddress*/ 16777216 && t3_value !== (t3_value = /*$myAddress*/ ctx[24].slice(-5) + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(1104:6) {#if $myAddress}",
    		ctx
    	});

    	return block;
    }

    // (1114:2) {#if !$connected}
    function create_if_block_10(ctx) {
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "Connect To Tableland";
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "btn btn-connect cursor-pointer svelte-1gmu9nd");
    			add_location(button, file, 1115, 4, 38158);
    			attr_dev(div, "class", "container-center svelte-1gmu9nd");
    			add_location(div, file, 1114, 2, 38123);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*connect*/ ctx[28], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(1114:2) {#if !$connected}",
    		ctx
    	});

    	return block;
    }

    // (1120:2) {#if $connected}
    function create_if_block(ctx) {
    	let div;
    	let t;
    	let current;
    	let if_block0 = typeof /*$gameId*/ ctx[18] !== 'number' && create_if_block_5(ctx);
    	let if_block1 = typeof /*$gameId*/ ctx[18] === 'number' && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div, "class", "flex items-start mt-8");
    			add_location(div, file, 1120, 2, 38309);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t);
    			if (if_block1) if_block1.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (typeof /*$gameId*/ ctx[18] !== 'number') {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*$gameId*/ 262144) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (typeof /*$gameId*/ ctx[18] === 'number') {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(1120:2) {#if $connected}",
    		ctx
    	});

    	return block;
    }

    // (1123:4) {#if typeof $gameId !== 'number'}
    function create_if_block_5(ctx) {
    	let div0;
    	let p0;
    	let t1;
    	let t2;
    	let p1;
    	let t3;
    	let p2;
    	let t5;
    	let t6;
    	let p3;
    	let t7;
    	let div1;
    	let t8;
    	let input0;
    	let updating_value;
    	let t9;
    	let input1;
    	let updating_value_1;
    	let t10;
    	let t11;
    	let current;
    	let if_block0 = /*$games*/ ctx[26].length && create_if_block_9(ctx);
    	let if_block1 = /*$ownedGames*/ ctx[27].length && create_if_block_8(ctx);

    	function input0_value_binding(value) {
    		/*input0_value_binding*/ ctx[52](value);
    	}

    	let input0_props = { label: "Player 1 Address" };

    	if (/*newPlayer1Address*/ ctx[0] !== void 0) {
    		input0_props.value = /*newPlayer1Address*/ ctx[0];
    	}

    	input0 = new Input({ props: input0_props, $$inline: true });
    	binding_callbacks.push(() => bind(input0, 'value', input0_value_binding));

    	function input1_value_binding(value) {
    		/*input1_value_binding*/ ctx[53](value);
    	}

    	let input1_props = { label: "Player 2 Address" };

    	if (/*newPlayer2Address*/ ctx[1] !== void 0) {
    		input1_props.value = /*newPlayer2Address*/ ctx[1];
    	}

    	input1 = new Input({ props: input1_props, $$inline: true });
    	binding_callbacks.push(() => bind(input1, 'value', input1_value_binding));
    	let if_block2 = /*minting*/ ctx[3] && create_if_block_7(ctx);
    	let if_block3 = !/*minting*/ ctx[3] && create_if_block_6(ctx);

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "Games you are playing";
    			t1 = space();
    			if (if_block0) if_block0.c();
    			t2 = space();
    			p1 = element("p");
    			t3 = space();
    			p2 = element("p");
    			p2.textContent = "Games you own";
    			t5 = space();
    			if (if_block1) if_block1.c();
    			t6 = space();
    			p3 = element("p");
    			t7 = space();
    			div1 = element("div");
    			t8 = text$1("Mint a game\n      ");
    			create_component(input0.$$.fragment);
    			t9 = space();
    			create_component(input1.$$.fragment);
    			t10 = space();
    			if (if_block2) if_block2.c();
    			t11 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(p0, "class", "font-bold");
    			add_location(p0, file, 1125, 6, 38434);
    			attr_dev(p1, "class", "w-full border border-solid-bottom border-gray-300");
    			add_location(p1, file, 1137, 6, 38990);
    			attr_dev(p2, "class", "font-bold");
    			add_location(p2, file, 1139, 6, 39063);
    			attr_dev(p3, "class", "w-full border border-solid-bottom border-gray-300");
    			add_location(p3, file, 1160, 6, 39904);
    			attr_dev(div0, "class", "w-1/2 px-8 overflow-wrap");
    			add_location(div0, file, 1123, 4, 38388);
    			attr_dev(div1, "class", "w-1/2 px-8");
    			add_location(div1, file, 1163, 4, 39986);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, p0);
    			append_dev(div0, t1);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t2);
    			append_dev(div0, p1);
    			append_dev(div0, t3);
    			append_dev(div0, p2);
    			append_dev(div0, t5);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t6);
    			append_dev(div0, p3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, t8);
    			mount_component(input0, div1, null);
    			append_dev(div1, t9);
    			mount_component(input1, div1, null);
    			append_dev(div1, t10);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div1, t11);
    			if (if_block3) if_block3.m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*$games*/ ctx[26].length) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_9(ctx);
    					if_block0.c();
    					if_block0.m(div0, t2);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*$ownedGames*/ ctx[27].length) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_8(ctx);
    					if_block1.c();
    					if_block1.m(div0, t6);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const input0_changes = {};

    			if (!updating_value && dirty[0] & /*newPlayer1Address*/ 1) {
    				updating_value = true;
    				input0_changes.value = /*newPlayer1Address*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			input0.$set(input0_changes);
    			const input1_changes = {};

    			if (!updating_value_1 && dirty[0] & /*newPlayer2Address*/ 2) {
    				updating_value_1 = true;
    				input1_changes.value = /*newPlayer2Address*/ ctx[1];
    				add_flush_callback(() => updating_value_1 = false);
    			}

    			input1.$set(input1_changes);

    			if (/*minting*/ ctx[3]) {
    				if (if_block2) {
    					if (dirty[0] & /*minting*/ 8) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_7(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div1, t11);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!/*minting*/ ctx[3]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);

    					if (dirty[0] & /*minting*/ 8) {
    						transition_in(if_block3, 1);
    					}
    				} else {
    					if_block3 = create_if_block_6(ctx);
    					if_block3.c();
    					transition_in(if_block3, 1);
    					if_block3.m(div1, null);
    				}
    			} else if (if_block3) {
    				group_outros();

    				transition_out(if_block3, 1, 1, () => {
    					if_block3 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input0.$$.fragment, local);
    			transition_in(input1.$$.fragment, local);
    			transition_in(if_block2);
    			transition_in(if_block3);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input0.$$.fragment, local);
    			transition_out(input1.$$.fragment, local);
    			transition_out(if_block2);
    			transition_out(if_block3);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(div1);
    			destroy_component(input0);
    			destroy_component(input1);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(1123:4) {#if typeof $gameId !== 'number'}",
    		ctx
    	});

    	return block;
    }

    // (1127:6) {#if $games.length}
    function create_if_block_9(ctx) {
    	let each_1_anchor;
    	let each_value_5 = /*$games*/ ctx[26];
    	validate_each_argument(each_value_5);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$games, loadGame*/ 603979776) {
    				each_value_5 = /*$games*/ ctx[26];
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_5.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(1127:6) {#if $games.length}",
    		ctx
    	});

    	return block;
    }

    // (1128:6) {#each $games as game}
    function create_each_block_5(ctx) {
    	let p0;
    	let t0;
    	let p1;
    	let t1;
    	let span;
    	let t2_value = /*game*/ ctx[77].id + "";
    	let t2;
    	let t3;
    	let p2;
    	let t4;
    	let t5_value = formatEther(/*game*/ ctx[77].bounty) + "";
    	let t5;
    	let t6;
    	let p3;
    	let t7;
    	let t8_value = /*game*/ ctx[77].player1 + "";
    	let t8;
    	let t9;
    	let p4;
    	let t10;
    	let t11_value = /*game*/ ctx[77].player2 + "";
    	let t11;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = space();
    			p1 = element("p");
    			t1 = text$1("Game ID: ");
    			span = element("span");
    			t2 = text$1(t2_value);
    			t3 = space();
    			p2 = element("p");
    			t4 = text$1("Game Bounty: ");
    			t5 = text$1(t5_value);
    			t6 = space();
    			p3 = element("p");
    			t7 = text$1("Player 1: ");
    			t8 = text$1(t8_value);
    			t9 = space();
    			p4 = element("p");
    			t10 = text$1("Player 2: ");
    			t11 = text$1(t11_value);
    			attr_dev(p0, "class", "w-full border border-solid-bottom border-gray-300");
    			add_location(p0, file, 1128, 6, 38542);
    			attr_dev(span, "class", "pl-4 hover:underline cursor-pointer text-blue-300");
    			add_location(span, file, 1130, 17, 38652);
    			attr_dev(p1, "class", "truncate");
    			add_location(p1, file, 1129, 6, 38614);
    			attr_dev(p2, "class", "truncate");
    			add_location(p2, file, 1132, 6, 38778);
    			attr_dev(p3, "class", "truncate");
    			add_location(p3, file, 1133, 6, 38854);
    			attr_dev(p4, "class", "truncate");
    			add_location(p4, file, 1134, 6, 38909);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t1);
    			append_dev(p1, span);
    			append_dev(span, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t4);
    			append_dev(p2, t5);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, t7);
    			append_dev(p3, t8);
    			insert_dev(target, t9, anchor);
    			insert_dev(target, p4, anchor);
    			append_dev(p4, t10);
    			append_dev(p4, t11);

    			if (!mounted) {
    				dispose = listen_dev(
    					span,
    					"click",
    					function () {
    						if (is_function(/*loadGame*/ ctx[29](/*game*/ ctx[77]))) /*loadGame*/ ctx[29](/*game*/ ctx[77]).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$games*/ 67108864 && t2_value !== (t2_value = /*game*/ ctx[77].id + "")) set_data_dev(t2, t2_value);
    			if (dirty[0] & /*$games*/ 67108864 && t5_value !== (t5_value = formatEther(/*game*/ ctx[77].bounty) + "")) set_data_dev(t5, t5_value);
    			if (dirty[0] & /*$games*/ 67108864 && t8_value !== (t8_value = /*game*/ ctx[77].player1 + "")) set_data_dev(t8, t8_value);
    			if (dirty[0] & /*$games*/ 67108864 && t11_value !== (t11_value = /*game*/ ctx[77].player2 + "")) set_data_dev(t11, t11_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t9);
    			if (detaching) detach_dev(p4);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(1128:6) {#each $games as game}",
    		ctx
    	});

    	return block;
    }

    // (1141:6) {#if $ownedGames.length}
    function create_if_block_8(ctx) {
    	let each_1_anchor;
    	let each_value_4 = /*$ownedGames*/ ctx[27];
    	validate_each_argument(each_value_4);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$ownedGames, bountyGame, loadGame*/ 671088672) {
    				each_value_4 = /*$ownedGames*/ ctx[27];
    				validate_each_argument(each_value_4);
    				let i;

    				for (i = 0; i < each_value_4.length; i += 1) {
    					const child_ctx = get_each_context_4(ctx, each_value_4, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_4(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_4.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(1141:6) {#if $ownedGames.length}",
    		ctx
    	});

    	return block;
    }

    // (1142:6) {#each $ownedGames as ownedGame}
    function create_each_block_4(ctx) {
    	let p0;
    	let t0;
    	let p1;
    	let t1;
    	let span0;
    	let t2_value = /*ownedGame*/ ctx[74].id + "";
    	let t2;
    	let t3;
    	let p2;
    	let t4;
    	let t5_value = formatEther(/*ownedGame*/ ctx[74].bounty) + "";
    	let t5;
    	let t6;
    	let span1;
    	let t8;
    	let p3;
    	let t9;
    	let t10_value = /*ownedGame*/ ctx[74].player1 + "";
    	let t10;
    	let t11;
    	let p4;
    	let t12;
    	let t13_value = /*ownedGame*/ ctx[74].player2 + "";
    	let t13;
    	let t14;
    	let p5;
    	let t15;
    	let t16_value = /*ownedGame*/ ctx[74].winner + "";
    	let t16;
    	let mounted;
    	let dispose;

    	function click_handler_10() {
    		return /*click_handler_10*/ ctx[51](/*ownedGame*/ ctx[74]);
    	}

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			t0 = space();
    			p1 = element("p");
    			t1 = text$1("Game ID:\n        ");
    			span0 = element("span");
    			t2 = text$1(t2_value);
    			t3 = space();
    			p2 = element("p");
    			t4 = text$1("Game Bounty: ");
    			t5 = text$1(t5_value);
    			t6 = space();
    			span1 = element("span");
    			span1.textContent = "Add Bounty";
    			t8 = space();
    			p3 = element("p");
    			t9 = text$1("Player 1: ");
    			t10 = text$1(t10_value);
    			t11 = space();
    			p4 = element("p");
    			t12 = text$1("Player 2: ");
    			t13 = text$1(t13_value);
    			t14 = space();
    			p5 = element("p");
    			t15 = text$1("Winner: ");
    			t16 = text$1(t16_value);
    			attr_dev(p0, "class", "w-full border border-solid-bottom border-gray-300");
    			add_location(p0, file, 1142, 6, 39178);
    			attr_dev(span0, "class", "pl-4 cursor-pointer hover:underline text-blue-300");
    			add_location(span0, file, 1145, 8, 39296);
    			attr_dev(p1, "class", "truncate");
    			add_location(p1, file, 1143, 6, 39250);
    			attr_dev(span1, "class", "pl-4 cursor-pointer hover:underline text-blue-300");
    			add_location(span1, file, 1151, 8, 39540);
    			attr_dev(p2, "class", "truncate");
    			add_location(p2, file, 1149, 6, 39452);
    			attr_dev(p3, "class", "truncate");
    			add_location(p3, file, 1155, 6, 39701);
    			attr_dev(p4, "class", "truncate");
    			add_location(p4, file, 1156, 6, 39761);
    			attr_dev(p5, "class", "truncate");
    			add_location(p5, file, 1157, 6, 39821);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, t1);
    			append_dev(p1, span0);
    			append_dev(span0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, p2, anchor);
    			append_dev(p2, t4);
    			append_dev(p2, t5);
    			append_dev(p2, t6);
    			append_dev(p2, span1);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, t9);
    			append_dev(p3, t10);
    			insert_dev(target, t11, anchor);
    			insert_dev(target, p4, anchor);
    			append_dev(p4, t12);
    			append_dev(p4, t13);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, p5, anchor);
    			append_dev(p5, t15);
    			append_dev(p5, t16);

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						span0,
    						"click",
    						function () {
    							if (is_function(/*loadGame*/ ctx[29](/*ownedGame*/ ctx[74]))) /*loadGame*/ ctx[29](/*ownedGame*/ ctx[74]).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					),
    					listen_dev(span1, "click", click_handler_10, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$ownedGames*/ 134217728 && t2_value !== (t2_value = /*ownedGame*/ ctx[74].id + "")) set_data_dev(t2, t2_value);
    			if (dirty[0] & /*$ownedGames*/ 134217728 && t5_value !== (t5_value = formatEther(/*ownedGame*/ ctx[74].bounty) + "")) set_data_dev(t5, t5_value);
    			if (dirty[0] & /*$ownedGames*/ 134217728 && t10_value !== (t10_value = /*ownedGame*/ ctx[74].player1 + "")) set_data_dev(t10, t10_value);
    			if (dirty[0] & /*$ownedGames*/ 134217728 && t13_value !== (t13_value = /*ownedGame*/ ctx[74].player2 + "")) set_data_dev(t13, t13_value);
    			if (dirty[0] & /*$ownedGames*/ 134217728 && t16_value !== (t16_value = /*ownedGame*/ ctx[74].winner + "")) set_data_dev(t16, t16_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t11);
    			if (detaching) detach_dev(p4);
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(p5);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(1142:6) {#each $ownedGames as ownedGame}",
    		ctx
    	});

    	return block;
    }

    // (1169:6) {#if minting}
    function create_if_block_7(ctx) {
    	let spinner;
    	let current;

    	spinner = new Spinner({
    			props: { label: "Minting..." },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(spinner.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(spinner, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(spinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(spinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(spinner, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(1169:6) {#if minting}",
    		ctx
    	});

    	return block;
    }

    // (1172:6) {#if !minting}
    function create_if_block_6(ctx) {
    	let button;
    	let current;

    	button = new Button({
    			props: {
    				type: "primary",
    				disabled: !/*validMint*/ ctx[14](),
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	button.$on("click", /*mint*/ ctx[32]);

    	const block = {
    		c: function create() {
    			create_component(button.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(button, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const button_changes = {};
    			if (dirty[0] & /*validMint*/ 16384) button_changes.disabled = !/*validMint*/ ctx[14]();

    			if (dirty[2] & /*$$scope*/ 2097152) {
    				button_changes.$$scope = { dirty, ctx };
    			}

    			button.$set(button_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(button.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(button.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(button, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(1172:6) {#if !minting}",
    		ctx
    	});

    	return block;
    }

    // (1173:6) <Button type="primary" on:click="{mint}" disabled="{!validMint()}">
    function create_default_slot(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text$1("Mint");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(1173:6) <Button type=\\\"primary\\\" on:click=\\\"{mint}\\\" disabled=\\\"{!validMint()}\\\">",
    		ctx
    	});

    	return block;
    }

    // (1180:4) {#if typeof $gameId === 'number'}
    function create_if_block_1(ctx) {
    	let div0;
    	let t0;
    	let div2;
    	let t1;
    	let h3;
    	let t3;
    	let div1;
    	let table0;
    	let tr0;
    	let th0;
    	let t4;
    	let th1;
    	let t6;
    	let t7;
    	let table1;
    	let tr1;
    	let th2;
    	let t9;
    	let each_value_2 = /*pieceSpace*/ ctx[10];
    	validate_each_argument(each_value_2);
    	let each_blocks_2 = [];

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
    	}

    	let if_block = /*$myColor*/ ctx[16] && create_if_block_4(ctx);
    	let each_value_1 = /*history*/ ctx[11];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	let each_value = /*history*/ ctx[11];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t0 = space();
    			div2 = element("div");
    			if (if_block) if_block.c();
    			t1 = space();
    			h3 = element("h3");
    			h3.textContent = "Moves";
    			t3 = space();
    			div1 = element("div");
    			table0 = element("table");
    			tr0 = element("tr");
    			th0 = element("th");
    			t4 = space();
    			th1 = element("th");
    			th1.textContent = "White";
    			t6 = space();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t7 = space();
    			table1 = element("table");
    			tr1 = element("tr");
    			th2 = element("th");
    			th2.textContent = "Black";
    			t9 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div0, "class", "chessboard svelte-1gmu9nd");
    			add_location(div0, file, 1180, 4, 40449);
    			attr_dev(h3, "class", "w-64");
    			add_location(h3, file, 1207, 6, 41205);
    			add_location(th0, file, 1212, 12, 41333);
    			add_location(th1, file, 1213, 12, 41355);
    			add_location(tr0, file, 1211, 10, 41316);
    			attr_dev(table0, "class", "move-table svelte-1gmu9nd");
    			add_location(table0, file, 1210, 8, 41279);
    			add_location(th2, file, 1227, 12, 41665);
    			add_location(tr1, file, 1226, 10, 41648);
    			attr_dev(table1, "class", "move-table svelte-1gmu9nd");
    			add_location(table1, file, 1225, 8, 41611);
    			attr_dev(div1, "class", "flex items-start");
    			add_location(div1, file, 1209, 6, 41240);
    			attr_dev(div2, "class", "history svelte-1gmu9nd");
    			add_location(div2, file, 1200, 4, 41075);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].m(div0, null);
    			}

    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			if (if_block) if_block.m(div2, null);
    			append_dev(div2, t1);
    			append_dev(div2, h3);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, table0);
    			append_dev(table0, tr0);
    			append_dev(tr0, th0);
    			append_dev(tr0, t4);
    			append_dev(tr0, th1);
    			append_dev(table0, t6);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(table0, null);
    			}

    			append_dev(div1, t7);
    			append_dev(div1, table1);
    			append_dev(table1, tr1);
    			append_dev(tr1, th2);
    			append_dev(table1, t9);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(table1, null);
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*pieceSpace, $myColor*/ 66560 | dirty[1] & /*dropPiece*/ 16) {
    				each_value_2 = /*pieceSpace*/ ctx[10];
    				validate_each_argument(each_value_2);
    				let i;

    				for (i = 0; i < each_value_2.length; i += 1) {
    					const child_ctx = get_each_context_2(ctx, each_value_2, i);

    					if (each_blocks_2[i]) {
    						each_blocks_2[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_2[i] = create_each_block_2(child_ctx);
    						each_blocks_2[i].c();
    						each_blocks_2[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks_2.length; i += 1) {
    					each_blocks_2[i].d(1);
    				}

    				each_blocks_2.length = each_value_2.length;
    			}

    			if (/*$myColor*/ ctx[16]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_4(ctx);
    					if_block.c();
    					if_block.m(div2, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty[0] & /*history*/ 2048) {
    				each_value_1 = /*history*/ ctx[11];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(table0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty[0] & /*history*/ 2048) {
    				each_value = /*history*/ ctx[11];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(table1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			destroy_each(each_blocks_2, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(1180:4) {#if typeof $gameId === 'number'}",
    		ctx
    	});

    	return block;
    }

    // (1184:6) {#each row as square, squareIndex}
    function create_each_block_3(ctx) {
    	let div;
    	let html_tag;
    	let raw_value = /*pieceSpace*/ ctx[10][colorTransform(/*rowIndex*/ ctx[70], /*$myColor*/ ctx[16])][colorTransform(/*squareIndex*/ ctx[73], /*$myColor*/ ctx[16])] + "";
    	let t;
    	let div_data_location_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			html_tag = new HtmlTag(false);
    			t = space();
    			html_tag.a = t;

    			attr_dev(div, "class", "" + (null_to_empty((/*rowIndex*/ ctx[70] % 2 + /*squareIndex*/ ctx[73] % 8) % 2
    			? 'black'
    			: 'white') + " svelte-1gmu9nd"));

    			attr_dev(div, "data-location", div_data_location_value = "" + (colorTransform(/*rowIndex*/ ctx[70], /*$myColor*/ ctx[16]) + "," + colorTransform(/*squareIndex*/ ctx[73], /*$myColor*/ ctx[16])));
    			add_location(div, file, 1185, 8, 40567);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			html_tag.m(raw_value, div);
    			append_dev(div, t);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div, "dragover", dragOver, false, false, false),
    					listen_dev(div, "drop", /*dropPiece*/ ctx[35], false, false, false),
    					listen_dev(div, "dragstart", pickupPiece, false, false, false),
    					listen_dev(div, "dragend", putdownPiece, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*pieceSpace, $myColor*/ 66560 && raw_value !== (raw_value = /*pieceSpace*/ ctx[10][colorTransform(/*rowIndex*/ ctx[70], /*$myColor*/ ctx[16])][colorTransform(/*squareIndex*/ ctx[73], /*$myColor*/ ctx[16])] + "")) html_tag.p(raw_value);

    			if (dirty[0] & /*$myColor*/ 65536 && div_data_location_value !== (div_data_location_value = "" + (colorTransform(/*rowIndex*/ ctx[70], /*$myColor*/ ctx[16]) + "," + colorTransform(/*squareIndex*/ ctx[73], /*$myColor*/ ctx[16])))) {
    				attr_dev(div, "data-location", div_data_location_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(1184:6) {#each row as square, squareIndex}",
    		ctx
    	});

    	return block;
    }

    // (1183:6) {#each pieceSpace as row, rowIndex}
    function create_each_block_2(ctx) {
    	let each_1_anchor;
    	let each_value_3 = /*row*/ ctx[68];
    	validate_each_argument(each_value_3);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$myColor, pieceSpace*/ 66560 | dirty[1] & /*dropPiece*/ 16) {
    				each_value_3 = /*row*/ ctx[68];
    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_3.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(1183:6) {#each pieceSpace as row, rowIndex}",
    		ctx
    	});

    	return block;
    }

    // (1202:6) {#if $myColor}
    function create_if_block_4(ctx) {
    	let h3;
    	let t0;
    	let b;
    	let t1;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			t0 = text$1("You are playing as ");
    			b = element("b");
    			t1 = text$1(/*$myColor*/ ctx[16]);
    			add_location(b, file, 1203, 27, 41156);
    			add_location(h3, file, 1202, 6, 41124);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    			append_dev(h3, t0);
    			append_dev(h3, b);
    			append_dev(b, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$myColor*/ 65536) set_data_dev(t1, /*$myColor*/ ctx[16]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(1202:6) {#if $myColor}",
    		ctx
    	});

    	return block;
    }

    // (1217:10) {#if !(i % 2)}
    function create_if_block_3(ctx) {
    	let tr;
    	let td0;
    	let t0_value = 1 + /*i*/ ctx[66] / 2 + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*move*/ ctx[64].notation + "";
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text$1(t2_value);
    			t3 = space();
    			add_location(td0, file, 1218, 12, 41475);
    			add_location(td1, file, 1219, 12, 41510);
    			add_location(tr, file, 1217, 10, 41458);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*history*/ 2048 && t2_value !== (t2_value = /*move*/ ctx[64].notation + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(1217:10) {#if !(i % 2)}",
    		ctx
    	});

    	return block;
    }

    // (1216:10) {#each history as move, i}
    function create_each_block_1(ctx) {
    	let if_block_anchor;
    	let if_block = !(/*i*/ ctx[66] % 2) && create_if_block_3(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (!(/*i*/ ctx[66] % 2)) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(1216:10) {#each history as move, i}",
    		ctx
    	});

    	return block;
    }

    // (1231:10) {#if i % 2}
    function create_if_block_2(ctx) {
    	let tr;
    	let td;
    	let t0_value = /*move*/ ctx[64].notation + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td = element("td");
    			t0 = text$1(t0_value);
    			t1 = space();
    			add_location(td, file, 1232, 12, 41782);
    			add_location(tr, file, 1231, 10, 41765);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td);
    			append_dev(td, t0);
    			append_dev(tr, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*history*/ 2048 && t0_value !== (t0_value = /*move*/ ctx[64].notation + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(1231:10) {#if i % 2}",
    		ctx
    	});

    	return block;
    }

    // (1230:10) {#each history as move, i}
    function create_each_block(ctx) {
    	let if_block_anchor;
    	let if_block = /*i*/ ctx[66] % 2 && create_if_block_2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty$1();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*i*/ ctx[66] % 2) if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(1230:10) {#each history as move, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let main;
    	let t0;
    	let t1;
    	let modal;
    	let updating_visible;
    	let t2;
    	let div0;
    	let t3;
    	let div3;
    	let div2;
    	let div1;
    	let span;
    	let t5;
    	let t6;
    	let t7;
    	let t8;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*newGame*/ ctx[4] && create_if_block_26(ctx);
    	let if_block1 = /*bountyGame*/ ctx[5] && create_if_block_23(ctx);

    	function modal_visible_binding_2(value) {
    		/*modal_visible_binding_2*/ ctx[49](value);
    	}

    	let modal_props = {
    		title: "Choose Promotion",
    		$$slots: { default: [create_default_slot_2] },
    		$$scope: { ctx }
    	};

    	if (/*showPromoteModal*/ ctx[7] !== void 0) {
    		modal_props.visible = /*showPromoteModal*/ ctx[7];
    	}

    	modal = new Modal({ props: modal_props, $$inline: true });
    	binding_callbacks.push(() => bind(modal, 'visible', modal_visible_binding_2));
    	let each_value_6 = /*$alerts*/ ctx[17];
    	validate_each_argument(each_value_6);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let if_block2 = typeof /*$gameId*/ ctx[18] === 'number' && create_if_block_12(ctx);
    	let if_block3 = /*$myAddress*/ ctx[24] && create_if_block_11(ctx);
    	let if_block4 = !/*$connected*/ ctx[25] && create_if_block_10(ctx);
    	let if_block5 = /*$connected*/ ctx[25] && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			main = element("main");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			create_component(modal.$$.fragment);
    			t2 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			span.textContent = "Tableland Chess";
    			t5 = space();
    			if (if_block2) if_block2.c();
    			t6 = space();
    			if (if_block3) if_block3.c();
    			t7 = space();
    			if (if_block4) if_block4.c();
    			t8 = space();
    			if (if_block5) if_block5.c();
    			attr_dev(div0, "class", "fixed left-4 right-4");
    			add_location(div0, file, 1048, 2, 36097);
    			attr_dev(span, "class", "cursor-pointer hover:underline text-blue-300");
    			add_location(span, file, 1059, 8, 36480);
    			attr_dev(div1, "class", "col-span-5");
    			add_location(div1, file, 1057, 6, 36446);
    			attr_dev(div2, "class", "mt-8 grid grid-cols-6 gap-4 text-3xl text-center font-mono font-semibold");
    			add_location(div2, file, 1056, 4, 36353);
    			attr_dev(div3, "class", "text-center");
    			add_location(div3, file, 1055, 2, 36323);
    			attr_dev(main, "class", "relative");
    			add_location(main, file, 957, 0, 33325);
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, main, anchor);
    			if (if_block0) if_block0.m(main, null);
    			append_dev(main, t0);
    			if (if_block1) if_block1.m(main, null);
    			append_dev(main, t1);
    			mount_component(modal, main, null);
    			append_dev(main, t2);
    			append_dev(main, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(main, t3);
    			append_dev(main, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(div1, t5);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div2, t6);
    			if (if_block3) if_block3.m(div2, null);
    			append_dev(main, t7);
    			if (if_block4) if_block4.m(main, null);
    			append_dev(main, t8);
    			if (if_block5) if_block5.m(main, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*unloadGame*/ ctx[30], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*newGame*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*newGame*/ 16) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_26(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(main, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*bountyGame*/ ctx[5]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty[0] & /*bountyGame*/ 32) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_23(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(main, t1);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			const modal_changes = {};

    			if (dirty[0] & /*promoteColor*/ 256 | dirty[2] & /*$$scope*/ 2097152) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_visible && dirty[0] & /*showPromoteModal*/ 128) {
    				updating_visible = true;
    				modal_changes.visible = /*showPromoteModal*/ ctx[7];
    				add_flush_callback(() => updating_visible = false);
    			}

    			modal.$set(modal_changes);

    			if (dirty[0] & /*$alerts*/ 131072) {
    				each_value_6 = /*$alerts*/ ctx[17];
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_6.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (typeof /*$gameId*/ ctx[18] === 'number') {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_12(ctx);
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*$myAddress*/ ctx[24]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_11(ctx);
    					if_block3.c();
    					if_block3.m(div2, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (!/*$connected*/ ctx[25]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_10(ctx);
    					if_block4.c();
    					if_block4.m(main, t8);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*$connected*/ ctx[25]) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);

    					if (dirty[0] & /*$connected*/ 33554432) {
    						transition_in(if_block5, 1);
    					}
    				} else {
    					if_block5 = create_if_block(ctx);
    					if_block5.c();
    					transition_in(if_block5, 1);
    					if_block5.m(main, null);
    				}
    			} else if (if_block5) {
    				group_outros();

    				transition_out(if_block5, 1, 1, () => {
    					if_block5 = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(modal.$$.fragment, local);

    			for (let i = 0; i < each_value_6.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(modal.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean_1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(main);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(modal);
    			destroy_each(each_blocks, detaching);
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const pieceCodes = {
    	'black-rook': '&#9820;',
    	'black-knight': '&#9822;',
    	'black-bishop': '&#9821;',
    	'black-queen': '&#9819;',
    	'white-rook': '&#9814;',
    	'white-knight': '&#9816;',
    	'white-bishop': '&#9815;',
    	'white-queen': '&#9813;'
    };

    const getInitialState = function () {
    	return [
    		[
    			`<div
          class="piece black-rook"
          data-piece="black-rook1"
          draggable="true"
        >&#9820;</div>`,
    			`<div
          class="piece black-knight"
          data-piece="black-knight1"
          draggable="true"
        >&#9822;</div>`,
    			`<div
          class="piece black-bishop"
          data-piece="black-bishop1"
          draggable="true"
        >&#9821;</div>`,
    			`<div
          class="piece black-queen"
          data-piece="black-queen"
          draggable="true"
        >&#9819;</div>`,
    			`<div
          class="piece black-king"
          data-piece="black-king"
          draggable="true"
        >&#9818;</div>`,
    			`<div
          class="piece black-bishop"
          data-piece="black-bishop2"
          draggable="true"
        >&#9821;</div>`,
    			`<div
          class="piece black-knight"
          data-piece="black-knight2"
          draggable="true"
        >&#9822;</div>`,
    			`<div
          class="piece black-rook"
          data-piece="black-rook2"
          draggable="true"
        >&#9820;</div>`
    		],
    		[
    			`<div
          class="piece pawn"
          data-piece="black-pawn1"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn2"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn3"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn4"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn5"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn6"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn7"
          draggable="true"
        >&#9823;</div>`,
    			`<div
          class="piece pawn"
          data-piece="black-pawn8"
          draggable="true"
        >&#9823;</div>`
    		],
    		['', '', '', '', '', '', '', ''],
    		['', '', '', '', '', '', '', ''],
    		['', '', '', '', '', '', '', ''],
    		['', '', '', '', '', '', '', ''],
    		[
    			`<div
          class="piece pawn"
          data-piece="white-pawn1"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn2"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn3"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn4"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn5"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn6"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn7"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`,
    			`<div
          class="piece pawn"
          data-piece="white-pawn8"
          draggable="true"
          on:dragstart="{pickupPiece}"
          on:dragend="{putdownPiece}"
        >&#9817;</div>`
    		],
    		[
    			`<div
          class="piece white-rook"
          data-piece="white-rook1"
          draggable="true"
        >&#9814;</div>`,
    			`<div
          class="piece white-knight"
          data-piece="white-knight1"
          draggable="true"
        >&#9816;</div>`,
    			`<div
          class="piece white-bishop"
          data-piece="white-bishop1"
          draggable="true"
        >&#9815;</div>`,
    			`<div
          class="piece white-queen"
          data-piece="white-queen"
          draggable="true"
        >&#9813;</div>`,
    			`<div
          class="piece white-king"
          data-piece="white-king"
          draggable="true"
        >&#9812;</div>`,
    			`<div
          class="piece white-bishop"
          data-piece="white-bishop2"
          draggable="true"
        >&#9815;</div>`,
    			`<div
          class="piece white-knight"
          data-piece="white-knight2"
          draggable="true"
        >&#9816;</div>`,
    			`<div
          class="piece white-rook"
          data-piece="white-rook2"
          draggable="true"
        >&#9814;</div>`
    		]
    	];
    };

    const rowMap = {
    	0: '8',
    	1: '7',
    	2: '6',
    	3: '5',
    	4: '4',
    	5: '3',
    	6: '2',
    	7: '1'
    };

    const colMap = {
    	0: 'a',
    	1: 'b',
    	2: 'c',
    	3: 'd',
    	4: 'e',
    	5: 'f',
    	6: 'g',
    	7: 'h'
    };

    const pieceMap = {
    	king: 'K',
    	queen: 'Q',
    	bishop: 'B',
    	knight: 'N',
    	rook: 'R',
    	pawn: ''
    };

    const Board = function (params = {}) {
    	(this.pieceSpace = params.pieceSpace || getInitialState(), this.history = params.history || [], this.turn = params.turn || 'white', this.palyerInCheck = params.palyerInCheck || false, this.whiteCanCastleLong = params.whiteCanCastleLong || true, this.whiteCanCastleShort = params.whiteCanCastleShort || true, this.blackCanCastleLong = params.blackCanCastleLong || true, this.blackCanCastleShort = params.blackCanCastleShort || true);
    };

    Board.prototype.reset = function () {
    	(this.pieceSpace = getInitialState(), this.history = [], this.turn = 'white', this.palyerInCheck = false, this.whiteCanCastleLong = true, this.whiteCanCastleShort = true, this.blackCanCastleLong = true, this.blackCanCastleShort = true);
    };

    Board.prototype.doMove = function (piece, from, to, promoted) {
    	const color = this.getPieceColor(piece);
    	const pieceName = this.getPieceName(piece);
    	console.log(`Moving ${piece} from ${from} to ${to} ${promoted ? ` promoting to ${promoted}` : ''}`);

    	// NOTE: it's important that we do these steps in the correct order
    	// en passant is the only move in chess where the captured piece is not
    	// on the square the capturing piece is moving to, we handle that here
    	const enPassant = this.isEnPassant(from, to);

    	if (enPassant) {
    		if (color === 'black') this.pieceSpace[to[0] - 1][to[1]] = '';
    		if (color === 'white') this.pieceSpace[to[0] + 1][to[1]] = '';
    	}

    	this.history.push({
    		from,
    		to,
    		piece,
    		notation: this.getMoveNotation(from, to, promoted),
    		capture: this.getCapturedPiece(from, to),
    		enPassant
    	});

    	// do the actual move
    	this.pieceSpace[to[0]][to[1]] = this.pieceSpace[from[0]][from[1]];

    	this.pieceSpace[from[0]][from[1]] = '';

    	// if needed to the promotion
    	if (promoted) {
    		const promoCount = this.pieceSpace.reduce(
    			(highestNumber, row) => {
    				const rowNum = row.reduce(
    					(highestNum, cell) => {
    						if (this.getPieceColor(cell) !== color) return;
    						if (this.getPieceName(cell) !== promoted) return;
    						const numString = this.getPieceNumber(cell);
    						if (numString > highestNumber) return numString;
    						return highestNum;
    					},
    					'0'
    				);

    				if (rowNum > highestNumber) return rowNum;
    				return highestNumber;
    			},
    			'0'
    		);

    		this.pieceSpace[to[0]][to[1]] = `<div
          class="piece ${color}-${promoted}"
          data-piece="${color}-${promoted}${Number(promoCount) + 1}"
          draggable="true"
        >${pieceCodes[`${color}-${promoted}`]}</div>`;
    	}

    	// if castling also move the second piece in the castling
    	if (this.isCastle(pieceName, from, to)) {
    		// player moved king to the left
    		if (from[1] === 4 && to[1] === 2) {
    			this.pieceSpace[from[0]][3] = this.pieceSpace[from[0]][0];
    			this.pieceSpace[from[0]][0] = '';
    		}

    		// player moved king to the right
    		if (from[1] === 4 && to[1] === 6) {
    			this.pieceSpace[from[0]][5] = this.pieceSpace[from[0]][7];
    			this.pieceSpace[from[0]][7] = '';
    		}
    	}

    	// track if castling is still valid
    	if (pieceName === 'rook') {
    		const rookNumber = piece.match('1') ? 1 : 2;

    		if (color === 'white' && rookNumber === 1) {
    			this.whiteCanCastleLong = false;
    		} else if (color === 'white' && rookNumber === 2) {
    			this.whiteCanCastleShort = false;
    		} else if (color === 'black' && rookNumber === 1) {
    			this.blackCanCastleLong = false;
    		} else if (color === 'black' && rookNumber === 2) {
    			this.blackCanCastleShort = false;
    		}
    	} else if (pieceName === 'king') {
    		if (color === 'white') {
    			this.whiteCanCastleLong = false;
    			this.whiteCanCastleShort = false;
    		} else if (color === 'black') {
    			this.blackCanCastleLong = false;
    			this.blackCanCastleShort = false;
    		}
    	}

    	// See if this move put the other player in check
    	const opponentColor = this.getOpponentColor(color);

    	if (this.inCheck(opponentColor)) {
    		this.palyerInCheck = true;
    	} else {
    		this.palyerInCheck = false;
    	}

    	this.turn = this.getOpponentColor(this.turn);
    };

    // undo the last move. useful for testing future state of a board
    Board.prototype.undoMove = function (piece, from, to) {
    	const lastMove = this.history[this.history.length - 1];

    	// TODO: this won't undo a castle ATM, but we are only using this to test checkmate so thats fine
    	this.doMove(lastMove.piece, lastMove.to, lastMove.from);

    	// undo catpures
    	if (lastMove.capture) {
    		const capturedPiece = lastMove.capture;

    		const captureLoc = lastMove.enPassant
    		? [lastMove.from[0], lastMove.to[1]]
    		: [lastMove.to[0], lastMove.to[1]];

    		this.pieceSpace[captureLoc[0]][captureLoc[1]] = capturedPiece;
    	}

    	this.turn = this.getPieceColor(lastMove.piece);

    	// remove the "undo" and the move from history
    	this.history.pop();

    	this.history.pop();
    };

    // this will indicate if the (from, to) move is allowed because of en passant
    Board.prototype.isEnPassant = function (from, to) {
    	if (this.getPieceName(this.pieceSpace[from[0]][from[1]]) !== 'pawn') return false;

    	// look through history and decide
    	const lastMove = this.history[this.history.length - 1];

    	if (!lastMove) return false;
    	if (this.getPieceName(lastMove.piece) !== 'pawn') return false;
    	const pawnColor = this.getPieceColor(lastMove.piece);

    	// make sure the last move was a 2 square move
    	if (pawnColor === 'white' && lastMove.to[0] !== 4) return false;

    	if (pawnColor === 'white' && lastMove.from[0] !== 6) return false;
    	if (pawnColor === 'black' && lastMove.to[0] !== 3) return false;
    	if (pawnColor === 'black' && lastMove.from[0] !== 1) return false;

    	// make sure that the proposed move puts the pawn 1 square behind the last move
    	if (lastMove.to[1] !== to[1]) return false;

    	if (pawnColor === 'white' && lastMove.to[0] - to[0] !== -1) return false;
    	if (pawnColor === 'black' && lastMove.to[0] - to[0] !== 1) return false;
    	return true;
    };

    Board.prototype.getMoveNotation = function (from, to, promoted) {
    	const fromSquare = rowMap[from[0]] + colMap[from[1]];
    	const toSquare = rowMap[to[0]] + colMap[to[1]];

    	// Move hasn't happened yet
    	const piece = pieceMap[this.getPieceName(this.pieceSpace[from[0]][from[1]])];

    	const capture = !!this.pieceSpace[to[0]][to[1]] || this.isEnPassant(from, to);
    	return `${piece}${fromSquare}${capture ? 'x' : '-'}${toSquare}${promoted ? pieceMap[promoted] : ''}`;
    };

    // this gets the piece that would be captured if from->to move happend
    Board.prototype.getCapturedPiece = function (from, to) {
    	if (!from) return;
    	const enPassant = this.isEnPassant(from, to);

    	// if it is en passant, the piece on the "from" row and "to" column is being captured
    	if (enPassant) return this.pieceSpace[from[0]][to[1]];

    	// this will be a piece string, or an empty string
    	return this.pieceSpace[to[0]][to[1]];
    };

    Board.prototype.isCastle = function (pieceName, from, to) {
    	if (pieceName !== 'king') return false;

    	if (from[0] === 0 && from[1] === 4 && (to[0] === 0 && to[1] === 2 || to[0] === 0 && to[1] === 6)) {
    		return true;
    	}

    	if (from[0] === 7 && from[1] === 4 && (to[0] === 7 && to[1] === 2 || to[0] === 7 && to[1] === 6)) {
    		return true;
    	}
    };

    Board.prototype.getKingLocation = function (color) {
    	let rowNum, colNum;

    	this.pieceSpace.find((row, i) => {
    		const king = row.find((square, j) => {
    			const name = this.getPieceName(square);
    			const clr = this.getPieceColor(square);

    			if (name === 'king' && clr === color) {
    				rowNum = i;
    				colNum = j;
    				return true;
    			}
    		});

    		if (king) return true;
    	});

    	return [rowNum, colNum];
    };

    Board.prototype.getPieceName = function (text) {
    	if (text.match('pawn')) return 'pawn';
    	if (text.match('rook')) return 'rook';
    	if (text.match('knight')) return 'knight';
    	if (text.match('bishop')) return 'bishop';
    	if (text.match('queen')) return 'queen';
    	if (text.match('king')) return 'king';
    };

    Board.prototype.getPieceColor = function (text) {
    	if (text.match('white')) return 'white';
    	if (text.match('black')) return 'black';
    	return '';
    };

    // max of 10 pieces with same type
    Board.prototype.getPieceNumber = function (text) {
    	if (text.match('0')) return '0';
    	if (text.match('1')) return '1';
    	if (text.match('2')) return '2';
    	if (text.match('3')) return '3';
    	if (text.match('4')) return '4';
    	if (text.match('5')) return '5';
    	if (text.match('6')) return '6';
    	if (text.match('7')) return '7';
    	if (text.match('8')) return '8';
    	if (text.match('9')) return '9';
    	return '';
    };

    Board.prototype.getOpponentColor = function (piece) {
    	return this.getPieceColor(piece) === 'white'
    	? 'black'
    	: 'white';
    };

    Board.prototype.isValidPhysics = function (pieceText, from, to) {
    	const name = this.getPieceName(pieceText);
    	const color = this.getPieceColor(pieceText);

    	// you can never take your own piece
    	const takePiece = this.pieceSpace[to[0]][to[1]];

    	const takeColor = this.getPieceColor(takePiece);
    	if (takeColor === color) return false;

    	// piece must be moving
    	if (from[0] === to[0] && from[1] === to[1]) return false;

    	if (this.isCastle(name, from, to)) return this.canCastle(pieceText, from, to);

    	if (name == 'pawn') {
    		// check for en passant
    		if (this.isEnPassant(from, to)) return true;

    		// ensure it is moving forward one square, or 2 if first move
    		if (color === 'white' && from[0] === 6 && from[0] - to[0] !== 1 && from[0] - to[0] !== 2) return false;

    		if (color === 'white' && from[0] !== 6 && from[0] - to[0] !== 1) return false;
    		if (color === 'black' && from[0] === 1 && to[0] - from[0] !== 1 && to[0] - from[0] !== 2) return false;
    		if (color === 'black' && from[0] !== 1 && to[0] - from[0] !== 1) return false;

    		// if moving sideways, make sure it's only one square and it's taking a piece
    		if (Math.abs(from[1] - to[1]) > 1) return false;

    		if (Math.abs(from[1] - to[1]) === 1) {
    			// is sideways 1 square
    			// when moving diagonal only 1 square forward is allowed
    			if (Math.abs(from[0] - to[0]) !== 1) return false;

    			// when moving diagonal you must be taking a piece
    			if (!takeColor) return false;
    		}

    		// if moving forward, ensure nothing is in its way
    		if (Math.abs(from[1] - to[1]) === 0) {
    			// cannot take by going forward
    			if (takePiece) return false;

    			if (!this.pathClear(from, to)) return false;
    		}

    		return true;
    	}

    	if (name == 'rook') {
    		// either row has to stay the same, or col has to stay the same
    		if (from[1] !== to[1] && from[0] !== to[0]) return false;

    		if (!this.pathClear(from, to)) return false;
    		return true;
    	}

    	if (name == 'knight') {
    		// the knight must move sideways, either 1 or 2 squares
    		if (Math.abs(from[1] - to[1]) !== 1 && Math.abs(from[1] - to[1]) !== 2) return false;

    		// if move is sideways 1, must be up/down 2
    		if (Math.abs(from[1] - to[1]) === 1 && Math.abs(from[0] - to[0]) !== 2) return false;

    		// if move is sideways 2, must be up/down 1
    		if (Math.abs(from[1] - to[1]) === 2 && Math.abs(from[0] - to[0]) !== 1) return false;

    		return true;
    	}

    	if (name == 'bishop') {
    		// ensure it's diagonal
    		if (Math.abs(from[1] - to[1]) !== Math.abs(from[0] - to[0])) return false;

    		if (!this.pathClear(from, to)) return false;
    		return true;
    	}

    	if (name == 'queen') {
    		// up/down, left/right, or diagonal only
    		if (from[1] !== to[1] && from[0] !== to[0] && Math.abs(from[1] - to[1]) !== Math.abs(from[0] - to[0])) return false;

    		if (!this.pathClear(from, to)) return false;
    		return true;
    	}

    	if (name == 'king') {
    		// ensure the move is only one square, NOTE: we already checked if this is a castling
    		if (Math.abs(from[1] - to[1]) > 1 || Math.abs(from[0] - to[0]) > 1) return false;

    		return true;
    	}
    };

    Board.prototype.pathClear = function (from, to) {
    	// piece must be moving
    	if (from[0] === to[0] && from[1] === to[1]) return false;

    	// path can only be up/down or diagonal
    	if (from[0] === to[0]) {
    		// side to side
    		const colInc = from[1] < to[1] ? 1 : -1;

    		const currentRow = from[0];
    		let currentCol = from[1] + colInc;

    		while (currentCol !== to[1] && currentCol > -1 && currentCol < 8) {
    			if (this.pieceSpace[currentRow][currentCol]) return false;
    			currentCol += colInc;
    		}

    		return true;
    	}

    	if (from[1] === to[1]) {
    		// up or down
    		const rowInc = from[0] < to[0] ? 1 : -1;

    		let currentRow = from[0] + rowInc;
    		const currentCol = from[1];

    		while (currentRow !== to[0] && currentRow > -1 && currentRow < 8) {
    			if (this.pieceSpace[currentRow][currentCol]) return false;
    			currentRow += rowInc;
    		}

    		return true;
    	}

    	if (Math.abs(from[1] - to[1]) === Math.abs(from[0] - to[0])) {
    		// diagonal
    		const rowInc = from[0] < to[0] ? 1 : -1;

    		const colInc = from[1] < to[1] ? 1 : -1;
    		let currentRow = from[0] + rowInc;
    		let currentCol = from[1] + colInc;

    		while (currentRow !== to[0] && currentRow > -1 && currentRow < 8) {
    			// this could be currentCol too, it's same number of loops
    			if (this.pieceSpace[currentRow][currentCol]) return false;

    			currentRow += rowInc;
    			currentCol += colInc;
    		}

    		return true;
    	}

    	return false;
    };

    // return true/false if this from->to is allowed to castle
    Board.prototype.canCastle = function (pieceText, from, to) {
    	if (this.palyerInCheck) return false;
    	const pieceName = this.getPieceName(pieceText);
    	const color = this.getPieceColor(pieceText);
    	if (!this.pathClear(from, to)) return false;

    	// ensure they are not castling through check
    	const colInc = from[1] < to[1] ? 1 : -1;

    	const currentRow = from[0];
    	let currentCol = from[1] + colInc;

    	while (currentCol !== to[1] && currentCol > -1 && currentCol < 8) {
    		if (this.inCheck(color, [currentRow, currentCol])) return false;
    		currentCol += colInc;
    	}

    	// basic approach of just checking every possible castle move and if it's still allowed
    	if (pieceName === 'rook') {
    		const rookNumber = pieceText.match('1') ? 1 : 2;
    		if (color === 'white' && rookNumber === 1 && this.whiteCanCastleLong) return true;
    		if (color === 'white' && rookNumber === 2 && this.whiteCanCastleShort) return true;
    		if (color === 'black' && rookNumber === 1 && this.blackCanCastleLong) return true;
    		if (color === 'black' && rookNumber === 2 && this.blackCanCastleShort) return true;
    	}

    	if (pieceName === 'king') {
    		const big = to[1] === 2;
    		if (color === 'white' && big && this.whiteCanCastleLong) return true;
    		if (color === 'white' && !big && this.whiteCanCastleShort) return true;
    		if (color === 'black' && big && this.blackCanCastleLong) return true;
    		if (color === 'black' && !big && this.blackCanCastleShort) return true;
    	}

    	return false;
    };

    // Go through every one of the opponents pieces and see if they can move to the location of the king
    // optionally pass in a location of the king, or just use the current location
    Board.prototype.inCheck = function (color, kingLocation = this.getKingLocation(color)) {
    	if (color !== 'black' && color !== 'white') throw new Error('inCheck must be passed a color');

    	for (let i = 0; i < this.pieceSpace.length; i++) {
    		const row = this.pieceSpace[i];

    		for (let j = 0; j < row.length; j++) {
    			const square = row[j];
    			if (!square || this.getPieceColor(square) === color) continue;
    			if (this.isValidPhysics(square, [i, j], kingLocation)) return true;
    		}
    	}

    	return false;
    };

    function colorTransform(i, color) {
    	if (color === 'black') return ({
    		0: 7,
    		1: 6,
    		2: 5,
    		3: 4,
    		4: 3,
    		5: 2,
    		6: 1,
    		7: 0
    	})[i];

    	return i;
    }

    function pickupPiece(eve) {
    	var _a, _b;

    	eve.dataTransfer.setData('piece', (_a = eve.target) === null || _a === void 0
    	? void 0
    	: _a.dataset.piece);

    	eve.dataTransfer.setData('location', (_b = eve.target) === null || _b === void 0
    	? void 0
    	: _b.parentElement.dataset.location);

    	eve.target.style['background-color'] = 'yellow';
    }

    function putdownPiece(eve) {
    	eve.target.style['background-color'] = '';
    }

    function dragOver(eve) {
    	// this listener is required to enable dropping
    	eve.preventDefault();
    }

    function instance($$self, $$props, $$invalidate) {
    	let validMint;
    	let validBounty;
    	let $myColor;
    	let $alerts;
    	let $gameId;
    	let $audience;
    	let $owner;
    	let $bounty;
    	let $whiteAddress;
    	let $blackAddress;
    	let $myAddress;
    	let $connected;
    	let $games;
    	let $ownedGames;
    	validate_store(myColor, 'myColor');
    	component_subscribe($$self, myColor, $$value => $$invalidate(16, $myColor = $$value));
    	validate_store(alerts, 'alerts');
    	component_subscribe($$self, alerts, $$value => $$invalidate(17, $alerts = $$value));
    	validate_store(gameId, 'gameId');
    	component_subscribe($$self, gameId, $$value => $$invalidate(18, $gameId = $$value));
    	validate_store(audience, 'audience');
    	component_subscribe($$self, audience, $$value => $$invalidate(19, $audience = $$value));
    	validate_store(owner, 'owner');
    	component_subscribe($$self, owner, $$value => $$invalidate(20, $owner = $$value));
    	validate_store(bounty, 'bounty');
    	component_subscribe($$self, bounty, $$value => $$invalidate(21, $bounty = $$value));
    	validate_store(whiteAddress, 'whiteAddress');
    	component_subscribe($$self, whiteAddress, $$value => $$invalidate(22, $whiteAddress = $$value));
    	validate_store(blackAddress, 'blackAddress');
    	component_subscribe($$self, blackAddress, $$value => $$invalidate(23, $blackAddress = $$value));
    	validate_store(myAddress, 'myAddress');
    	component_subscribe($$self, myAddress, $$value => $$invalidate(24, $myAddress = $$value));
    	validate_store(connected, 'connected');
    	component_subscribe($$self, connected, $$value => $$invalidate(25, $connected = $$value));
    	validate_store(games, 'games');
    	component_subscribe($$self, games, $$value => $$invalidate(26, $games = $$value));
    	validate_store(ownedGames, 'ownedGames');
    	component_subscribe($$self, ownedGames, $$value => $$invalidate(27, $ownedGames = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const gameBoard = new Board();

    	const connect = async function () {
    		moves.subscribe(async mvs => {
    			if (mvs.length === 0) {
    				gameBoard.reset();
    				trigger();
    				return;
    			}

    			for (let i = Number(gameBoard.history.length); i < mvs.length; i++) {
    				const moveStr = mvs[i];
    				const parts = moveStr.split(':');
    				const piece = parts[0];
    				const from = parts[1].split(',');
    				const to = parts[2].split(',');
    				const promoted = parts[3];

    				if (!(piece && from && to)) {
    					alerts.addAlert('Looks like the game state is invalid. We can\'t let you finish this game, but you can start a new one.', 'error');
    				}

    				updateBoard(piece, from, to, promoted);
    				await tick();
    			}
    		});

    		await init();
    		await games.findGames();
    	};

    	const loadGame = async function (game) {
    		$$invalidate(4, newGame = false);
    		await games.loadGame(game.id, game.player2, game.player1);
    	};

    	const unloadGame = function () {
    		games.unloadGame();
    	};

    	const logout = function () {
    		location.reload();
    	};

    	let newPlayer1Address = '';
    	let newPlayer2Address = '';
    	let minting = false;

    	const mint = async function () {
    		if (!validMint()) return;
    		$$invalidate(3, minting = true);

    		try {
    			const gameId = await games.mintGame({
    				player1: newPlayer1Address,
    				player2: newPlayer2Address
    			});

    			// if there is no gameId something went wrong
    			if (!gameId) {
    				$$invalidate(3, minting = false);
    				return;
    			}

    			$$invalidate(4, newGame = {
    				id: gameId.toNumber(),
    				player1: newPlayer1Address.toString(),
    				player2: newPlayer2Address.toString()
    			});

    			$$invalidate(0, newPlayer1Address = '');
    			$$invalidate(1, newPlayer2Address = '');
    		} catch(err) {
    			$$invalidate(3, minting = false);
    			console.log(err);
    		}

    		$$invalidate(3, minting = false);
    	};

    	const addBounty = async function () {
    		await games.addBounty(bountyGame, newBounty);
    		$$invalidate(2, newBounty = undefined);
    		$$invalidate(5, bountyGame = undefined);
    		$$invalidate(6, settingBounty = false);
    	};

    	const certifyWinner = async function (gameId) {
    		await games.certifyWinner(gameId, winner);
    	};

    	let newGame;
    	let bountyGame;
    	let newBounty;
    	let settingBounty = false;

    	// vars for promoting pawns that make the backline
    	let showPromoteModal = false;

    	let promoteColor;
    	let winner;
    	let pieceSpace = gameBoard.pieceSpace;
    	let history = gameBoard.history;
    	let turn = gameBoard.turn;
    	let palyerInCheck = gameBoard.palyerInCheck;
    	let whiteCanCastleLong = gameBoard.whiteCanCastleLong;
    	let whiteCanCastleShort = gameBoard.whiteCanCastleShort;
    	let blackCanCastleLong = gameBoard.blackCanCastleLong;
    	let blackCanCastleShort = gameBoard.blackCanCastleShort;

    	async function dropPiece(eve) {
    		eve.preventDefault();
    		if (winner) return;
    		const moveTo = eve.currentTarget.dataset.location.split(',').map(str => parseInt(str, 10));
    		const moveFrom = eve.dataTransfer.getData('location').split(',').map(str => parseInt(str, 10));
    		const piece = eve.dataTransfer.getData('piece');

    		// something went wrong in the event cycle, so we bail
    		if (!(moveTo && moveFrom && piece)) return;

    		console.log(`Trying to move ${piece} from ${moveFrom} to ${moveTo}`);

    		// enforce rules of the game!
    		const validMove = isMoveAllowed(moveFrom, moveTo);

    		if (!validMove) return;
    		const promotedTo = await getPromotion(piece, moveFrom, moveTo);

    		// call to tableland with new board state
    		// TODO: we are not waiting for response
    		moves.doMove(`${piece}:${moveFrom}:${moveTo}:${promotedTo}`);

    		updateBoard(piece, moveFrom, moveTo, promotedTo);
    	}

    	function updateBoard(piece, from, to, promoted) {
    		gameBoard.doMove(piece, from, to, promoted);

    		// Svelte reactivity implementation means that we need to
    		// trigger the changes to the variable assignments directly
    		// More detail can be found here: https://svelte.dev/docs#component-format-script-2-assignments-are-reactive
    		trigger();

    		// Did they win?
    		const opponentColor = gameBoard.getOpponentColor(piece);

    		if (!gameBoard.inCheck(opponentColor)) return;

    		// go through every square with a piece from a given color and see if there is any move that is allowed
    		// If the move is allowed, that means the "color" is no longer in check, hence it's not checkmate
    		const ghostBoard = getGhostBoard();

    		for (let i = 0; i < ghostBoard.pieceSpace.length; i++) {
    			const row = ghostBoard.pieceSpace[i];

    			for (let j = 0; j < row.length; j++) {
    				const square = row[j];
    				if (!square || ghostBoard.getPieceColor(square) !== opponentColor) continue;

    				for (let k = 0; k < ghostBoard.pieceSpace.length; k++) {
    					const row2 = ghostBoard.pieceSpace[k];

    					for (let l = 0; l < row2.length; l++) {
    						row2[j];
    						if (!ghostBoard.isValidPhysics(square, [i, j], [k, l])) continue;
    						ghostBoard.doMove(square, [i, j], [k, l]);

    						// if any move results in not being in check they are not in checkmate
    						if (!ghostBoard.inCheck(opponentColor)) {
    							return;
    						}

    						ghostBoard.undoMove();
    					}
    				}
    			}
    		}

    		$$invalidate(9, winner = ghostBoard.getPieceColor(piece));
    	}

    	function trigger() {
    		$$invalidate(10, pieceSpace = gameBoard.pieceSpace);
    		$$invalidate(11, history = gameBoard.history);
    		$$invalidate(12, turn = gameBoard.turn);
    		$$invalidate(13, palyerInCheck = gameBoard.palyerInCheck);
    		whiteCanCastleLong = gameBoard.whiteCanCastleLong;
    		whiteCanCastleShort = gameBoard.whiteCanCastleShort;
    		blackCanCastleLong = gameBoard.blackCanCastleLong;
    		blackCanCastleShort = gameBoard.blackCanCastleShort;
    	}

    	// are they allowed to make the move
    	function isMoveAllowed(from, to) {
    		const pieceText = gameBoard.pieceSpace[from[0]][from[1]];
    		const color = gameBoard.getPieceColor(pieceText);

    		// is it their turn and there piece
    		if (color !== turn) return false;

    		if (color !== $myColor) return false;

    		// is the movement allowed for the piece
    		if (!gameBoard.isValidPhysics(pieceText, from, to)) return false;

    		// ensure the move doesn't put the moving player in check
    		// get a "ghostBoard" so we can make the move and see if the king is in check
    		const ghostBoard = getGhostBoard();

    		ghostBoard.doMove(pieceText, from, to);
    		if (ghostBoard.inCheck(color)) return false;
    		return true;
    	}

    	const promoter = {
    		listeners: [],
    		once(listener) {
    			this.listeners.push(listener);
    		},
    		promote(data) {
    			while (this.listeners.length) {
    				this.listeners.pop()(data);
    			}
    		}
    	};

    	function getPromotion(piece, moveFrom, moveTo) {
    		// if it's not a pawn there's nothing to do
    		if (!piece.match('pawn')) return '';

    		// see if the pawn made it to the backline
    		const color = gameBoard.getPieceColor(piece);

    		const row = moveTo[0];
    		const backline = color === 'black' ? row === 7 : row === 0;
    		if (!backline) return '';
    		$$invalidate(7, showPromoteModal = true);
    		$$invalidate(8, promoteColor = color);

    		return new Promise(function (resolve, reject) {
    				promoter.once(function (piece) {
    					$$invalidate(7, showPromoteModal = false);
    					$$invalidate(8, promoteColor = undefined);
    					resolve(piece);
    				});
    			});
    	}

    	// get a clone of the board in it's current state.  This can be
    	// used to see what potential moves would make a board look like
    	function getGhostBoard() {
    		const ghostBoard = new Board({
    				pieceSpace: [...gameBoard.pieceSpace].map(row => [...row]),
    				history: [...gameBoard.history].map(move => {
    					return Object.assign({}, move);
    				}),
    				turn: String(turn),
    				palyerInCheck: Boolean(palyerInCheck),
    				whiteCanCastleLong: Boolean(whiteCanCastleLong),
    				whiteCanCastleShort: Boolean(whiteCanCastleShort),
    				blackCanCastleLong: Boolean(blackCanCastleLong),
    				blackCanCastleShort: Boolean(blackCanCastleShort)
    			});

    		return ghostBoard;
    	}

    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => loadGame(newGame);

    	function modal_visible_binding(value) {
    		newGame = value;
    		$$invalidate(4, newGame);
    	}

    	function input_value_binding(value) {
    		newBounty = value;
    		$$invalidate(2, newBounty);
    	}

    	function modal_visible_binding_1(value) {
    		bountyGame = value;
    		$$invalidate(5, bountyGame);
    	}

    	const click_handler_1 = () => promoter.promote('rook');
    	const click_handler_2 = () => promoter.promote('knight');
    	const click_handler_3 = () => promoter.promote('bishop');
    	const click_handler_4 = () => promoter.promote('queen');
    	const click_handler_5 = () => promoter.promote('rook');
    	const click_handler_6 = () => promoter.promote('knight');
    	const click_handler_7 = () => promoter.promote('bishop');
    	const click_handler_8 = () => promoter.promote('queen');

    	function modal_visible_binding_2(value) {
    		showPromoteModal = value;
    		$$invalidate(7, showPromoteModal);
    	}

    	const click_handler_9 = () => certifyWinner($gameId);
    	const click_handler_10 = ownedGame => $$invalidate(5, bountyGame = ownedGame);

    	function input0_value_binding(value) {
    		newPlayer1Address = value;
    		($$invalidate(0, newPlayer1Address), $$invalidate(1, newPlayer2Address));
    	}

    	function input1_value_binding(value) {
    		newPlayer2Address = value;
    		($$invalidate(1, newPlayer2Address), $$invalidate(0, newPlayer1Address));
    	}

    	$$self.$capture_state = () => ({
    		pieceCodes,
    		getInitialState,
    		rowMap,
    		colMap,
    		pieceMap,
    		Board,
    		colorTransform,
    		tick,
    		utils: utils$4,
    		Alert,
    		Button,
    		Input,
    		Modal,
    		ModalBody,
    		Spinner,
    		alerts,
    		audience,
    		blackAddress,
    		bounty,
    		connected,
    		gameId,
    		games,
    		owner,
    		ownedGames,
    		init,
    		moves,
    		myAddress,
    		myColor,
    		whiteAddress,
    		gameBoard,
    		connect,
    		loadGame,
    		unloadGame,
    		logout,
    		newPlayer1Address,
    		newPlayer2Address,
    		minting,
    		mint,
    		addBounty,
    		certifyWinner,
    		newGame,
    		bountyGame,
    		newBounty,
    		settingBounty,
    		showPromoteModal,
    		promoteColor,
    		winner,
    		pieceSpace,
    		history,
    		turn,
    		palyerInCheck,
    		whiteCanCastleLong,
    		whiteCanCastleShort,
    		blackCanCastleLong,
    		blackCanCastleShort,
    		pickupPiece,
    		putdownPiece,
    		dragOver,
    		dropPiece,
    		updateBoard,
    		trigger,
    		isMoveAllowed,
    		promoter,
    		getPromotion,
    		getGhostBoard,
    		validMint,
    		validBounty,
    		$myColor,
    		$alerts,
    		$gameId,
    		$audience,
    		$owner,
    		$bounty,
    		$whiteAddress,
    		$blackAddress,
    		$myAddress,
    		$connected,
    		$games,
    		$ownedGames
    	});

    	$$self.$inject_state = $$props => {
    		if ('newPlayer1Address' in $$props) $$invalidate(0, newPlayer1Address = $$props.newPlayer1Address);
    		if ('newPlayer2Address' in $$props) $$invalidate(1, newPlayer2Address = $$props.newPlayer2Address);
    		if ('minting' in $$props) $$invalidate(3, minting = $$props.minting);
    		if ('newGame' in $$props) $$invalidate(4, newGame = $$props.newGame);
    		if ('bountyGame' in $$props) $$invalidate(5, bountyGame = $$props.bountyGame);
    		if ('newBounty' in $$props) $$invalidate(2, newBounty = $$props.newBounty);
    		if ('settingBounty' in $$props) $$invalidate(6, settingBounty = $$props.settingBounty);
    		if ('showPromoteModal' in $$props) $$invalidate(7, showPromoteModal = $$props.showPromoteModal);
    		if ('promoteColor' in $$props) $$invalidate(8, promoteColor = $$props.promoteColor);
    		if ('winner' in $$props) $$invalidate(9, winner = $$props.winner);
    		if ('pieceSpace' in $$props) $$invalidate(10, pieceSpace = $$props.pieceSpace);
    		if ('history' in $$props) $$invalidate(11, history = $$props.history);
    		if ('turn' in $$props) $$invalidate(12, turn = $$props.turn);
    		if ('palyerInCheck' in $$props) $$invalidate(13, palyerInCheck = $$props.palyerInCheck);
    		if ('whiteCanCastleLong' in $$props) whiteCanCastleLong = $$props.whiteCanCastleLong;
    		if ('whiteCanCastleShort' in $$props) whiteCanCastleShort = $$props.whiteCanCastleShort;
    		if ('blackCanCastleLong' in $$props) blackCanCastleLong = $$props.blackCanCastleLong;
    		if ('blackCanCastleShort' in $$props) blackCanCastleShort = $$props.blackCanCastleShort;
    		if ('validMint' in $$props) $$invalidate(14, validMint = $$props.validMint);
    		if ('validBounty' in $$props) $$invalidate(15, validBounty = $$props.validBounty);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*newPlayer1Address, newPlayer2Address*/ 3) {
    			$$invalidate(14, validMint = function () {
    				try {
    					// make sure the wallet address is valid
    					$$invalidate(0, newPlayer1Address = getAddress(newPlayer1Address));

    					$$invalidate(1, newPlayer2Address = getAddress(newPlayer2Address));
    				} catch(err) {
    					return false;
    				}

    				return true;
    			});
    		}

    		if ($$self.$$.dirty[0] & /*newBounty*/ 4) {
    			$$invalidate(15, validBounty = function () {
    				if (newBounty && newBounty > 0) return true;
    				return false;
    			});
    		}
    	};

    	return [
    		newPlayer1Address,
    		newPlayer2Address,
    		newBounty,
    		minting,
    		newGame,
    		bountyGame,
    		settingBounty,
    		showPromoteModal,
    		promoteColor,
    		winner,
    		pieceSpace,
    		history,
    		turn,
    		palyerInCheck,
    		validMint,
    		validBounty,
    		$myColor,
    		$alerts,
    		$gameId,
    		$audience,
    		$owner,
    		$bounty,
    		$whiteAddress,
    		$blackAddress,
    		$myAddress,
    		$connected,
    		$games,
    		$ownedGames,
    		connect,
    		loadGame,
    		unloadGame,
    		logout,
    		mint,
    		addBounty,
    		certifyWinner,
    		dropPiece,
    		promoter,
    		click_handler,
    		modal_visible_binding,
    		input_value_binding,
    		modal_visible_binding_1,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		modal_visible_binding_2,
    		click_handler_9,
    		click_handler_10,
    		input0_value_binding,
    		input1_value_binding
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init$1(this, options, instance, create_fragment, safe_not_equal, {}, null, [-1, -1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
        target: document.body
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
